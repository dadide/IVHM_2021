/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 35.3.0 Wed Jan  6 10:33:28 2021.
 */

#ifndef CANVEHICLE_H
#define CANVEHICLE_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif


/* Frame cycle times in milliseconds. */
typedef unsigned char U8;
typedef unsigned short U16;
typedef unsigned int U32;
typedef unsigned long long U64;

#define USHORT unsigned short int
#define BYTE unsigned char
#define CHAR char
#define UCHAR unsigned char
#define UINT unsigned int
#define DWORD unsigned int
#define PVOID void*
#define ULONG unsigned int
#define INT int
#define UINT32 UINT
#define LPVOID void*
#define BOOL BYTE
#define TRUE 1
#define FALSE 0

/* Frame ids. */
#define CANVEHICLE_BMS_HSC1_FR_P02_FRAME_ID (0x297u)
#define CANVEHICLE_BMS_HSC1_FR_P07_FRAME_ID (0x29bu)
#define CANVEHICLE_BMS_HSC1_FR_P11_FRAME_ID (0x2a2u)
#define CANVEHICLE_BMS_HSC1_FR_P12_FRAME_ID (0x3abu)
#define CANVEHICLE_BMS_HSC1_FR_P13_FRAME_ID (0x3acu)
#define CANVEHICLE_BMS_HSC1_FR_P14_FRAME_ID (0x391u)
#define CANVEHICLE_BMS_HSC1_FR_P15_FRAME_ID (0x393u)
#define CANVEHICLE_BMS_HSC1_FR_P16_FRAME_ID (0x3a8u)
#define CANVEHICLE_DIAG_ACL_REQ_FRAME_ID (0x7f1u)
#define CANVEHICLE_DIAG_ACL_RESP_FRAME_ID (0x7f9u)
#define CANVEHICLE_DIAG_DTC_INFO_BMS_FRAME_ID (0x70bu)
#define CANVEHICLE_DIAG_DTC_INFO_HCU_FRAME_ID (0x70au)
#define CANVEHICLE_DIAG_DTC_INFO_HVDCDC_FRAME_ID (0x70fu)
#define CANVEHICLE_DIAG_DTC_INFO_ISC_FRAME_ID (0x70du)
#define CANVEHICLE_DIAG_DTC_INFO_SAC_FRAME_ID (0x7c3u)
#define CANVEHICLE_DIAG_DTC_INFO_SCU_FRAME_ID (0x702u)
#define CANVEHICLE_DIAG_DTC_INFO_SDM_FRAME_ID (0x798u)
#define CANVEHICLE_DIAG_DTC_INFO_TC_FRAME_ID (0x70cu)
#define CANVEHICLE_DIAG_FUNC_REQ_HSC1_FRAME_ID (0x7dfu)
#define CANVEHICLE_DIAG_PHYS_REQ_BMS_FRAME_ID (0x781u)
#define CANVEHICLE_DIAG_PHYS_REQ_HCU_FRAME_ID (0x7e3u)
#define CANVEHICLE_DIAG_PHYS_REQ_HVDCDC_FRAME_ID (0x785u)
#define CANVEHICLE_DIAG_PHYS_REQ_ISC_FRAME_ID (0x783u)
#define CANVEHICLE_DIAG_PHYS_REQ_SAC_FRAME_ID (0x777u)
#define CANVEHICLE_DIAG_PHYS_REQ_SCU_FRAME_ID (0x771u)
#define CANVEHICLE_DIAG_PHYS_REQ_SDM_FRAME_ID (0x730u)
#define CANVEHICLE_DIAG_PHYS_REQ_TC_FRAME_ID (0x782u)
#define CANVEHICLE_DIAG_PHYS_RESP_BMS_FRAME_ID (0x789u)
#define CANVEHICLE_DIAG_PHYS_RESP_HCU_FRAME_ID (0x7ebu)
#define CANVEHICLE_DIAG_PHYS_RESP_HVDCDC_FRAME_ID (0x78du)
#define CANVEHICLE_DIAG_PHYS_RESP_ISC_FRAME_ID (0x78bu)
#define CANVEHICLE_DIAG_PHYS_RESP_SAC_FRAME_ID (0x77fu)
#define CANVEHICLE_DIAG_PHYS_RESP_SCU_FRAME_ID (0x779u)
#define CANVEHICLE_DIAG_PHYS_RESP_SDM_FRAME_ID (0x738u)
#define CANVEHICLE_DIAG_PHYS_RESP_TC_FRAME_ID (0x78au)
#define CANVEHICLE_ECM_HSC1_FR_P00_FRAME_ID (0xc9u)
#define CANVEHICLE_ECM_HSC1_FR_P01_FRAME_ID (0xbeu)
#define CANVEHICLE_ECM_HSC1_FR_P03_FRAME_ID (0x1c3u)
#define CANVEHICLE_ECM_HSC1_FR_P07_FRAME_ID (0x1dfu)
#define CANVEHICLE_ECM_HSC1_FR_P09_FRAME_ID (0x2c3u)
#define CANVEHICLE_ECM_HSC1_FR_P10_FRAME_ID (0x3b1u)
#define CANVEHICLE_ECM_HSC1_FR_P12_FRAME_ID (0x3d1u)
#define CANVEHICLE_ECM_HSC1_FR_P14_FRAME_ID (0x4c1u)
#define CANVEHICLE_GW_HSC1_AC_FR_P01_FRAME_ID (0x361u)
#define CANVEHICLE_GW_HSC1_AC_FR_P02_FRAME_ID (0x379u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_FRAME_ID (0x364u)
#define CANVEHICLE_GW_HSC1_AC_FR_P04_FRAME_ID (0x372u)
#define CANVEHICLE_GW_HSC1_AC_FR_P05_FRAME_ID (0x30bu)
#define CANVEHICLE_GW_HSC1_AC_FR_P06_FRAME_ID (0x373u)
#define CANVEHICLE_GW_HSC1_AC_FR_P07_FRAME_ID (0x2f4u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_FRAME_ID (0x46au)
#define CANVEHICLE_GW_HSC1_BCM_FR_P06_FRAME_ID (0x21cu)
#define CANVEHICLE_GW_HSC1_BCM_FR_P07_FRAME_ID (0x1f2u)
#define CANVEHICLE_GW_HSC1_BCM_FR_S02_FRAME_ID (0x39u)
#define CANVEHICLE_GW_HSC1_BCM_FR_S04_FRAME_ID (0x3au)
#define CANVEHICLE_GW_HSC1_BCM_FR_S06_FRAME_ID (0x24u)
#define CANVEHICLE_GW_HSC1_BCM_FR_S07_FRAME_ID (0x3fu)
#define CANVEHICLE_GW_HSC1_BCM_FR_S12_FRAME_ID (0x22u)
#define CANVEHICLE_GW_HSC1_BCM_FR_S14_FRAME_ID (0x61au)
#define CANVEHICLE_GW_HSC1_BCM_FR_S15_FRAME_ID (0x41u)
#define CANVEHICLE_GW_HSC1_EPB_FR_P00_FRAME_ID (0x230u)
#define CANVEHICLE_GW_HSC1_EPB_FR_P01_FRAME_ID (0x22au)
#define CANVEHICLE_GW_HSC1_FICM_FR_P02_FRAME_ID (0x376u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P08_FRAME_ID (0x2f6u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FRAME_ID (0x34fu)
#define CANVEHICLE_GW_HSC1_FR_P00_FRAME_ID (0x169u)
#define CANVEHICLE_GW_HSC1_FR_P01_FRAME_ID (0x1f1u)
#define CANVEHICLE_GW_HSC1_FR_P02_FRAME_ID (0xf1u)
#define CANVEHICLE_GW_HSC1_FR_P04_FRAME_ID (0x1e1u)
#define CANVEHICLE_GW_HSC1_FR_P08_FRAME_ID (0x540u)
#define CANVEHICLE_GW_HSC1_FR_P09_FRAME_ID (0x31bu)
#define CANVEHICLE_GW_HSC1_FR_P10_FRAME_ID (0x3f1u)
#define CANVEHICLE_GW_HSC1_FR_P12_FRAME_ID (0x2fdu)
#define CANVEHICLE_GW_HSC1_FR_P13_FRAME_ID (0x1a9u)
#define CANVEHICLE_GW_HSC1_FR_S00_FRAME_ID (0x6a3u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P00_FRAME_ID (0x165u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_FRAME_ID (0x166u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P02_FRAME_ID (0x167u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P06_FRAME_ID (0x541u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P10_FRAME_ID (0x343u)
#define CANVEHICLE_GW_HSC1_PDC_FR_P00_FRAME_ID (0x23du)
#define CANVEHICLE_GW_HSC1_PMDC_FR_P02_FRAME_ID (0x32eu)
#define CANVEHICLE_GW_HSC1_PMDC_FR_P03_FRAME_ID (0x517u)
#define CANVEHICLE_GW_HSC1_SAS_FR_P00_FRAME_ID (0x1e5u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P00_FRAME_ID (0xc1u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P01_FRAME_ID (0xc5u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P02_FRAME_ID (0x185u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P03_FRAME_ID (0x1c7u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_FRAME_ID (0x1e9u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P08_FRAME_ID (0x1fcu)
#define CANVEHICLE_GW_HSC1_SCS_FR_P09_FRAME_ID (0x214u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P11_FRAME_ID (0x348u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P12_FRAME_ID (0x34au)
#define CANVEHICLE_GW_HSC1_SCS_FR_P13_FRAME_ID (0x17du)
#define CANVEHICLE_GW_HSC1_SCS_FR_P15_FRAME_ID (0x353u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P16_FRAME_ID (0x227u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_FRAME_ID (0x31au)
#define CANVEHICLE_HCU_HSC1_FR_P00_FRAME_ID (0xafu)
#define CANVEHICLE_HCU_HSC1_FR_P01_FRAME_ID (0x196u)
#define CANVEHICLE_HCU_HSC1_FR_P07_FRAME_ID (0x38bu)
#define CANVEHICLE_HCU_HSC1_FR_P08_FRAME_ID (0xacu)
#define CANVEHICLE_HCU_HSC1_FR_P10_FRAME_ID (0x30cu)
#define CANVEHICLE_HCU_HSC1_FR_P11_FRAME_ID (0x3a3u)
#define CANVEHICLE_HCU_HSC1_FR_P13_FRAME_ID (0x19cu)
#define CANVEHICLE_HCU_HSC1_TCM_FR_P03_FRAME_ID (0x1afu)
#define CANVEHICLE_HVDCDC_HSC1_FR_P01_FRAME_ID (0x3a2u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P02_FRAME_ID (0x3a4u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P03_FRAME_ID (0x39fu)
#define CANVEHICLE_ISC_HSC1_FR_P03_FRAME_ID (0x93u)
#define CANVEHICLE_ISC_HSC1_FR_S01_FRAME_ID (0x42u)
#define CANVEHICLE_ISC_HSC1_FR_S02_FRAME_ID (0x43u)
#define CANVEHICLE_ISC_HSC1_FR_S03_FRAME_ID (0x44u)
#define CANVEHICLE_SCU_HSC1_FR_P00_FRAME_ID (0x9du)
#define CANVEHICLE_SDM_HSC1_FR_P00_FRAME_ID (0x163u)
#define CANVEHICLE_SDM_HSC1_FR_S00_FRAME_ID (0x616u)
#define CANVEHICLE_SDM_HSC1_FR_S01_FRAME_ID (0x617u)
#define CANVEHICLE_SDM_HSC1_FR_S02_FRAME_ID (0x618u)
#define CANVEHICLE_SDM_HSC1_FR_S03_FRAME_ID (0x619u)
#define CANVEHICLE_TCM_HSC1_FR_P07_FRAME_ID (0x2a5u)
#define CANVEHICLE_TCM_HSC1_FR_P09_FRAME_ID (0x4c9u)
#define CANVEHICLE_TC_HSC1_FR_P01_FRAME_ID (0x94u)
#define CANVEHICLE_TC_HSC1_FR_S01_FRAME_ID (0x25u)
#define CANVEHICLE_TC_HSC1_FR_S02_FRAME_ID (0x26u)
#define CANVEHICLE_TC_HSC1_FR_S03_FRAME_ID (0x27u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_FRAME_ID (0x194u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_FRAME_ID (0x389u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_FRAME_ID (0xfbu)
#define CANVEHICLE_VCU_HSC1_TCM_FR_P01_FRAME_ID (0xc7u)

/* Frame lengths in bytes. */
#define CANVEHICLE_BMS_HSC1_FR_P02_LENGTH (8u)
#define CANVEHICLE_BMS_HSC1_FR_P07_LENGTH (8u)
#define CANVEHICLE_BMS_HSC1_FR_P11_LENGTH (8u)
#define CANVEHICLE_BMS_HSC1_FR_P12_LENGTH (8u)
#define CANVEHICLE_BMS_HSC1_FR_P13_LENGTH (8u)
#define CANVEHICLE_BMS_HSC1_FR_P14_LENGTH (8u)
#define CANVEHICLE_BMS_HSC1_FR_P15_LENGTH (8u)
#define CANVEHICLE_BMS_HSC1_FR_P16_LENGTH (8u)
#define CANVEHICLE_DIAG_ACL_REQ_LENGTH (8u)
#define CANVEHICLE_DIAG_ACL_RESP_LENGTH (8u)
#define CANVEHICLE_DIAG_DTC_INFO_BMS_LENGTH (7u)
#define CANVEHICLE_DIAG_DTC_INFO_HCU_LENGTH (7u)
#define CANVEHICLE_DIAG_DTC_INFO_HVDCDC_LENGTH (7u)
#define CANVEHICLE_DIAG_DTC_INFO_ISC_LENGTH (7u)
#define CANVEHICLE_DIAG_DTC_INFO_SAC_LENGTH (7u)
#define CANVEHICLE_DIAG_DTC_INFO_SCU_LENGTH (7u)
#define CANVEHICLE_DIAG_DTC_INFO_SDM_LENGTH (7u)
#define CANVEHICLE_DIAG_DTC_INFO_TC_LENGTH (7u)
#define CANVEHICLE_DIAG_FUNC_REQ_HSC1_LENGTH (8u)
#define CANVEHICLE_DIAG_PHYS_REQ_BMS_LENGTH (8u)
#define CANVEHICLE_DIAG_PHYS_REQ_HCU_LENGTH (8u)
#define CANVEHICLE_DIAG_PHYS_REQ_HVDCDC_LENGTH (8u)
#define CANVEHICLE_DIAG_PHYS_REQ_ISC_LENGTH (8u)
#define CANVEHICLE_DIAG_PHYS_REQ_SAC_LENGTH (8u)
#define CANVEHICLE_DIAG_PHYS_REQ_SCU_LENGTH (8u)
#define CANVEHICLE_DIAG_PHYS_REQ_SDM_LENGTH (8u)
#define CANVEHICLE_DIAG_PHYS_REQ_TC_LENGTH (8u)
#define CANVEHICLE_DIAG_PHYS_RESP_BMS_LENGTH (8u)
#define CANVEHICLE_DIAG_PHYS_RESP_HCU_LENGTH (8u)
#define CANVEHICLE_DIAG_PHYS_RESP_HVDCDC_LENGTH (8u)
#define CANVEHICLE_DIAG_PHYS_RESP_ISC_LENGTH (8u)
#define CANVEHICLE_DIAG_PHYS_RESP_SAC_LENGTH (8u)
#define CANVEHICLE_DIAG_PHYS_RESP_SCU_LENGTH (8u)
#define CANVEHICLE_DIAG_PHYS_RESP_SDM_LENGTH (8u)
#define CANVEHICLE_DIAG_PHYS_RESP_TC_LENGTH (8u)
#define CANVEHICLE_ECM_HSC1_FR_P00_LENGTH (8u)
#define CANVEHICLE_ECM_HSC1_FR_P01_LENGTH (3u)
#define CANVEHICLE_ECM_HSC1_FR_P03_LENGTH (8u)
#define CANVEHICLE_ECM_HSC1_FR_P07_LENGTH (2u)
#define CANVEHICLE_ECM_HSC1_FR_P09_LENGTH (8u)
#define CANVEHICLE_ECM_HSC1_FR_P10_LENGTH (8u)
#define CANVEHICLE_ECM_HSC1_FR_P12_LENGTH (8u)
#define CANVEHICLE_ECM_HSC1_FR_P14_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_AC_FR_P01_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_AC_FR_P02_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_AC_FR_P04_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_AC_FR_P05_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_AC_FR_P06_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_AC_FR_P07_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P06_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P07_LENGTH (2u)
#define CANVEHICLE_GW_HSC1_BCM_FR_S02_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_BCM_FR_S04_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_BCM_FR_S06_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_BCM_FR_S07_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_BCM_FR_S12_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_BCM_FR_S14_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_BCM_FR_S15_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_EPB_FR_P00_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_EPB_FR_P01_LENGTH (2u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P02_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P08_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_FR_P00_LENGTH (6u)
#define CANVEHICLE_GW_HSC1_FR_P01_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_FR_P02_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_FR_P04_LENGTH (7u)
#define CANVEHICLE_GW_HSC1_FR_P08_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_FR_P09_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_FR_P10_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_FR_P12_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_FR_P13_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_FR_S00_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P00_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P02_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P06_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P10_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_PDC_FR_P00_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_PMDC_FR_P02_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_PMDC_FR_P03_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_SAS_FR_P00_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P00_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P01_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P02_LENGTH (4u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P03_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P08_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P09_LENGTH (6u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P11_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P12_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P13_LENGTH (7u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P15_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P16_LENGTH (8u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_LENGTH (8u)
#define CANVEHICLE_HCU_HSC1_FR_P00_LENGTH (8u)
#define CANVEHICLE_HCU_HSC1_FR_P01_LENGTH (8u)
#define CANVEHICLE_HCU_HSC1_FR_P07_LENGTH (8u)
#define CANVEHICLE_HCU_HSC1_FR_P08_LENGTH (8u)
#define CANVEHICLE_HCU_HSC1_FR_P10_LENGTH (8u)
#define CANVEHICLE_HCU_HSC1_FR_P11_LENGTH (8u)
#define CANVEHICLE_HCU_HSC1_FR_P13_LENGTH (8u)
#define CANVEHICLE_HCU_HSC1_TCM_FR_P03_LENGTH (8u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P01_LENGTH (8u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P02_LENGTH (8u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P03_LENGTH (8u)
#define CANVEHICLE_ISC_HSC1_FR_P03_LENGTH (8u)
#define CANVEHICLE_ISC_HSC1_FR_S01_LENGTH (8u)
#define CANVEHICLE_ISC_HSC1_FR_S02_LENGTH (8u)
#define CANVEHICLE_ISC_HSC1_FR_S03_LENGTH (8u)
#define CANVEHICLE_SCU_HSC1_FR_P00_LENGTH (8u)
#define CANVEHICLE_SDM_HSC1_FR_P00_LENGTH (8u)
#define CANVEHICLE_SDM_HSC1_FR_S00_LENGTH (8u)
#define CANVEHICLE_SDM_HSC1_FR_S01_LENGTH (8u)
#define CANVEHICLE_SDM_HSC1_FR_S02_LENGTH (8u)
#define CANVEHICLE_SDM_HSC1_FR_S03_LENGTH (8u)
#define CANVEHICLE_TCM_HSC1_FR_P07_LENGTH (8u)
#define CANVEHICLE_TCM_HSC1_FR_P09_LENGTH (7u)
#define CANVEHICLE_TC_HSC1_FR_P01_LENGTH (8u)
#define CANVEHICLE_TC_HSC1_FR_S01_LENGTH (8u)
#define CANVEHICLE_TC_HSC1_FR_S02_LENGTH (8u)
#define CANVEHICLE_TC_HSC1_FR_S03_LENGTH (8u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_LENGTH (8u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_LENGTH (8u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_LENGTH (8u)
#define CANVEHICLE_VCU_HSC1_TCM_FR_P01_LENGTH (4u)

/* Extended or standard frame types. */
#define CANVEHICLE_BMS_HSC1_FR_P02_IS_EXTENDED (0)
#define CANVEHICLE_BMS_HSC1_FR_P07_IS_EXTENDED (0)
#define CANVEHICLE_BMS_HSC1_FR_P11_IS_EXTENDED (0)
#define CANVEHICLE_BMS_HSC1_FR_P12_IS_EXTENDED (0)
#define CANVEHICLE_BMS_HSC1_FR_P13_IS_EXTENDED (0)
#define CANVEHICLE_BMS_HSC1_FR_P14_IS_EXTENDED (0)
#define CANVEHICLE_BMS_HSC1_FR_P15_IS_EXTENDED (0)
#define CANVEHICLE_BMS_HSC1_FR_P16_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_ACL_REQ_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_ACL_RESP_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_DTC_INFO_BMS_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_DTC_INFO_HCU_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_DTC_INFO_HVDCDC_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_DTC_INFO_ISC_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_DTC_INFO_SAC_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_DTC_INFO_SCU_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_DTC_INFO_SDM_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_DTC_INFO_TC_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_FUNC_REQ_HSC1_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_PHYS_REQ_BMS_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_PHYS_REQ_HCU_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_PHYS_REQ_HVDCDC_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_PHYS_REQ_ISC_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_PHYS_REQ_SAC_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_PHYS_REQ_SCU_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_PHYS_REQ_SDM_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_PHYS_REQ_TC_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_PHYS_RESP_BMS_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_PHYS_RESP_HCU_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_PHYS_RESP_HVDCDC_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_PHYS_RESP_ISC_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_PHYS_RESP_SAC_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_PHYS_RESP_SCU_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_PHYS_RESP_SDM_IS_EXTENDED (0)
#define CANVEHICLE_DIAG_PHYS_RESP_TC_IS_EXTENDED (0)
#define CANVEHICLE_ECM_HSC1_FR_P00_IS_EXTENDED (0)
#define CANVEHICLE_ECM_HSC1_FR_P01_IS_EXTENDED (0)
#define CANVEHICLE_ECM_HSC1_FR_P03_IS_EXTENDED (0)
#define CANVEHICLE_ECM_HSC1_FR_P07_IS_EXTENDED (0)
#define CANVEHICLE_ECM_HSC1_FR_P09_IS_EXTENDED (0)
#define CANVEHICLE_ECM_HSC1_FR_P10_IS_EXTENDED (0)
#define CANVEHICLE_ECM_HSC1_FR_P12_IS_EXTENDED (0)
#define CANVEHICLE_ECM_HSC1_FR_P14_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_AC_FR_P01_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_AC_FR_P02_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_AC_FR_P04_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_AC_FR_P05_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_AC_FR_P06_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_AC_FR_P07_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_BCM_FR_P06_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_BCM_FR_P07_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_BCM_FR_S02_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_BCM_FR_S04_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_BCM_FR_S06_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_BCM_FR_S07_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_BCM_FR_S12_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_BCM_FR_S14_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_BCM_FR_S15_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_EPB_FR_P00_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_EPB_FR_P01_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_FICM_FR_P02_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_FICM_FR_P08_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_FR_P00_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_FR_P01_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_FR_P02_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_FR_P04_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_FR_P08_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_FR_P09_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_FR_P10_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_FR_P12_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_FR_P13_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_FR_S00_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P00_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P02_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_IPK_FR_P06_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_IPK_FR_P10_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_PDC_FR_P00_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_PMDC_FR_P02_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_PMDC_FR_P03_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_SAS_FR_P00_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_SCS_FR_P00_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_SCS_FR_P01_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_SCS_FR_P02_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_SCS_FR_P03_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_SCS_FR_P08_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_SCS_FR_P09_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_SCS_FR_P11_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_SCS_FR_P12_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_SCS_FR_P13_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_SCS_FR_P15_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_SCS_FR_P16_IS_EXTENDED (0)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_IS_EXTENDED (0)
#define CANVEHICLE_HCU_HSC1_FR_P00_IS_EXTENDED (0)
#define CANVEHICLE_HCU_HSC1_FR_P01_IS_EXTENDED (0)
#define CANVEHICLE_HCU_HSC1_FR_P07_IS_EXTENDED (0)
#define CANVEHICLE_HCU_HSC1_FR_P08_IS_EXTENDED (0)
#define CANVEHICLE_HCU_HSC1_FR_P10_IS_EXTENDED (0)
#define CANVEHICLE_HCU_HSC1_FR_P11_IS_EXTENDED (0)
#define CANVEHICLE_HCU_HSC1_FR_P13_IS_EXTENDED (0)
#define CANVEHICLE_HCU_HSC1_TCM_FR_P03_IS_EXTENDED (0)
#define CANVEHICLE_HVDCDC_HSC1_FR_P01_IS_EXTENDED (0)
#define CANVEHICLE_HVDCDC_HSC1_FR_P02_IS_EXTENDED (0)
#define CANVEHICLE_HVDCDC_HSC1_FR_P03_IS_EXTENDED (0)
#define CANVEHICLE_ISC_HSC1_FR_P03_IS_EXTENDED (0)
#define CANVEHICLE_ISC_HSC1_FR_S01_IS_EXTENDED (0)
#define CANVEHICLE_ISC_HSC1_FR_S02_IS_EXTENDED (0)
#define CANVEHICLE_ISC_HSC1_FR_S03_IS_EXTENDED (0)
#define CANVEHICLE_SCU_HSC1_FR_P00_IS_EXTENDED (0)
#define CANVEHICLE_SDM_HSC1_FR_P00_IS_EXTENDED (0)
#define CANVEHICLE_SDM_HSC1_FR_S00_IS_EXTENDED (0)
#define CANVEHICLE_SDM_HSC1_FR_S01_IS_EXTENDED (0)
#define CANVEHICLE_SDM_HSC1_FR_S02_IS_EXTENDED (0)
#define CANVEHICLE_SDM_HSC1_FR_S03_IS_EXTENDED (0)
#define CANVEHICLE_TCM_HSC1_FR_P07_IS_EXTENDED (0)
#define CANVEHICLE_TCM_HSC1_FR_P09_IS_EXTENDED (0)
#define CANVEHICLE_TC_HSC1_FR_P01_IS_EXTENDED (0)
#define CANVEHICLE_TC_HSC1_FR_S01_IS_EXTENDED (0)
#define CANVEHICLE_TC_HSC1_FR_S02_IS_EXTENDED (0)
#define CANVEHICLE_TC_HSC1_FR_S03_IS_EXTENDED (0)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_IS_EXTENDED (0)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_IS_EXTENDED (0)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_IS_EXTENDED (0)
#define CANVEHICLE_VCU_HSC1_TCM_FR_P01_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define CANVEHICLE_BMS_HSC1_FR_P02_CYCLE_TIME_MS (50u)
#define CANVEHICLE_BMS_HSC1_FR_P07_CYCLE_TIME_MS (50u)
#define CANVEHICLE_BMS_HSC1_FR_P11_CYCLE_TIME_MS (100u)
#define CANVEHICLE_BMS_HSC1_FR_P12_CYCLE_TIME_MS (100u)
#define CANVEHICLE_BMS_HSC1_FR_P13_CYCLE_TIME_MS (100u)
#define CANVEHICLE_BMS_HSC1_FR_P14_CYCLE_TIME_MS (100u)
#define CANVEHICLE_BMS_HSC1_FR_P15_CYCLE_TIME_MS (100u)
#define CANVEHICLE_BMS_HSC1_FR_P16_CYCLE_TIME_MS (100u)
#define CANVEHICLE_DIAG_ACL_REQ_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_ACL_RESP_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_DTC_INFO_BMS_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_DTC_INFO_HCU_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_DTC_INFO_HVDCDC_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_DTC_INFO_ISC_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_DTC_INFO_SAC_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_DTC_INFO_SCU_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_DTC_INFO_SDM_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_DTC_INFO_TC_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_FUNC_REQ_HSC1_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_PHYS_REQ_BMS_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_PHYS_REQ_HCU_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_PHYS_REQ_HVDCDC_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_PHYS_REQ_ISC_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_PHYS_REQ_SAC_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_PHYS_REQ_SCU_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_PHYS_REQ_SDM_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_PHYS_REQ_TC_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_PHYS_RESP_BMS_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_PHYS_RESP_HCU_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_PHYS_RESP_HVDCDC_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_PHYS_RESP_ISC_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_PHYS_RESP_SAC_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_PHYS_RESP_SCU_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_PHYS_RESP_SDM_CYCLE_TIME_MS (0u)
#define CANVEHICLE_DIAG_PHYS_RESP_TC_CYCLE_TIME_MS (0u)
#define CANVEHICLE_ECM_HSC1_FR_P00_CYCLE_TIME_MS (10u)
#define CANVEHICLE_ECM_HSC1_FR_P01_CYCLE_TIME_MS (10u)
#define CANVEHICLE_ECM_HSC1_FR_P03_CYCLE_TIME_MS (25u)
#define CANVEHICLE_ECM_HSC1_FR_P07_CYCLE_TIME_MS (25u)
#define CANVEHICLE_ECM_HSC1_FR_P09_CYCLE_TIME_MS (50u)
#define CANVEHICLE_ECM_HSC1_FR_P10_CYCLE_TIME_MS (100u)
#define CANVEHICLE_ECM_HSC1_FR_P12_CYCLE_TIME_MS (100u)
#define CANVEHICLE_ECM_HSC1_FR_P14_CYCLE_TIME_MS (500u)
#define CANVEHICLE_GW_HSC1_AC_FR_P01_CYCLE_TIME_MS (100u)
#define CANVEHICLE_GW_HSC1_AC_FR_P02_CYCLE_TIME_MS (100u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_CYCLE_TIME_MS (100u)
#define CANVEHICLE_GW_HSC1_AC_FR_P04_CYCLE_TIME_MS (100u)
#define CANVEHICLE_GW_HSC1_AC_FR_P05_CYCLE_TIME_MS (100u)
#define CANVEHICLE_GW_HSC1_AC_FR_P06_CYCLE_TIME_MS (100u)
#define CANVEHICLE_GW_HSC1_AC_FR_P07_CYCLE_TIME_MS (50u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_CYCLE_TIME_MS (50u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P06_CYCLE_TIME_MS (50u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P07_CYCLE_TIME_MS (20u)
#define CANVEHICLE_GW_HSC1_BCM_FR_S02_CYCLE_TIME_MS (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_S04_CYCLE_TIME_MS (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_S06_CYCLE_TIME_MS (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_S07_CYCLE_TIME_MS (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_S12_CYCLE_TIME_MS (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_S14_CYCLE_TIME_MS (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_S15_CYCLE_TIME_MS (0u)
#define CANVEHICLE_GW_HSC1_EPB_FR_P00_CYCLE_TIME_MS (20u)
#define CANVEHICLE_GW_HSC1_EPB_FR_P01_CYCLE_TIME_MS (20u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P02_CYCLE_TIME_MS (100u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P08_CYCLE_TIME_MS (10u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_CYCLE_TIME_MS (100u)
#define CANVEHICLE_GW_HSC1_FR_P00_CYCLE_TIME_MS (20u)
#define CANVEHICLE_GW_HSC1_FR_P01_CYCLE_TIME_MS (20u)
#define CANVEHICLE_GW_HSC1_FR_P02_CYCLE_TIME_MS (10u)
#define CANVEHICLE_GW_HSC1_FR_P04_CYCLE_TIME_MS (30u)
#define CANVEHICLE_GW_HSC1_FR_P08_CYCLE_TIME_MS (1000u)
#define CANVEHICLE_GW_HSC1_FR_P09_CYCLE_TIME_MS (100u)
#define CANVEHICLE_GW_HSC1_FR_P10_CYCLE_TIME_MS (250u)
#define CANVEHICLE_GW_HSC1_FR_P12_CYCLE_TIME_MS (50u)
#define CANVEHICLE_GW_HSC1_FR_P13_CYCLE_TIME_MS (20u)
#define CANVEHICLE_GW_HSC1_FR_S00_CYCLE_TIME_MS (0u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P00_CYCLE_TIME_MS (10u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_CYCLE_TIME_MS (10u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P02_CYCLE_TIME_MS (10u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P06_CYCLE_TIME_MS (200u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P10_CYCLE_TIME_MS (100u)
#define CANVEHICLE_GW_HSC1_PDC_FR_P00_CYCLE_TIME_MS (50u)
#define CANVEHICLE_GW_HSC1_PMDC_FR_P02_CYCLE_TIME_MS (100u)
#define CANVEHICLE_GW_HSC1_PMDC_FR_P03_CYCLE_TIME_MS (1000u)
#define CANVEHICLE_GW_HSC1_SAS_FR_P00_CYCLE_TIME_MS (10u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P00_CYCLE_TIME_MS (10u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P01_CYCLE_TIME_MS (10u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P02_CYCLE_TIME_MS (20u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P03_CYCLE_TIME_MS (10u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_CYCLE_TIME_MS (20u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P08_CYCLE_TIME_MS (50u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P09_CYCLE_TIME_MS (50u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P11_CYCLE_TIME_MS (50u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P12_CYCLE_TIME_MS (50u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P13_CYCLE_TIME_MS (100u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P15_CYCLE_TIME_MS (100u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P16_CYCLE_TIME_MS (20u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_CYCLE_TIME_MS (100u)
#define CANVEHICLE_HCU_HSC1_FR_P00_CYCLE_TIME_MS (10u)
#define CANVEHICLE_HCU_HSC1_FR_P01_CYCLE_TIME_MS (20u)
#define CANVEHICLE_HCU_HSC1_FR_P07_CYCLE_TIME_MS (100u)
#define CANVEHICLE_HCU_HSC1_FR_P08_CYCLE_TIME_MS (10u)
#define CANVEHICLE_HCU_HSC1_FR_P10_CYCLE_TIME_MS (100u)
#define CANVEHICLE_HCU_HSC1_FR_P11_CYCLE_TIME_MS (100u)
#define CANVEHICLE_HCU_HSC1_FR_P13_CYCLE_TIME_MS (10u)
#define CANVEHICLE_HCU_HSC1_TCM_FR_P03_CYCLE_TIME_MS (20u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P01_CYCLE_TIME_MS (100u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P02_CYCLE_TIME_MS (100u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P03_CYCLE_TIME_MS (100u)
#define CANVEHICLE_ISC_HSC1_FR_P03_CYCLE_TIME_MS (10u)
#define CANVEHICLE_ISC_HSC1_FR_S01_CYCLE_TIME_MS (0u)
#define CANVEHICLE_ISC_HSC1_FR_S02_CYCLE_TIME_MS (0u)
#define CANVEHICLE_ISC_HSC1_FR_S03_CYCLE_TIME_MS (0u)
#define CANVEHICLE_SCU_HSC1_FR_P00_CYCLE_TIME_MS (10u)
#define CANVEHICLE_SDM_HSC1_FR_P00_CYCLE_TIME_MS (20u)
#define CANVEHICLE_SDM_HSC1_FR_S00_CYCLE_TIME_MS (0u)
#define CANVEHICLE_SDM_HSC1_FR_S01_CYCLE_TIME_MS (0u)
#define CANVEHICLE_SDM_HSC1_FR_S02_CYCLE_TIME_MS (0u)
#define CANVEHICLE_SDM_HSC1_FR_S03_CYCLE_TIME_MS (0u)
#define CANVEHICLE_TCM_HSC1_FR_P07_CYCLE_TIME_MS (50u)
#define CANVEHICLE_TCM_HSC1_FR_P09_CYCLE_TIME_MS (500u)
#define CANVEHICLE_TC_HSC1_FR_P01_CYCLE_TIME_MS (10u)
#define CANVEHICLE_TC_HSC1_FR_S01_CYCLE_TIME_MS (0u)
#define CANVEHICLE_TC_HSC1_FR_S02_CYCLE_TIME_MS (0u)
#define CANVEHICLE_TC_HSC1_FR_S03_CYCLE_TIME_MS (0u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_CYCLE_TIME_MS (20u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_CYCLE_TIME_MS (100u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_CYCLE_TIME_MS (10u)
#define CANVEHICLE_VCU_HSC1_TCM_FR_P01_CYCLE_TIME_MS (10u)

/* Signal choices. */
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_POWER__UP_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_DRIVE__READY_CHOICE (1u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_DRIVE__PRE_CHARGING_CHOICE (2u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_DRIVE__MODE_CHOICE (3u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_ON_BOARD__CHARGE__READY_CHOICE (4u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_OFF_BOARD__CHARGE__READY_CHOICE (5u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_ON_BOARD__CHARGING__MODE_CHOICE (6u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_OFF_BOARD__CHARGING__MODE_CHOICE (7u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_OFFLINE__BALANCE_CHOICE (8u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_OFF_BOARD__CHARGING__DONE_CHOICE (9u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_ON_BOARD__CHARGING__DONE_CHOICE (10u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_ON_BOARD__PRE_CHARGING_CHOICE (12u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_COLLISION__MODE_CHOICE (13u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_BALANCING_CHOICE (14u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_FAULT_CHOICE (15u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_OFF_BOARD__PRE_CHARGING_CHOICE (16u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_WIRELESS__CHARGE__READY_CHOICE (17u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_WIRELESS__CHARGING__MODE_CHOICE (18u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_WIRELESS__CHARGING__DONE_CHOICE (19u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_BSC_STA_H1_HSC1_WIRELESS__PRE_CHARGING_CHOICE (20u)

#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_MAIN_RELAY_STS_H1_HSC1_ALL__OPEN_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_MAIN_RELAY_STS_H1_HSC1_ALL__CLOSED_CHOICE (1u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_MAIN_RELAY_STS_H1_HSC1_PARTLY__CLOSED_CHOICE (2u)
#define CANVEHICLE_BMS_HSC1_FR_P02_BMS_MAIN_RELAY_STS_H1_HSC1_FAILURE_CHOICE (3u)

#define CANVEHICLE_BMS_HSC1_FR_P07_BMS_CHRG_STS_IO_H1_HSC1_LAMP__ON_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P07_BMS_CHRG_STS_IO_H1_HSC1_LAMP__OFF_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P07_BMS_CHRGR_PLUG_CNCTN_IO_H1_HSC1_LAMP__ON_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P07_BMS_CHRGR_PLUG_CNCTN_IO_H1_HSC1_LAMP__OFF_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_CELL_MAX_TEM_H1_HSC1_DEG_C__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_CLNT_TEM_HSC1_DEG_C__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_CELL_MAX_TEM_V_H1_HSC1_VALID_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_CELL_MAX_TEM_V_H1_HSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_CLNT_TEM_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_CLNT_TEM_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_ONBD_CHRGR_PLUG_ON_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_ONBD_CHRGR_PLUG_ON_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_BALC_RMNDNG_REQ_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_BALC_RMNDNG_REQ_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_FLT_IND_REQ_HSC1_NO__INDICATION_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_FLT_IND_REQ_HSC1_CONTINUOUS__INDICATION_CHOICE (1u)
#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_FLT_IND_REQ_HSC1_FLASHING___HERTZ__INDICATION_CHOICE (2u)

#define CANVEHICLE_BMS_HSC1_FR_P11_HV_BAT_SHUT_OFF_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P11_HV_BAT_SHUT_OFF_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_ONBD_CHRGR_CLNT_PUMP_PWM_REQ_HSC1____0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_CELL_MIN_TEM_V_H1_HSC1_VALID_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_CELL_MIN_TEM_V_H1_HSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_CHLR_OFF_REQ_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_CHLR_OFF_REQ_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_CLNT_PUMP_STS_HSC1_OFF_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_CLNT_PUMP_STS_HSC1_ON_CHOICE (1u)
#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_CLNT_PUMP_STS_HSC1_FAILED__LOW_CHOICE (2u)
#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_CLNT_PUMP_STS_HSC1_FAILED__HIGH_CHOICE (3u)

#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_OFBD_CHRGR_PLUG_ON_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_OFBD_CHRGR_PLUG_ON_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P11_CHRGR_SYS_KEEP_AWK_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P11_CHRGR_SYS_KEEP_AWK_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P11_BMS_CELL_MIN_TEM_H1_HSC1_DEG_C__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P11_VEH_ELEC_RNG_H1_HSC1_KM__0X0___0X7_FF__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P12_HV_BAT_ELEC_ENRG_AVG_RATE_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P12_HV_BAT_ELEC_ENRG_AVG_RATE_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P12_BMS_AVLBL_ENRG_V_H1_HSC1_VALID_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P12_BMS_AVLBL_ENRG_V_H1_HSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P12_ELEC_ENRG_AVG_RST_PERFD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P12_ELEC_ENRG_AVG_RST_PERFD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P12_HV_BAT_ELEC_ENRG_AVG_RATE_H1_HSC1_KWH_100KM__0X0___0X3_FF__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P12_BMS_AVLBL_ENRG_H1_HSC1_KWH__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P13_BMS_PACK_SOC_DSP_H1_HSC1____0X0___0X3_FF__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P13_BMS_PACK_VOL_V_H1_HSC1_VALID_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P13_BMS_PACK_VOL_V_H1_HSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P13_BMS_PACK_SOC_DSP_V_H1_HSC1_VALID_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P13_BMS_PACK_SOC_DSP_V_H1_HSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P13_BMS_PACK_CRNT_V_H1_HSC1_VALID_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P13_BMS_PACK_CRNT_V_H1_HSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P13_BMS_PACK_VOL_H1_HSC1_V__0X0___0X_FFF__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P13_BMS_PACK_CRNT_H1_HSC1_A__0X0___0X_FFFF__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P14_BMS_RESER_DURTN_TIME_DSP_CMD_H1_HSC1___0X0___0X28__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P14_BMS_RESER_ST_HOUR_DSP_CMD_H1_HSC1___0X0___0X17__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P14_BMS_CHRG_STS_H1_HSC1_NONE_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P14_BMS_CHRG_STS_H1_HSC1_CHARGING_CHOICE (1u)
#define CANVEHICLE_BMS_HSC1_FR_P14_BMS_CHRG_STS_H1_HSC1_CHARGE__DONE_CHOICE (2u)
#define CANVEHICLE_BMS_HSC1_FR_P14_BMS_CHRG_STS_H1_HSC1_BALANCING_CHOICE (3u)
#define CANVEHICLE_BMS_HSC1_FR_P14_BMS_CHRG_STS_H1_HSC1_CHARGE__FAULT_CHOICE (4u)
#define CANVEHICLE_BMS_HSC1_FR_P14_BMS_CHRG_STS_H1_HSC1_RESERVED_CHOICE (5u)

#define CANVEHICLE_BMS_HSC1_FR_P14_BMS_RESER_ST_TIME_DSP_CMD_HSC1___0X0___0X7_FF__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P14_BMS_CHRG_CTRL_DSP_CMD_HSC1_NO__REQUEST_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P14_BMS_CHRG_CTRL_DSP_CMD_HSC1_START__CHARGE_CHOICE (1u)
#define CANVEHICLE_BMS_HSC1_FR_P14_BMS_CHRG_CTRL_DSP_CMD_HSC1_STOP__CHARGE_CHOICE (2u)
#define CANVEHICLE_BMS_HSC1_FR_P14_BMS_CHRG_CTRL_DSP_CMD_HSC1_RESERVED_CHOICE (3u)

#define CANVEHICLE_BMS_HSC1_FR_P14_BMS_RESER_CTRL_DSP_CMD_HSC1_NO__REQUEST_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P14_BMS_RESER_CTRL_DSP_CMD_HSC1_RESERVATION__SWITCH__ON_CHOICE (1u)
#define CANVEHICLE_BMS_HSC1_FR_P14_BMS_RESER_CTRL_DSP_CMD_HSC1_RESERVATION__SWITCH__OFF_CHOICE (2u)
#define CANVEHICLE_BMS_HSC1_FR_P14_BMS_RESER_CTRL_DSP_CMD_HSC1_RESERVED_CHOICE (3u)

#define CANVEHICLE_BMS_HSC1_FR_P15_BMS_RESER_CHRG_MD_DSP_CMD_H1_HSC1_UNAVAILABLE_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P15_BMS_RESER_CHRG_MD_DSP_CMD_H1_HSC1_TIME__BASED__MODE_CHOICE (1u)
#define CANVEHICLE_BMS_HSC1_FR_P15_BMS_RESER_CHRG_MD_DSP_CMD_H1_HSC1_ENERGY__BASED__MODE_CHOICE (2u)
#define CANVEHICLE_BMS_HSC1_FR_P15_BMS_RESER_CHRG_MD_DSP_CMD_H1_HSC1_RANGE__BASED__MODE_CHOICE (3u)
#define CANVEHICLE_BMS_HSC1_FR_P15_BMS_RESER_CHRG_MD_DSP_CMD_H1_HSC1_SOC__BASED__MODE_CHOICE (4u)

#define CANVEHICLE_BMS_HSC1_FR_P15_BMS_RESER_CHRG_RNG_DSP_CMD_H1_HSC1___0X0___0X3_FF__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P15_BMS_RESER_CHRG_ENRG_DSP_CMD_H1_HSC1___0X0___0X3_F__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P15_BMS_RESER_TRGT_SOC_DSP_CMD_H1_HSC1___0X0___0X3_FF__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P15_BMS_RESER_MAX_CRNT_DSP_CMD_H1_HSC1___0X0___0X20__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P16_BMS_WRLS_CHRGNG_RESP_H1_HSC1_NONE_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P16_BMS_WRLS_CHRGNG_RESP_H1_HSC1_WIRELESS_CHARGING_SWITCH_ON_BY_FICM_CHOICE (1u)
#define CANVEHICLE_BMS_HSC1_FR_P16_BMS_WRLS_CHRGNG_RESP_H1_HSC1_WIRELESS_CHARGING_SWITCH_ON_BY_T_BOX_CHOICE (2u)
#define CANVEHICLE_BMS_HSC1_FR_P16_BMS_WRLS_CHRGNG_RESP_H1_HSC1_WIRELESS_CHARGING_SWITCH_OFF_CHOICE (4u)

#define CANVEHICLE_BMS_HSC1_FR_P16_BMS_CHRGNG_RMNNG_ST_TIME_H1_HSC1_MINUTE__0X0___0X7_FF__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P16_CHRGNG_RMNNG_TIME_H1_HSC1_MIN__0X0___0X3_FF__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P16_BMS_WRLS_CHRGN_FLT_REASON_H1_HSC1_INIT_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P16_BMS_WRLS_CHRGN_FLT_REASON_H1_HSC1_WLC_SYSTEM_READY_CHOICE (1u)
#define CANVEHICLE_BMS_HSC1_FR_P16_BMS_WRLS_CHRGN_FLT_REASON_H1_HSC1_WLC_VEHICLE_SIDE_FAULT_CHOICE (2u)
#define CANVEHICLE_BMS_HSC1_FR_P16_BMS_WRLS_CHRGN_FLT_REASON_H1_HSC1_WLC_GROUND_SIDE_FAULT_CHOICE (4u)
#define CANVEHICLE_BMS_HSC1_FR_P16_BMS_WRLS_CHRGN_FLT_REASON_H1_HSC1_WLC_WALL_SIDE_FAULT_CHOICE (8u)
#define CANVEHICLE_BMS_HSC1_FR_P16_BMS_WRLS_CHRGN_FLT_REASON_H1_HSC1_WLC_PRIMARY_SIDE_FAULT_CHOICE (9u)
#define CANVEHICLE_BMS_HSC1_FR_P16_BMS_WRLS_CHRGN_FLT_REASON_H1_HSC1_WLC_SYSTEM_FAULT_CHOICE (17u)
#define CANVEHICLE_BMS_HSC1_FR_P16_BMS_WRLS_CHRGN_FLT_REASON_H1_HSC1_DOOR_NOT_LOCKED_CHOICE (18u)
#define CANVEHICLE_BMS_HSC1_FR_P16_BMS_WRLS_CHRGN_FLT_REASON_H1_HSC1_WIRELESS_CHARGING_FAULT_CHOICE (19u)

#define CANVEHICLE_BMS_HSC1_FR_P16_ELEC_CSUMP_PER_KM_HSC1_KWH_100KM__0X0___0X3_FF__CHOICE (0u)

#define CANVEHICLE_BMS_HSC1_FR_P16_ELEC_CSUMP_PER_KM_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P16_ELEC_CSUMP_PER_KM_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P16_CHRGNG_RMNNG_TIME_V_H1_HSC1_VALID_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P16_CHRGNG_RMNNG_TIME_V_H1_HSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P16_CRNT_AVG_ELEC_CSUMP_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_BMS_HSC1_FR_P16_CRNT_AVG_ELEC_CSUMP_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_BMS_HSC1_FR_P16_CRNT_AVG_ELEC_CSUMP_HSC1_KWH_100KM__0X0___0X3_FF__CHOICE (0u)

#define CANVEHICLE_ECM_HSC1_FR_P00_EN_RUN_AHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_ECM_HSC1_FR_P00_EN_RUN_AHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_ECM_HSC1_FR_P00_EN_SPD_STS_HSC1_NORMAL__OPERATION_CHOICE (0u)
#define CANVEHICLE_ECM_HSC1_FR_P00_EN_SPD_STS_HSC1_DEGRADED__OPERATION_CHOICE (1u)
#define CANVEHICLE_ECM_HSC1_FR_P00_EN_SPD_STS_HSC1_INVALID_CHOICE (3u)

#define CANVEHICLE_ECM_HSC1_FR_P00_EN_SPD_HSC1_RPM__0X0___0X_FFFF__CHOICE (0u)

#define CANVEHICLE_ECM_HSC1_FR_P00_ACCEL_ACTU_POS_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_ECM_HSC1_FR_P00_ACCEL_ACTU_POS_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_ECM_HSC1_FR_P00_CCAHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_ECM_HSC1_FR_P00_CCAHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_ECM_HSC1_FR_P00_ACCEL_ACTU_POS_HSC1____0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_ECM_HSC1_FR_P00_PT_BRK_PDL_DSCRT_INPT_STS_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_ECM_HSC1_FR_P00_PT_BRK_PDL_DSCRT_INPT_STS_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_ECM_HSC1_FR_P00_PT_BRK_PDL_DSCRT_INPT_STS_HSC1_BRAKE__NOT__APPLIED_CHOICE (0u)
#define CANVEHICLE_ECM_HSC1_FR_P00_PT_BRK_PDL_DSCRT_INPT_STS_HSC1_BRAKE__APPLIED_CHOICE (1u)

#define CANVEHICLE_ECM_HSC1_FR_P00_EN12_VOLT_STR_MOT_CMDD_ON_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_ECM_HSC1_FR_P00_EN12_VOLT_STR_MOT_CMDD_ON_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_ECM_HSC1_FR_P00_EN_CTRLR_RUN_CRK_TRML_STS_HSC1_INACTIVE_CHOICE (0u)
#define CANVEHICLE_ECM_HSC1_FR_P00_EN_CTRLR_RUN_CRK_TRML_STS_HSC1_ACTIVE_CHOICE (1u)

#define CANVEHICLE_ECM_HSC1_FR_P01_ACCEL_EFCTV_POS_HSC1____0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_ECM_HSC1_FR_P03_EN_TOQ_ACTU_EXTD_RNG_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_ECM_HSC1_FR_P03_EN_TOQ_ACTU_EXTD_RNG_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_ECM_HSC1_FR_P03_EN_TOQ_ACTU_EXTD_RNG_HSC1_NM__0X0___0X_FFF__CHOICE (0u)

#define CANVEHICLE_ECM_HSC1_FR_P07_EN_ASS_STA_HSC1_ENGINE__OFF_CHOICE (0u)
#define CANVEHICLE_ECM_HSC1_FR_P07_EN_ASS_STA_HSC1_ENGINE__RUNNING_CHOICE (1u)
#define CANVEHICLE_ECM_HSC1_FR_P07_EN_ASS_STA_HSC1_ENGINE__STARTING_CHOICE (2u)
#define CANVEHICLE_ECM_HSC1_FR_P07_EN_ASS_STA_HSC1_ENGINE__STOPPING_CHOICE (3u)

#define CANVEHICLE_ECM_HSC1_FR_P09_EN_TOQ_MAX_EXTD_RNG_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_ECM_HSC1_FR_P09_EN_TOQ_MAX_EXTD_RNG_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_ECM_HSC1_FR_P09_EN_TOQ_MAX_EXTD_RNG_HSC1_NM__0X0___0X_FFF__CHOICE (0u)

#define CANVEHICLE_ECM_HSC1_FR_P09_EN_TOQ_MIN_EXTD_RNG_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_ECM_HSC1_FR_P09_EN_TOQ_MIN_EXTD_RNG_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_ECM_HSC1_FR_P09_EN_TOQ_MIN_EXTD_RNG_HSC1_NM__0X0___0X_FFF__CHOICE (0u)

#define CANVEHICLE_ECM_HSC1_FR_P10_CC_FLT_PRST_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_ECM_HSC1_FR_P10_CC_FLT_PRST_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_ECM_HSC1_FR_P14_EN_CLNT_TEM_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_ECM_HSC1_FR_P14_EN_CLNT_TEM_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_ECM_HSC1_FR_P14_EN_CLNT_TEM_HSC1_DEG_C__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_AC_FR_P01_AC_ON_OFF_DSP_CMD_HSC1_OFF_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_AC_FR_P01_AC_ON_OFF_DSP_CMD_HSC1_ON_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_AC_FR_P01_DFST_ON_DSP_CMD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_AC_FR_P01_DFST_ON_DSP_CMD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_AC_FR_P02_AC_AMBT_TEM_HSC1_DEG_C__0X0___0X_FD__CHOICE (0u)
#define CANVEHICLE_GW_HSC1_AC_FR_P02_AC_AMBT_TEM_HSC1_INIT_CHOICE (254u)
#define CANVEHICLE_GW_HSC1_AC_FR_P02_AC_AMBT_TEM_HSC1_FAILURE_CHOICE (255u)

#define CANVEHICLE_GW_HSC1_AC_FR_P02_AC_EVAPO_TEM_HSC1_____0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_AC_FR_P02_AC_AMBT_TEM_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_AC_FR_P02_AC_AMBT_TEM_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COOLNG_FAN_PWM_REQ_HSC1____0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COMPR_REQ_HSC1_DISENGAGE_IMMEDIATELY_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COMPR_REQ_HSC1_DISENGAGE_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COMPR_REQ_HSC1_ENGAGE_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COMPR_REQ_HSC1_RESERVED_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COOLNG_FAN_LVL_REQ_HSC1_OFF_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COOLNG_FAN_LVL_REQ_HSC1_1__LEVEL_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COOLNG_FAN_LVL_REQ_HSC1_2__LEVEL_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COOLNG_FAN_LVL_REQ_HSC1_3__LEVEL_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COOLNG_FAN_LVL_REQ_HSC1_4__LEVEL_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COOLNG_FAN_LVL_REQ_HSC1_5__LEVEL_CHOICE (5u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COOLNG_FAN_LVL_REQ_HSC1_6__LEVEL_CHOICE (6u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COOLNG_FAN_LVL_REQ_HSC1_7__LEVEL_CHOICE (7u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COOLNG_FAN_LVL_REQ_HSC1_8__LEVEL_CHOICE (8u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COOLNG_FAN_LVL_REQ_HSC1_9__LEVEL_CHOICE (9u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COOLNG_FAN_LVL_REQ_HSC1_10__LEVEL_CHOICE (10u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COOLNG_FAN_LVL_REQ_HSC1_11__LEVEL_CHOICE (11u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COOLNG_FAN_LVL_REQ_HSC1_12__LEVEL_CHOICE (12u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COOLNG_FAN_LVL_REQ_HSC1_13__LEVEL_CHOICE (13u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COOLNG_FAN_LVL_REQ_HSC1_14__LEVEL_CHOICE (14u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_COOLNG_FAN_LVL_REQ_HSC1_15__LEVEL_CHOICE (15u)

#define CANVEHICLE_GW_HSC1_AC_FR_P03_HV_BAT_COOLNG_SYS_ENBD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_HV_BAT_COOLNG_SYS_ENBD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_HI_SIDE_FLUD_PRS_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_HI_SIDE_FLUD_PRS_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_AC_FR_P03_AC_HI_SIDE_FLUD_PRS_HSC1_K_PA_G__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_AC_FR_P04_OTS_AIR_TMP_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_AC_FR_P04_OTS_AIR_TMP_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_AC_FR_P04_OTS_AIR_TMP_HSC1_DEG_C__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_AC_FR_P05_EAC_VOL_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_AC_FR_P05_EAC_VOL_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_AC_FR_P05_ESSPWM_CLNT_PUMP_STS_HSC1_NOMARL__OFF_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_AC_FR_P05_ESSPWM_CLNT_PUMP_STS_HSC1_NORMAL__ON_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_AC_FR_P05_ESSPWM_CLNT_PUMP_STS_HSC1_PUMP_PERMANENT_ON_DUE_TO_SOME_KIND_OF_FAILURE_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_AC_FR_P05_ESSPWM_CLNT_PUMP_STS_HSC1_PUMP_FAILURE_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_AC_FR_P05_AC_COMPR_ACTU_PWR_HSC1_K_W__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_AC_FR_P05_AC_COMPR_ACTU_HVHSC1___0X0___0X_FFD__CHOICE (0u)
#define CANVEHICLE_GW_HSC1_AC_FR_P05_AC_COMPR_ACTU_HVHSC1_INIT_CHOICE (4094u)
#define CANVEHICLE_GW_HSC1_AC_FR_P05_AC_COMPR_ACTU_HVHSC1_ERROR_CHOICE (4095u)

#define CANVEHICLE_GW_HSC1_AC_FR_P05_EAC_VOL_HSC1___0X0___0X_FFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_AC_FR_P06_AC_HTR_PWR_HSC1_K_W__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_AC_FR_P06_AC_PWR_HSC1___0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_AC_FR_P07_HEAT_PUMP_MD_HSC1_STOP_NO_REQUEST__CHOICE (0u)
#define CANVEHICLE_GW_HSC1_AC_FR_P07_HEAT_PUMP_MD_HSC1_HEATING_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_AC_FR_P07_HEAT_PUMP_MD_HSC1_DEHUMIDIFICATION__HEATING_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_AC_FR_P07_HEAT_PUMP_MD_HSC1_DEHUMIDIFICATION_COOLING_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_AC_FR_P07_HEAT_PUMP_MD_HSC1_COOLING_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_AC_FR_P07_HEAT_PUMP_MD_HSC1_DEFROST_CHOICE (5u)
#define CANVEHICLE_GW_HSC1_AC_FR_P07_HEAT_PUMP_MD_HSC1_ONLY__BATTERY__COOLING_MODE_CHOICE (6u)
#define CANVEHICLE_GW_HSC1_AC_FR_P07_HEAT_PUMP_MD_HSC1_BATTERY__COOLING_AND__CABIN__COOLING_CHOICE (7u)
#define CANVEHICLE_GW_HSC1_AC_FR_P07_HEAT_PUMP_MD_HSC1_CABIN_COOLING_AND_BATTERY_COOLING_CHOICE (8u)
#define CANVEHICLE_GW_HSC1_AC_FR_P07_HEAT_PUMP_MD_HSC1_REMOTE__AIR__CONDITION__MODE_CHOICE (9u)
#define CANVEHICLE_GW_HSC1_AC_FR_P07_HEAT_PUMP_MD_HSC1_RESERVED_CHOICE (10u)
#define CANVEHICLE_GW_HSC1_AC_FR_P07_HEAT_PUMP_MD_HSC1_WAIT_CHOICE (11u)
#define CANVEHICLE_GW_HSC1_AC_FR_P07_HEAT_PUMP_MD_HSC1_H_PINITIALIZE_CHOICE (12u)
#define CANVEHICLE_GW_HSC1_AC_FR_P07_HEAT_PUMP_MD_HSC1_SELF_DIAGNOSIS_CHOICE (13u)
#define CANVEHICLE_GW_HSC1_AC_FR_P07_HEAT_PUMP_MD_HSC1_SLEEP_CHOICE (14u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P04_RR_DOOR_OPEN_STS_HSC1_REAR__RIGHT__DOOR__CLOSED_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_RR_DOOR_OPEN_STS_HSC1_REAR__RIGHT__DOOR__OPEN_LATCH_SWITCH_CANN_T_DETECT_DOOR_AJAR_STATUS_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_RR_DOOR_OPEN_STS_HSC1_REAR__RIGHT__DOOR__AJAR_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_RR_DOOR_OPEN_STS_HSC1_REAR__RIGHT__DOOR__FULL__OPEN_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P04_DRVR_DOOR_OPEN_STS_HSC1_DRIVER__DOOR__CLOSED_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_DRVR_DOOR_OPEN_STS_HSC1_DRIVER__DOOR__OPEN__FOR_LATCH_SWITCH_CAN_T_DETECT_DOOR_AJAR_STATUS__CHOICE (1u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_DRVR_DOOR_OPEN_STS_HSC1_DRIVER__DOOR__AJAR_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_DRVR_DOOR_OPEN_STS_HSC1_DRIVER__DOOR__FULL__OPEN_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P04_MAIN_BEAM_LGHT_ON_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_MAIN_BEAM_LGHT_ON_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P04_DIPD_BEAM_LGHT_ON_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_DIPD_BEAM_LGHT_ON_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P04_L_DIRCN_IOHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_L_DIRCN_IOHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P04_R_DIRCN_IOHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_R_DIRCN_IOHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P04_RR_FOG_LGHT_ON_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_RR_FOG_LGHT_ON_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P04_AIRBAG_WRNNG_IND_FHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_AIRBAG_WRNNG_IND_FHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P04_VEH_LCKNG_STA_HSC1_UNLOCKED_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_VEH_LCKNG_STA_HSC1_SIGNAL__POSITION__ENTRY__UNLOCKED_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_VEH_LCKNG_STA_HSC1_INTERIOR__LOCKED_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_VEH_LCKNG_STA_HSC1_EXTERIOR__LOCKED_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_VEH_LCKNG_STA_HSC1_SUPER_LOCKED_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_VEH_LCKNG_STA_HSC1_RESERVED_5_CHOICE (5u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_VEH_LCKNG_STA_HSC1_RESERVED_6_CHOICE (6u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_VEH_LCKNG_STA_HSC1_UNKNOW_CHOICE (7u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P04_BNT_OPEN_STS_HSC1_BONNET__CLOSED_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_BNT_OPEN_STS_HSC1_BONNET__OPEN_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_BNT_OPEN_STS_HSC1_BONNET__SWITCH__DISCONNECT_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_BNT_OPEN_STS_HSC1_RESERVED_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P04_VEH_INERTIA_SW_TRIGD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_VEH_INERTIA_SW_TRIGD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P04_DSP_MEAS_SYS_HSC1_KPH_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_DSP_MEAS_SYS_HSC1_MPH_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P04_FRT_PSNG_DOOR_OPEN_STS_HSC1_FRONT__PASSENGER__DOOR__CLOSED_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_FRT_PSNG_DOOR_OPEN_STS_HSC1_FRONT__PASSENGER__OPEN_LATCH_SWITCH_CANN__T_DETECT_DOOR_AJAR_STATU_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_FRT_PSNG_DOOR_OPEN_STS_HSC1_FRONT__PASSENGER__DOOR__AJAR_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_FRT_PSNG_DOOR_OPEN_STS_HSC1_FRONT__PASSENGER__DOOR__FULL__OPEN_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P04_RL_DOOR_OPEN_STS_HSC1_REAR__LEFT__DOOR__CLOSED_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_RL_DOOR_OPEN_STS_HSC1_REAR__LEFT__DOOR__OPEN_LATCH_SWITCH_CANN_T_DETECT_DOOR_AJAR_STATUS_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_RL_DOOR_OPEN_STS_HSC1_REAR__LEFT__DOOR__AJAR_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_RL_DOOR_OPEN_STS_HSC1_REAR__LEFT__DOOR__FULL__OPEN_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P04_VEH_SIDE_LGHT_STS_HSC1_NO_SIDE_LIGHT_ON__CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_VEH_SIDE_LGHT_STS_HSC1_LEFT_SIDE_LIGHT_ON_ONLY_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_VEH_SIDE_LGHT_STS_HSC1_RIGHT_SIDE_LIGHT_ON_ONLY_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P04_VEH_SIDE_LGHT_STS_HSC1_ALL_SIDE_LIGHT_AND_LICENSE_PLATE_LIGHT_ON_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P06_RVS_STS_HSC1_INACTIVE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P06_RVS_STS_HSC1_ACTIVE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P06_RVS_REQ_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P06_RVS_REQ_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P06_RVS_REQ_AHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P06_RVS_REQ_AHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P07_SYS_BPM_ENBD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P07_SYS_BPM_ENBD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_BCM_FR_P07_SYS_BPMHSC1_OFF_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P07_SYS_BPMHSC1_ACC_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P07_SYS_BPMHSC1_RUN_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_BCM_FR_P07_SYS_BPMHSC1_CRANK__REQUEST_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_BCM_FR_S12_PF_TO_TC_IMMO_RESP_HSC1___0X0___0X_FFFFFFFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_BCM_FR_S15_PF_TO_ISC_IMMO_RESP_HSC1___0X0___0X_FFFFFFFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_EPB_FR_P00_EPB_SW_STS_HSC1_NOT_ACTIVE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_EPB_FR_P00_EPB_SW_STS_HSC1_RELEASE_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_EPB_FR_P00_EPB_SW_STS_HSC1_APPLY_CHOICE (2u)

#define CANVEHICLE_GW_HSC1_EPB_FR_P00_EPB_SW_STS_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_EPB_FR_P00_EPB_SW_STS_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_EPB_FR_P00_EPBCC_CANCL_REQD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_EPB_FR_P00_EPBCC_CANCL_REQD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_EPB_FR_P01_EPB_APPCN_STS_HSC1_UNKNOWN_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_EPB_FR_P01_EPB_APPCN_STS_HSC1_PARK__BRAKE__APPLIED_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_EPB_FR_P01_EPB_APPCN_STS_HSC1_PARK__BRAKE__RELEASED_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_EPB_FR_P01_EPB_APPCN_STS_HSC1_PARK__BRAKE__APPLICATION_IN__PROGRESS_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_EPB_FR_P01_EPB_APPCN_STS_PVHSC1___0X0___0X3__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P02_RSTR_FCTRY_DEFTS_REQ_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P02_RSTR_FCTRY_DEFTS_REQ_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P08_SPD_AST_MD_FICMVHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P08_SPD_AST_MD_FICMVHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P08_ANCPT_ROAD_SPD_NAV_HSC1___0X0___0X7_FFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P08_TRGT_SPD_REQ_NAV_HSC1___0X0___0X7_FFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P08_SPD_AST_MD_FICMHSC1_OFF_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P08_SPD_AST_MD_FICMHSC1_SLIF_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P08_SPD_AST_MD_FICMHSC1_MSA_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P08_SPD_AST_MD_FICMHSC1_ISA_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P08_DIST_TO_TRGT_NAV_HSC1_M__0X0___0X3_F__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P08_SPD_AST_REQ_STS_NAV_HSC1_FAULT_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P08_SPD_AST_REQ_STS_NAV_HSC1_UNDEFINED_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P08_SPD_AST_REQ_STS_NAV_HSC1_ACTIVE_CHOICE (2u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_CHRG_CTRL_REQ_HSC1_NO__REQUEST_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_CHRG_CTRL_REQ_HSC1_START__CHARGE_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_CHRG_CTRL_REQ_HSC1_STOP__CHARGE_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_CHRG_CTRL_REQ_HSC1_RESERVED_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_CHRG_MD_REQ_HSC1_NO__REQUEST_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_CHRG_MD_REQ_HSC1_TIME__BASED__MODE_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_CHRG_MD_REQ_HSC1_ENERGY__BASED__MODE_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_CHRG_MD_REQ_HSC1_RANGE__BASED__MODE_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_CHRG_MD_REQ_HSC1_SOC__BASED__MODE_CHOICE (4u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_ST_TIME_HSC1___0X0___0X7_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_DURTN_TIME_HSC1___0X0___0X28__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_CHRG_RNG_HSC1___0X0___0X3_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_MAX_CRNT_HSC1___0X0___0X20__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_TRGT_SOCHSC1___0X0___0X3_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_CHRG_ENRG_HSC1___0X0___0X3_F__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_CTRL_REQ_HSC1_NO__REQUEST_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_CTRL_REQ_HSC1_RESERVATION__SWITCH__ON_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_CTRL_REQ_HSC1_RESERVATION__SWITCH__OFF_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_CTRL_REQ_HSC1_RESERVED_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_WRLS_CHRGNG_REQ_HSC1_NO__REQUEST_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_WRLS_CHRGNG_REQ_HSC1_WIRELESS_CHARGING_SWITCH_ON_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_WRLS_CHRGNG_REQ_HSC1_WIRELESS_CHARGING_SWITCH_OFF_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_WRLS_CHRGNG_REQ_HSC1_RESERVED_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_TGT_SOCVHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_TGT_SOCVHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_CHRG_RNG_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_CHRG_RNG_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_CHRG_ENRG_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_CHRG_ENRG_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_DURTN_TIME_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_DURTN_TIME_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_MAX_CRNT_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_MAX_CRNT_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_ST_TIME_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FICM_FR_P14_FICM_RESER_ST_TIME_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_ECM_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_ECM_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_TCM_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_TCM_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_SDM_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_SDM_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_SCS_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_SCS_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_SCU_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_SCU_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_TCCM_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_TCCM_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_EPS_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_EPS_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_EPB_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_EPB_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_SAS_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_SAS_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_DHL_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_DHL_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_HCU_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_HCU_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_FVCM_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_FVCM_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_MSM_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_MSM_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_PLCM_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_PLCM_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_TC_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_TC_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_ISC_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_ISC_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_BMS_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_BMS_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_BCM_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_BCM_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_IPC_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_IPC_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_AC_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_AC_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_PEPS_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_PEPS_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_PMDC_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_PMDC_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_TBOX_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_TBOX_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_FICM_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_FICM_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_ESCL_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_ESCL_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_PACM_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_PACM_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_TPMS_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_TPMS_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_RDA_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_RDA_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_HVDCDC_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_HVDCDC_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_APA_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_APA_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_SAVM_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_SAVM_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P00_EHBS_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P00_EHBS_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P01_SYS_VOL_MD_V_H1_HSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P01_SYS_VOL_MD_V_H1_HSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P01_SYS_OPNL_MD_H1_HSC1_NORMAL__MODE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P01_SYS_OPNL_MD_H1_HSC1_MANUFACTURING__MODE_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FR_P01_SYS_OPNL_MD_H1_HSC1_TRANSIT__MODE_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_FR_P01_SYS_OPNL_MD_H1_HSC1_SHOW__ROOM__RESERVE__CHOICE (3u)
#define CANVEHICLE_GW_HSC1_FR_P01_SYS_OPNL_MD_H1_HSC1_STORAGE__MODE_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_FR_P01_SYS_OPNL_MD_H1_HSC1_DIAGNOSIC_OR__REPROGRAMMING__RESERVE__CHOICE (5u)

#define CANVEHICLE_GW_HSC1_FR_P01_PWR_MD_MSTR_RUN_CRK_A_H1_HSC1_INACTIVE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P01_PWR_MD_MSTR_RUN_CRK_A_H1_HSC1_ACTIVE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P01_PWR_MD_MSTR_ACCRY_A_H1_HSC1_INACTIVE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P01_PWR_MD_MSTR_ACCRY_A_H1_HSC1_ACTIVE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P01_SYS_PWR_MD_H1_HSC1_OFF_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P01_SYS_PWR_MD_H1_HSC1_ACCESSORY_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FR_P01_SYS_PWR_MD_H1_HSC1_RUN_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_FR_P01_SYS_PWR_MD_H1_HSC1_CRANK__REQUEST_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_FR_P01_BPM_MSTR_AVLBLY_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P01_BPM_MSTR_AVLBLY_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P01_SYS_PWR_MD_V_H1_HSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P01_SYS_PWR_MD_V_H1_HSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P01_SYS_VOL_V_H1_HSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P01_SYS_VOL_V_H1_HSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P01_SYS_VOL_H1_HSC1_V__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FR_P01_SYS_VOL_MD_H1_HSC1_NORMAL_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P01_SYS_VOL_MD_H1_HSC1_LOW__SYSTEM__VOLTAGE_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FR_P01_SYS_VOL_MD_H1_HSC1_HIGH__SYSTEM__VOLTAGE_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_FR_P01_SYS_VOL_MD_H1_HSC1_ILLEGAL__SYSTEM___VOLTAGE_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_FR_P02_BRK_PDL_POS_H1_HSC1____0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FR_P02_BRK_PDL_POS_V_H1_HSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P02_BRK_PDL_POS_V_H1_HSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P02_SCURT_KEY_INVD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P02_SCURT_KEY_INVD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_CANCL_SW_A_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_CANCL_SW_A_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_ON_SW_A_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_ON_SW_A_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_RSM_SW_A_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_RSM_SW_A_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_SET_SW_A_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_SET_SW_A_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_SPD_INC_SW_A_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_SPD_INC_SW_A_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_SPD_DEC_SW_A_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_SPD_DEC_SW_A_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_SW_DATA_INTGTY_H1_HSC1_DATA__VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_SW_DATA_INTGTY_H1_HSC1_DATA__INVALID_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_SW_DATA_INTGTY_H1_HSC1_FAILURE__DETECTED_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_SW_DATA_INTGTY_H1_HSC1_ILLEGAL__RANGE_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_PV_H1_HSC1___0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_DIST_INC_SW_A_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_DIST_INC_SW_A_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_DIST_DEC_SW_A_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_DIST_DEC_SW_A_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P04_CC_SW_STS_ALV_RC_H1_HSC1___0X0___0X3__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FR_P04_NRCDSCU_REQ_ALV_RCHSC1___0X0___0X_F__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FR_P04_NRCD_SHIFTER_POS_REQD_HSC1_SCU_INITIALIZATION_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P04_NRCD_SHIFTER_POS_REQD_HSC1_S__SPORT_MODE__CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FR_P04_NRCD_SHIFTER_POS_REQD_HSC1_W__WINTER_MODE__CHOICE (2u)
#define CANVEHICLE_GW_HSC1_FR_P04_NRCD_SHIFTER_POS_REQD_HSC1_M__MANUAL_MODE__CHOICE (3u)
#define CANVEHICLE_GW_HSC1_FR_P04_NRCD_SHIFTER_POS_REQD_HSC1_D___DRIVE__CHOICE (5u)
#define CANVEHICLE_GW_HSC1_FR_P04_NRCD_SHIFTER_POS_REQD_HSC1_N___NEUTRAL__CHOICE (6u)
#define CANVEHICLE_GW_HSC1_FR_P04_NRCD_SHIFTER_POS_REQD_HSC1_R___REVERSE__CHOICE (7u)
#define CANVEHICLE_GW_HSC1_FR_P04_NRCD_SHIFTER_POS_REQD_HSC1_P___PARK__CHOICE (8u)
#define CANVEHICLE_GW_HSC1_FR_P04_NRCD_SHIFTER_POS_REQD_HSC1_RESERVED_CHOICE (9u)
#define CANVEHICLE_GW_HSC1_FR_P04_NRCD_SHIFTER_POS_REQD_HSC1_ERROR_CHOICE (10u)

#define CANVEHICLE_GW_HSC1_FR_P04_NRCD_TOQ_REQ_STS_HSC1_NO__REQUEST_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P04_NRCD_TOQ_REQ_STS_HSC1_REQUEST_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P04_NRCD_CRP_SPD_REQ_STS_HSC1_NO__REQUEST_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P04_NRCD_CRP_SPD_REQ_STS_HSC1_REQUEST_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P04_NRCD_CRP_SPD_REQ_VAL_HSC1_KM_H__0X0___0X3_F__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FR_P04_NRCDVCU_REQ_ALV_RCHSC1___0X0___0X_F__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FR_P04_NRCD_TOQ_REQ_VAL_HSC1_NM__0X0___0X_FFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FR_P08_VEH_ODO_H1_HSC1___0X0___0X_FFFFFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FR_P08_VEH_ODO_V_H1_HSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P08_VEH_ODO_V_H1_HSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P09_SDM_CAL_PRIY_KEY_HSC1___0X0___0X_FFFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FR_P09_DCDC_VOL_STPT_H1_HSC1_V__0X0___0X_FD__CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P09_DCDC_VOL_STPT_H1_HSC1_INIT_CHOICE (254u)
#define CANVEHICLE_GW_HSC1_FR_P09_DCDC_VOL_STPT_H1_HSC1_INVALID_CHOICE (255u)

#define CANVEHICLE_GW_HSC1_FR_P09_VEH_DRVNG_MD_H1_HSC1_NO__DRIVING__MODE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P09_VEH_DRVNG_MD_H1_HSC1_SUPER_ECO_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FR_P09_VEH_DRVNG_MD_H1_HSC1_ECO_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_FR_P09_VEH_DRVNG_MD_H1_HSC1_NORMAL_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_FR_P09_VEH_DRVNG_MD_H1_HSC1_SPORT_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_FR_P09_VEH_DRVNG_MD_H1_HSC1_SUPER__SPORT_CHOICE (5u)
#define CANVEHICLE_GW_HSC1_FR_P09_VEH_DRVNG_MD_H1_HSC1_RESERVED_CHOICE (6u)
#define CANVEHICLE_GW_HSC1_FR_P09_VEH_DRVNG_MD_H1_HSC1_CUSTOMIZATION__MODE_CHOICE (7u)

#define CANVEHICLE_GW_HSC1_FR_P10_OTSD_AIR_TEM_CR_VAL_MSK_H1_HSC1_DON_T__USE__DATA_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P10_OTSD_AIR_TEM_CR_VAL_MSK_H1_HSC1_USE__DATA_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P10_OTSD_AIR_TEM_CR_VAL_V_H1_HSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P10_OTSD_AIR_TEM_CR_VAL_V_H1_HSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_FR_P10_OTSD_AIR_TEM_CR_VAL_H1_HSC1_DEG_C__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FR_P12_DIM_LGHT_LVL_HSC1____0X0___0X_FA__CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P12_DIM_LGHT_LVL_HSC1_RESERVED_251_CHOICE (251u)
#define CANVEHICLE_GW_HSC1_FR_P12_DIM_LGHT_LVL_HSC1_RESERVED_252_CHOICE (252u)
#define CANVEHICLE_GW_HSC1_FR_P12_DIM_LGHT_LVL_HSC1_RESERVED_253_CHOICE (253u)
#define CANVEHICLE_GW_HSC1_FR_P12_DIM_LGHT_LVL_HSC1_RESERVED_254_CHOICE (254u)
#define CANVEHICLE_GW_HSC1_FR_P12_DIM_LGHT_LVL_HSC1_RESERVED_255_CHOICE (255u)

#define CANVEHICLE_GW_HSC1_FR_P13_NRCD_ACC_REQ_VAL_H1_HSC1___0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FR_P13_NRCD_STS_H1_HSC1_INACTIVE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FR_P13_NRCD_STS_H1_HSC1_NRCD__ACTIVE_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FR_P13_NRCD_STS_H1_HSC1_SEMIAUTOMATIC__PARKING__ASSISTANT__ACTIVE_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_FR_P13_NRCD_STS_H1_HSC1_FULLY_APA__ACTIVE_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_FR_S00_NRCD_MSTR_CHLG_H1_HSC1___0X0___0X_FFFFFFFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FVCM_FR_P00_ACC_TOQ_REQ_STS_HSC1_NO_REQUEST_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P00_ACC_TOQ_REQ_STS_HSC1_TORQUE_REQUEST_REQUEST_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P00_ACC_TOQ_REQ_STS_HSC1_RESERVED_2_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P00_ACC_TOQ_REQ_STS_HSC1_RESERVED_3_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_FVCM_FR_P00_ACC_TOQ_REQ_VAL_HSC1_NM__0X0___0X_FFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FVCM_FR_P00_ACC_TOQ_REQ_VAL_PVHSC1___0X0___0X_FFFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FVCM_FR_P00_ACCAEB_DCL_REQ_STS_HSC1_NO__REQUEST_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P00_ACCAEB_DCL_REQ_STS_HSC1_ACC__DECELERATION__REQUEST_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P00_ACCAEB_DCL_REQ_STS_HSC1_AEB__DECELERATION__REQUEST_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P00_ACCAEB_DCL_REQ_STS_HSC1_RESERVED_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_FVCM_FR_P00_ACC_ALV_RCHSC1___0X0___0X_F__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_AEB_SYS_STS_HSC1_OFF_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_AEB_SYS_STS_HSC1_STANDBY_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_AEB_SYS_STS_HSC1_DISABLE_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_AEB_SYS_STS_HSC1_OVERRIDE_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_AEB_SYS_STS_HSC1_ACTIVE_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_AEB_SYS_STS_HSC1_RESERVED_5_CHOICE (5u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_AEB_SYS_STS_HSC1_RESERVED_6_CHOICE (6u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_AEB_SYS_STS_HSC1_RESERVED_7_CHOICE (7u)

#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_AEB_SYS_FLT_STS_HSC1_NO__ERROR_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_AEB_SYS_FLT_STS_HSC1_PERFORMANCE__DEGRADATION_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_AEB_SYS_FLT_STS_HSC1_SYSTEM__TEMPORARY__UNVAILABLE_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_AEB_SYS_FLT_STS_HSC1_SERVICE__REQUIRED_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_AEB_SYS_FLT_STS_HSC1_RESERVED_4_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_AEB_SYS_FLT_STS_HSC1_RESERVED_5_CHOICE (5u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_AEB_SYS_FLT_STS_HSC1_RESERVED_6_CHOICE (6u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_AEB_SYS_FLT_STS_HSC1_RESERVED_7_CHOICE (7u)

#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_ACC_SYS_STS_HSC1_OFF_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_ACC_SYS_STS_HSC1_STAND__BY_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_ACC_SYS_STS_HSC1_ACTIVE_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_ACC_SYS_STS_HSC1_OVERRIDE_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_ACC_SYS_STS_HSC1_BRAKE__ONLY_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_ACC_SYS_STS_HSC1_RESERVED_5_CHOICE (5u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_ACC_SYS_STS_HSC1_RESERVED_6_CHOICE (6u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_ACC_SYS_STS_HSC1_RESERVED_7_CHOICE (7u)

#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_ACC_SYS_FLT_STS_HSC1_NO__ERROR_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_ACC_SYS_FLT_STS_HSC1_PERFORMANCE__DEGRADATION_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_ACC_SYS_FLT_STS_HSC1_SYSTEM__TEMPORARY__UNVAILABLE_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_ACC_SYS_FLT_STS_HSC1_SERVICE__REQUIRED_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_ACC_SYS_FLT_STS_HSC1_RESERVED_4_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_ACC_SYS_FLT_STS_HSC1_RESERVED_5_CHOICE (5u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_ACC_SYS_FLT_STS_HSC1_RESERVED_6_CHOICE (6u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P01_ACC_SYS_FLT_STS_HSC1_RESERVED_7_CHOICE (7u)

#define CANVEHICLE_GW_HSC1_FVCM_FR_P02_DIST_SINCE_TRGT_CAMR_HSC1_M__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_FVCM_FR_P02_SPD_AST_REQ_STS_CAMR_HSC1_FAULT_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P02_SPD_AST_REQ_STS_CAMR_HSC1_UNDEFINED_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_FVCM_FR_P02_SPD_AST_REQ_STS_CAMR_HSC1_ACTIVE_CHOICE (2u)

#define CANVEHICLE_GW_HSC1_FVCM_FR_P02_TRGT_SPD_REQ_CAMR_HSC1___0X0___0X7_FFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_IPK_FR_P06_CALENDAR_YEAR_HSC1_YEAR__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_IPK_FR_P06_CALENDAR_MONTH_HSC1_UNKNOWN_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P06_CALENDAR_MONTH_HSC1_JANUARY_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P06_CALENDAR_MONTH_HSC1_FEBRUARY_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P06_CALENDAR_MONTH_HSC1_MARCH_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P06_CALENDAR_MONTH_HSC1_APRIL_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P06_CALENDAR_MONTH_HSC1_MAY_CHOICE (5u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P06_CALENDAR_MONTH_HSC1_JUNE_CHOICE (6u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P06_CALENDAR_MONTH_HSC1_JULY_CHOICE (7u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P06_CALENDAR_MONTH_HSC1_AUGUST_CHOICE (8u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P06_CALENDAR_MONTH_HSC1_SEPTEMBER_CHOICE (9u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P06_CALENDAR_MONTH_HSC1_OCTOBER_CHOICE (10u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P06_CALENDAR_MONTH_HSC1_NOVEMBER_CHOICE (11u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P06_CALENDAR_MONTH_HSC1_DECEMBER_CHOICE (12u)

#define CANVEHICLE_GW_HSC1_IPK_FR_P06_CALENDAR_DAY_HSC1_DAYS__0X0___0X1_F__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_IPK_FR_P06_HOUR_OF_DAY_HSC1___0X0___0X17__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_IPK_FR_P06_MINUTE_OF_HOUR_HSC1___0X0___0X3_B__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_IPK_FR_P06_TIME_DSP_FMT_HSC1_12_HOUR_MODE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P06_TIME_DSP_FMT_HSC1_24_HOUR_MODE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_IPK_FR_P06_SECS_OF_MINUTE_HSC1___0X0___0X3_B__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_IPK_FR_P10_ELEC_ENRG_AVG_RST_REQ_HSC1_NO__REQUEST_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P10_ELEC_ENRG_AVG_RST_REQ_HSC1_RESET_FOR__TOTAL__ELEC__CONSUMP_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P10_ELEC_ENRG_AVG_RST_REQ_HSC1_RESET_FOR__CURRENT__ELEC__CONSUMP_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_IPK_FR_P10_ELEC_ENRG_AVG_RST_REQ_HSC1_RESERVED_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_PDC_FR_P00_FRT_OBS_DIST_HSC1_CM__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_PDC_FR_P00_RR_OBS_DIST_HSC1___0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_PMDC_FR_P02_EMGC_CALL_TRIGD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_PMDC_FR_P02_EMGC_CALL_TRIGD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_PMDC_FR_P02_TELMCS_SRVC_STS_HSC1_DISABLE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_PMDC_FR_P02_TELMCS_SRVC_STS_HSC1_ENABLE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_PMDC_FR_P03_VEH_LD_SHED_LVL_H1_HSC1_NO__POWER__RISK_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_PMDC_FR_P03_VEH_LD_SHED_LVL_H1_HSC1_LOW__POWER__RISK_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_PMDC_FR_P03_VEH_LD_SHED_LVL_H1_HSC1_MIDDLE__POWER__RISK_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_PMDC_FR_P03_VEH_LD_SHED_LVL_H1_HSC1_HIGH__POWER__RISK_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_PMDC_FR_P03_VEH_LD_SHED_LVL_H1_HSC1_POWER_MANAGEMENT_DIRECT_CURRENT_CONVERTER_PMDC__BROKEN_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_PMDC_FR_P03_VEH_LD_SHED_LVL_H1_HSC1_RESERVED_5_CHOICE (5u)
#define CANVEHICLE_GW_HSC1_PMDC_FR_P03_VEH_LD_SHED_LVL_H1_HSC1_RESERVED_6_CHOICE (6u)
#define CANVEHICLE_GW_HSC1_PMDC_FR_P03_VEH_LD_SHED_LVL_H1_HSC1_RESERVED_7_CHOICE (7u)

#define CANVEHICLE_GW_HSC1_SAS_FR_P00_STRG_WHL_ANG_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SAS_FR_P00_STRG_WHL_ANG_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SAS_FR_P00_STRG_WHL_ANG_SNSR_CAL_STS_HSC1_UNKNOWN_0_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SAS_FR_P00_STRG_WHL_ANG_SNSR_CAL_STS_HSC1_ESTIMATED_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_SAS_FR_P00_STRG_WHL_ANG_SNSR_CAL_STS_HSC1_CALIBRATED_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_SAS_FR_P00_STRG_WHL_ANG_SNSR_CAL_STS_HSC1_UNKNOWN_3_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_SAS_FR_P00_STRG_WHL_ANG_SNSR_INID_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SAS_FR_P00_STRG_WHL_ANG_SNSR_INID_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SAS_FR_P00_STRG_WHL_ANG_SNSR_MULT_CAPB_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SAS_FR_P00_STRG_WHL_ANG_SNSR_MULT_CAPB_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SAS_FR_P00_STRG_WHL_ANG_SNSR_FLT_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SAS_FR_P00_STRG_WHL_ANG_SNSR_FLT_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SAS_FR_P00_STRG_WHL_ANG_HSC1_DEGREE__0X0___0X_FFFE__CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SAS_FR_P00_STRG_WHL_ANG_HSC1_ERROR_MARK_CHOICE (65535u)

#define CANVEHICLE_GW_HSC1_SAS_FR_P00_STRG_WHL_ANG_ALV_RCHSC1___0X0___0X_F__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SAS_FR_P00_STRG_WHL_ANG_GRD_HSC1_DEGREE_S__0X0___0X_FFE__CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SAS_FR_P00_STRG_WHL_ANG_GRD_HSC1_ERROR_MARK_CHOICE (4095u)

#define CANVEHICLE_GW_HSC1_SAS_FR_P00_STRG_WHL_ANG_EXTD_PVHSC1___0X0___0X_FFFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SAS_FR_P00_STRG_WHL_ANG_SNSR_CHKSM_HSC1___0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P00_L_DRVN_WHL_ROTL_DIST_TRCHSC1___0X0___0X3__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P00_L_DRVN_WHL_ROTL_SEQ_NUM_HSC1___0X0___0X3__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P00_L_DRVN_WHL_ROTL_RST_OCD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P00_L_DRVN_WHL_ROTL_RST_OCD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P00_L_DRVN_WHL_ROTL_DIST_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P00_L_DRVN_WHL_ROTL_DIST_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P00_L_DRVN_WHL_ROTL_DIST_PLS_CTR_HSC1___0X0___0X3_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P00_L_DRVN_WHL_ROTL_DIST_TMSP_HSC1___0X0___0X_FFFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P00_R_DRVN_WHL_ROTL_DIST_TRCHSC1___0X0___0X3__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P00_R_DRVN_WHL_ROTL_SEQ_NUM_HSC1___0X0___0X3__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P00_R_DRVN_WHL_ROTL_RST_OCD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P00_R_DRVN_WHL_ROTL_RST_OCD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P00_R_DRVN_WHL_ROTL_DIST_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P00_R_DRVN_WHL_ROTL_DIST_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P00_R_DRVN_WHL_ROTL_DIST_PLS_CTR_HSC1___0X0___0X3_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P00_R_DRVN_WHL_ROTL_DIST_TMSP_HSC1___0X0___0X_FFFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P01_L_NON_DRVN_WHL_ROTL_DIST_TRCHSC1___0X0___0X3__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P01_L_NON_DRVN_WHL_ROTL_SEQ_NUM_HSC1___0X0___0X3__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P01_L_NON_DRVN_WHL_ROTL_RST_OCD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P01_L_NON_DRVN_WHL_ROTL_RST_OCD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P01_L_NON_DRVN_WHL_ROTL_DIST_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P01_L_NON_DRVN_WHL_ROTL_DIST_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P01_L_NON_DRVN_WHL_ROTL_DIST_PCHSC1___0X0___0X3_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P01_L_NON_DRVN_WHL_ROTL_DIST_THSC1___0X0___0X_FFFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P01_R_NON_DRVN_WHL_ROTL_DIST_TRCHSC1___0X0___0X3__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P01_R_NON_DRVN_WHL_ROTL_SEQ_NUM_HSC1___0X0___0X3__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P01_R_NON_DRVN_WHL_ROTL_RST_OCD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P01_R_NON_DRVN_WHL_ROTL_RST_OCD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P01_R_NON_DRVN_WHL_ROTL_DIST_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P01_R_NON_DRVN_WHL_ROTL_DIST_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P01_R_NON_DRVN_WHL_ROTL_DIST_PCHSC1___0X0___0X3_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P01_R_NON_DRVN_WHL_ROTL_DIST_THSC1___0X0___0X_FFFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P02_VSE_LAT_ACC_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P02_VSE_LAT_ACC_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P02_VSE_LONGT_ACC_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P02_VSE_LONGT_ACC_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P02_VSE_LONGT_ACC_HSC1_M_S_2__0X_FFFFFE00___0X1_FF__CHOICE (-512)

#define CANVEHICLE_GW_HSC1_SCS_FR_P02_VSE_LAT_ACC_HSC1_M_S_2__0X_FFFFF800___0X7_FF__CHOICE (-2048)

#define CANVEHICLE_GW_HSC1_SCS_FR_P03_AUTO_HOLD_SYS_STS_HSC1_OFF_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P03_AUTO_HOLD_SYS_STS_HSC1_INTERVENTION_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P03_AUTO_HOLD_SYS_STS_HSC1_STANDBY_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P03_AUTO_HOLD_SYS_STS_HSC1_ERROR_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P03_CH_SYS_EN_TOQ_INTRVN_TYP_ERRHSC1_NO__INTERVENTION_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P03_CH_SYS_EN_TOQ_INTRVN_TYP_ERRHSC1_REDUCE__TORQUE_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P03_CH_SYS_EN_TOQ_INTRVN_TYP_ERRHSC1_INCREASE__TORQUE_CHOICE (2u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P03_CH_SYS_EN_TOQ_VAL_EXTD_RNG_RHSC1_NM__0X0___0X_FFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P03_TRC_CTRL_ALV_RCHSC1___0X0___0X3__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P03_CH_SYS_EN_TOQ_REQ_PROTN_HSC1___0X0___0X3_FFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P03_R_NON_DRVN_WHL_ROTL_DIRCN_HSC1_NO_MOVING_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P03_R_NON_DRVN_WHL_ROTL_DIRCN_HSC1_MOVING_FORWARD_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P03_R_NON_DRVN_WHL_ROTL_DIRCN_HSC1_MOVING_BACKWARD_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P03_R_NON_DRVN_WHL_ROTL_DIRCN_HSC1_ERROR__INVALID_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P03_L_NON_DRVN_WHL_ROTL_DIRCN_HSC1_NO_MOVING_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P03_L_NON_DRVN_WHL_ROTL_DIRCN_HSC1_MOVING_FORWARD_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P03_L_NON_DRVN_WHL_ROTL_DIRCN_HSC1_MOVING_BACKWARD_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P03_L_NON_DRVN_WHL_ROTL_DIRCN_HSC1_ERROR__INVALID_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P03_SCSNRCD_ALV_RCHSC1___0X0___0X_F__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P03_SCS_DCL_AHSC1_INACTIVE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P03_SCS_DCL_AHSC1_ACTIVE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P05_BRK_SYS_TR_GEAR_REQ_TYP_HSC1_NO__ACTION_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_BRK_SYS_TR_GEAR_REQ_TYP_HSC1_MAX__GEAR__REQUEST_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_BRK_SYS_TR_GEAR_REQ_TYP_HSC1_MIN__GEAR__REQUEST_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_BRK_SYS_TR_GEAR_REQ_TYP_HSC1_HOLD__GEAR_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P05_BRK_SYS_TR_GEAR_REQ_GEAR_HSC1_NO__ACTION_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_BRK_SYS_TR_GEAR_REQ_GEAR_HSC1_FIRST__GEAR_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_BRK_SYS_TR_GEAR_REQ_GEAR_HSC1_SECOND__GEAR_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_BRK_SYS_TR_GEAR_REQ_GEAR_HSC1_THIRD__GEAR_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_BRK_SYS_TR_GEAR_REQ_GEAR_HSC1_FOURTH__GEAR_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_BRK_SYS_TR_GEAR_REQ_GEAR_HSC1_FIFTH__GEAR_CHOICE (5u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_BRK_SYS_TR_GEAR_REQ_GEAR_HSC1_SIXTH__GEAR_CHOICE (6u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_BRK_SYS_TR_GEAR_REQ_GEAR_HSC1_SEVENTH__GEAR_CHOICE (7u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_BRK_SYS_TR_GEAR_REQ_GEAR_HSC1_EIGHTH__GEAR_CHOICE (8u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P05_ABSAHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_ABSAHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P05_ABSFHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_ABSFHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P05_TCSAHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_TCSAHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P05_TCS_ENBD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_TCS_ENBD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P05_VSE_SYS_AHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_VSE_SYS_AHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P05_VEH_DYN_YAW_RATE_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P05_VEH_DYN_YAW_RATE_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P05_VEH_DYN_YAW_RATE_HSC1_DEG_S__0X_FFFFF800___0X7_FF__CHOICE (-2048)

#define CANVEHICLE_GW_HSC1_SCS_FR_P08_LONGD_ACC_SNSR_VAL_HSC1_G__0X_FFFF8000___0X7_FFF__CHOICE (-32768)

#define CANVEHICLE_GW_HSC1_SCS_FR_P08_LATD_ACC_SNSR_VAL_HSC1_G__0X_FFFF8000___0X7_FFF__CHOICE (-32768)

#define CANVEHICLE_GW_HSC1_SCS_FR_P08_LONGD_LATD_ACC_SNSR_VAL_ARCHSC1___0X0___0X3__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P09_BRK_FLUD_LVL_LOW_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P09_BRK_FLUD_LVL_LOW_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P09_BRK_FLUD_LVL_LOW_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P09_BRK_FLUD_LVL_LOW_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P09_BRK_PDL_DRVR_APPD_PRS_ALV_RCHSC1___0X0___0X3__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P09_BRK_PDL_DRVR_APPD_PRS_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P09_BRK_PDL_DRVR_APPD_PRS_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P09_BRK_PDL_DRVR_APPD_PRS_HSC1_K_PA__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P11_WHL_GND_VEL_L_DRVN_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P11_WHL_GND_VEL_L_DRVN_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P11_WHL_GND_VEL_L_DRVN_HSC1_KM_H__0X0___0X3_FFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P11_WHL_GND_VEL_R_DRVN_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P11_WHL_GND_VEL_R_DRVN_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P11_WHL_GND_VEL_R_DRVN_HSC1_KM_H__0X0___0X3_FFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P12_WHL_GND_VEL_L_NON_DRVN_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P12_WHL_GND_VEL_L_NON_DRVN_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P12_WHL_GND_VEL_L_NON_DRVN_HSC1_KM_H__0X0___0X3_FFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P12_WHL_GND_VEL_R_NON_DRVN_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P12_WHL_GND_VEL_R_NON_DRVN_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P12_WHL_GND_VEL_R_NON_DRVN_HSC1_KM_H__0X0___0X3_FFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P13_VSE_STS_HSC1_INACTIVE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P13_VSE_STS_HSC1_ACTIVE_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P13_VSE_STS_HSC1_FAULT_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P13_VSE_STS_HSC1_WARMING__UP_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P13_VSE_STS_HSC1_NOT__READY_CHOICE (4u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P13_VSE_MD_HSC1_OFF_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P13_VSE_MD_HSC1_NORMAL_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P13_VSE_MD_HSC1_COMPETITIVE_CHOICE (2u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P13_ABSIOHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P13_ABSIOHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P13_TCS_OPNG_STS_HSC1_INACTIVE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P13_TCS_OPNG_STS_HSC1_ACTIVE_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P13_TCS_OPNG_STS_HSC1_FAULT_CHOICE (2u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P15_VEH_SPD_AVG_DRVN_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P15_VEH_SPD_AVG_DRVN_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P15_VEH_SPD_AVG_DRVN_HSC1_KM_H__0X0___0X7_FFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P15_DIST_RC_AVG_DRVN_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P15_DIST_RC_AVG_DRVN_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P15_DIST_RC_AVG_DRVN_RST_OCD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P15_DIST_RC_AVG_DRVN_RST_OCD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P15_DIST_RC_AVG_DRVN_HSC1_M__0X0___0X1_FFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P15_VEH_SPD_AVG_NON_DRVN_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P15_VEH_SPD_AVG_NON_DRVN_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P15_VEH_SPD_AVG_NON_DRVN_HSC1_KM_H__0X0___0X7_FFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P16_BRK_SYS_RGTV_TOQ_TRGT_HSC1_NM__0X0___0X_FFFF__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P16_BRK_SYS_RGTV_TOQ_TRGT_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_SCS_FR_P16_BRK_SYS_RGTV_TOQ_TRGT_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P16_BRK_SYS_RGTV_TOQ_TRGT_ALV_RCHSC1___0X0___0X_F__CHOICE (0u)

#define CANVEHICLE_GW_HSC1_SCS_FR_P16_BRK_SYS_RGTV_TOQ_TRGT_PVHSC1___0X1___0X1_FFFF__CHOICE (1u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MKT_H1_HSC1_CHINA_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MKT_H1_HSC1_EUROPE_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MKT_H1_HSC1_EGYPT_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MKT_H1_HSC1_MIDDLE__EAST_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MKT_H1_HSC1_THAILAND_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MKT_H1_HSC1_RUSSIA_CHOICE (5u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MKT_H1_HSC1_OTHERS_CHOICE (6u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MKT_H1_HSC1_RESERVED__0X7___0X1_F__CHOICE (7u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_BODY_CTRLR_TYP_H1_HSC1_BC01_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_BODY_CTRLR_TYP_H1_HSC1_BC02_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_BODY_CTRLR_TYP_H1_HSC1_BC03_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_BODY_CTRLR_TYP_H1_HSC1_RESERVED_3_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_BODY_CTRLR_TYP_H1_HSC1_RESERVED_4_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_BODY_CTRLR_TYP_H1_HSC1_RESERVED_5_CHOICE (5u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_BODY_CTRLR_TYP_H1_HSC1_RESERVED_6_CHOICE (6u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_BODY_CTRLR_TYP_H1_HSC1_RESERVED_7_CHOICE (7u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_DRV_HADL_TYP_H1_HSC1_LEFT__HAND__DRIVE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_DRV_HADL_TYP_H1_HSC1_RIGHT__HAND__DRIVE_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_TPMS_TYP_H1_HSC1_I_TPMS_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_TPMS_TYP_H1_HSC1_TPMS_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_TPMS_TYP_H1_HSC1_NO__EQUIPPED_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_TPMS_TYP_H1_HSC1_RESERVED_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_EN_TYP_H1_HSC1_G13_D__GSL_DOHC_NON_TURBO__CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_EN_TYP_H1_HSC1_G14_DT_SGE_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_EN_TYP_H1_HSC1_G15_DT_SGE_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_EN_TYP_H1_HSC1_G15_DT__GSL_DOHC_TURBO__CHOICE (3u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_EN_TYP_H1_HSC1_G15_D_BASE__GSL_DOHC_NON_TURBO__CHOICE (4u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_EN_TYP_H1_HSC1_G15_D_VCT__GSL_DOHC_NON_TURBO_VCT__CHOICE (5u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_EN_TYP_H1_HSC1_G18_D__GSL_DOHC_NON_TURBO_VCT__CHOICE (6u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_EN_TYP_H1_HSC1_G18_DT_GSL_DOHC_TURBO__CHOICE (7u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_EN_TYP_H1_HSC1_G20_D__GSL_DOHC_4_CYL_MFI__ALUM__CHOICE (8u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_EN_TYP_H1_HSC1_G20_D_GDI_GSL_TURBO__CHOICE (9u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_EN_TYP_H1_HSC1_G24_D_GSL_DOHC_4_CYL_SIDI__VVT__ALUM__CHOICE (10u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_EN_TYP_H1_HSC1_G30_D_GSL_DOHC_6_CYL_SIDI__VVT__ALUM__CHOICE (11u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_EN_TYP_H1_HSC1_D19_DSL_TCI__CHOICE (12u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_EN_TYP_H1_HSC1_RESERVED__0X_D___0X1_F__CHOICE (13u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_EMSN_REGN_H1_HSC1_CN_IV_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_EMSN_REGN_H1_HSC1_CN_V_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_EMSN_REGN_H1_HSC1_BEIJING_V_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_EMSN_REGN_H1_HSC1_CN_V__CHOICE (3u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_EMSN_REGN_H1_HSC1_CN_VI_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_EMSN_REGN_H1_HSC1_EURO_IV_CHOICE (5u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_EMSN_REGN_H1_HSC1_EURO_V_CHOICE (6u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_EMSN_REGN_H1_HSC1_EURO_V__CHOICE (7u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_EMSN_REGN_H1_HSC1_EURO_VI_CHOICE (8u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_TR_TYP_H1_HSC1_DCT_6_SHFT_DCT360_B_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_TR_TYP_H1_HSC1_DCT_7_SHFT_DCT250_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_TR_TYP_H1_HSC1_A_T_4_SHFT_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_TR_TYP_H1_HSC1_A_T_4_SHFT_NEW_AW_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_TR_TYP_H1_HSC1_A_T_5_SHFT_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_TR_TYP_H1_HSC1_A_T_6_SHFT_CHOICE (5u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_TR_TYP_H1_HSC1_A_T_7_SHFT_CHOICE (6u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_TR_TYP_H1_HSC1_M_T_5_SHFT_CHOICE (7u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_TR_TYP_H1_HSC1_M_T_6_SHFT_CHOICE (8u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_TR_TYP_H1_HSC1_RESERVED__0X9___0X_F__CHOICE (9u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_BODY_TYP_H1_HSC1_SEDAN_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_BODY_TYP_H1_HSC1_MPV_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_BODY_TYP_H1_HSC1_HATCHBACK_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_BODY_TYP_H1_HSC1_SUV_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_BODY_TYP_H1_HSC1_CROSS_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_BODY_TYP_H1_HSC1_RESERVED__0X5___0X_F__CHOICE (5u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_PF_H1_HSC1_AS2_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_PF_H1_HSC1_AM_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_PF_H1_HSC1_AP3_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_PF_H1_HSC1_EP2_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_PF_H1_HSC1_IP3_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_PF_H1_HSC1_IS_CHOICE (5u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_PF_H1_HSC1_ZP_CHOICE (6u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_PF_H1_HSC1_ZS_CHOICE (7u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_PF_H1_HSC1_RESERVED__0X8___0X_F__CHOICE (8u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_AC_H1_HSC1_MNL_SINGLE_A_CON_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_AC_H1_HSC1_MNL_DUAL_A_CON_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_AC_H1_HSC1_ETC_SINGLE_A_CON_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_AC_H1_HSC1_ETC_DUAL_A_CON_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_AC_H1_HSC1_AUTO_SINGLE_A_CON_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_AC_H1_HSC1_AUTO_DUAL_A_CON_CHOICE (5u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_AC_H1_HSC1_AUTO_TRIPLE_A_CON_CHOICE (6u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_AC_H1_HSC1_NON_A_CON_CHOICE (7u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_AC_H1_HSC1_RESERVED__0X8___0X_F__CHOICE (8u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_HYB_LVL_H1_HSC1_CONVENTIONAL_ZERO_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_HYB_LVL_H1_HSC1_HYBRID_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_HYB_LVL_H1_HSC1_MICRO__HYBRID_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_HYB_LVL_H1_HSC1_MILD__HYBRID_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_HYB_LVL_H1_HSC1_MEDIUM__HYBRID_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_HYB_LVL_H1_HSC1_FULL__HYBRID_CHOICE (5u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_HYB_LVL_H1_HSC1_PLUG_IN__HYBRID_CHOICE (6u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_HYB_LVL_H1_HSC1_PURE__ELECTRIC_CHOICE (7u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_HYB_LVL_H1_HSC1_RESERVED_8_CHOICE (8u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_HYB_LVL_H1_HSC1_RESERVED_9_CHOICE (9u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_HYB_LVL_H1_HSC1_RESERVED_10_CHOICE (10u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_HYB_LVL_H1_HSC1_RESERVED_11_CHOICE (11u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_HYB_LVL_H1_HSC1_RESERVED_12_CHOICE (12u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_HYB_LVL_H1_HSC1_RESERVED_13_CHOICE (13u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_HYB_LVL_H1_HSC1_RESERVED_14_CHOICE (14u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_HYB_LVL_H1_HSC1_RESERVED_15_CHOICE (15u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_BRAND_H1_HSC1_ROEWE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_BRAND_H1_HSC1_MG_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_BRAND_H1_HSC1_SHANGHAI_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_BRAND_H1_HSC1_RESERVED_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_STRG_TYP_H1_HSC1_EPS_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_STRG_TYP_H1_HSC1_EHPS_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_STRG_TYP_H1_HSC1_HPS_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_STRG_TYP_H1_HSC1_RESERVED_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_TRNSF_CASE_TYP_H1_HSC1_2_WD_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_TRNSF_CASE_TYP_H1_HSC1_P_TIME_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_TRNSF_CASE_TYP_H1_HSC1_TOD_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_TRNSF_CASE_TYP_H1_HSC1_AWD_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_CC_TYP_H1_HSC1_NO__EQUIPPED_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_CC_TYP_H1_HSC1_STANDARD_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_CC_TYP_H1_HSC1_ACC_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_CC_TYP_H1_HSC1_RESERVED_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_PARKNG_BRK_TYP_H1_HSC1_HDL_P_BRAKE_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_PARKNG_BRK_TYP_H1_HSC1_FOOT_P_BRAKE_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_PARKNG_BRK_TYP_H1_HSC1_ELEC_P_BRAKE_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_PARKNG_BRK_TYP_H1_HSC1_RESERVED_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_SLIP_CTRL_TYP_H1_HSC1_ABS_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_SLIP_CTRL_TYP_H1_HSC1_ESP_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_SLIP_CTRL_TYP_H1_HSC1_RESERVED_2_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_SLIP_CTRL_TYP_H1_HSC1_RESERVED_3_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_SP_ST_H1_HSC1_EQUIPPED_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_SP_ST_H1_HSC1_NO__EQUIPPED_CHOICE (1u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_STA_H1_HSC1_RESERVED_0_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_STA_H1_HSC1_CONFIGURED_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_STA_H1_HSC1_RESERVED_2_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_STA_H1_HSC1_RESERVED_3_CHOICE (3u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2000_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2001_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2002_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2003_CHOICE (3u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2004_CHOICE (4u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2005_CHOICE (5u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2006_CHOICE (6u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2007_CHOICE (7u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2008_CHOICE (8u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2009_CHOICE (9u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2010_CHOICE (10u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2011_CHOICE (11u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2012_CHOICE (12u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2013_CHOICE (13u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2014_CHOICE (14u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2015_CHOICE (15u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2016_CHOICE (16u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2017_CHOICE (17u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2018_CHOICE (18u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2019_CHOICE (19u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2020_CHOICE (20u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2021_CHOICE (21u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2022_CHOICE (22u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2023_CHOICE (23u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2024_CHOICE (24u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2025_CHOICE (25u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2026_CHOICE (26u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2027_CHOICE (27u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2028_CHOICE (28u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2029_CHOICE (29u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2030_CHOICE (30u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_INFO_MDL_YEAR_H1_HSC1_2031_CHOICE (31u)

#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_INFTN_TYP_H1_HSC1_GID_TYPE_1_CHOICE (0u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_INFTN_TYP_H1_HSC1_CID_TYPE_2_CHOICE (1u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_INFTN_TYP_H1_HSC1_CID_TYPE_1_CHOICE (2u)
#define CANVEHICLE_GW_HSC1_VEH_CONFIGN_VEH_COFIGN_INFTN_TYP_H1_HSC1_RESERVED_CHOICE (3u)

#define CANVEHICLE_HCU_HSC1_FR_P00_EPT_ACCEL_ACTU_POS_HSC1____0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_HCU_HSC1_FR_P00_EPT_CRK_ABOTD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P00_EPT_CRK_ABOTD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P00_RVSEPT_RDY_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P00_RVSEPT_RDY_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P00_EPT_ST_CMD_ON_H1_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P00_EPT_ST_CMD_ON_H1_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P00_EPT_BRK_PDL_DSCRT_INPT_STS_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P00_EPT_BRK_PDL_DSCRT_INPT_STS_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P00_EPT_BRK_PDL_DSCRT_INPT_STS_HSC1_BRAKE__NOT__APPLIED_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P00_EPT_BRK_PDL_DSCRT_INPT_STS_HSC1_BRAKE__APPLIED_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P00_HCU_FR_P00_ROLLING_COUNTER_HSC1___0X0___0X_F__CHOICE (0u)

#define CANVEHICLE_HCU_HSC1_FR_P00_EPT_ACCEL_ACTU_POS_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P00_EPT_ACCEL_ACTU_POS_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P00_HCU_FR_P00_CHECKSUM_HSC1___0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_HCU_HSC1_FR_P01_EPT_RGTV_BRK_ACTU_TOQ_HSC1_NM__0X0___0X_FFFF__CHOICE (0u)

#define CANVEHICLE_HCU_HSC1_FR_P01_EPT_RGTV_BRK_TOQ_LMT_HSC1_NM__0X0___0X_FFFF__CHOICE (0u)

#define CANVEHICLE_HCU_HSC1_FR_P01_EPT_RGTV_BRK_SYS_FLT_HSC1_NO__FAULT_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P01_EPT_RGTV_BRK_SYS_FLT_HSC1_FAULT_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P01_EPT_RDY_H1_HSC1_NOT_READY_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P01_EPT_RDY_H1_HSC1_READY_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P01_EPT_RGTN_LVL_HSC1_LOW_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P01_EPT_RGTN_LVL_HSC1_STANDARD_CHOICE (1u)
#define CANVEHICLE_HCU_HSC1_FR_P01_EPT_RGTN_LVL_HSC1_HIGH_CHOICE (2u)
#define CANVEHICLE_HCU_HSC1_FR_P01_EPT_RGTN_LVL_HSC1_RESERVED_CHOICE (3u)

#define CANVEHICLE_HCU_HSC1_FR_P01_EPT_TOQ_RDUCN_FLR_STS_HSC1_TORQUE__REDUCTION_OK_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P01_EPT_TOQ_RDUCN_FLR_STS_HSC1_TORQUE__REDUCTION__TEMPORARILY__FAILED_CHOICE (1u)
#define CANVEHICLE_HCU_HSC1_FR_P01_EPT_TOQ_RDUCN_FLR_STS_HSC1_TORQUE__REDUCTION__PERMANENTLY__FAILED_CHOICE (2u)
#define CANVEHICLE_HCU_HSC1_FR_P01_EPT_TOQ_RDUCN_FLR_STS_HSC1_TORQUE__REDUCTION__LIMITED_CHOICE (3u)
#define CANVEHICLE_HCU_HSC1_FR_P01_EPT_TOQ_RDUCN_FLR_STS_HSC1_TORQ__REDUCTION__COMMUNICATION__FAILED_CHOICE (4u)

#define CANVEHICLE_HCU_HSC1_FR_P01_EPT_RGTV_CSTDN_TOQ_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P01_EPT_RGTV_CSTDN_TOQ_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P01_EPT_ACCEL_EFCTV_POS_HSC1____0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_HCU_HSC1_FR_P01_EPT_RGTV_CSTDN_TOQ_HSC1_NM__0X0___0X_FFFF__CHOICE (0u)

#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_DRV_EFNCY_IND_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_DRV_EFNCY_IND_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_DRV_EFNCY_IND_HSC1____0X0___0X7_F__CHOICE (0u)

#define CANVEHICLE_HCU_HSC1_FR_P07_EPTEDU_CLNT_TEM_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P07_EPTEDU_CLNT_TEM_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P07_EPTCC_FLT_PRST_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P07_EPTCC_FLT_PRST_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_MOT_CLNT_FLT_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_MOT_CLNT_FLT_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_MOT_OVHTD_IOHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_MOT_OVHTD_IOHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P07_ELEC_MOT_FLT_IOHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P07_ELEC_MOT_FLT_IOHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_FLT_HSC1_NO__FAULT_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_FLT_HSC1_FAULT_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_DRVNG_MD_SW_STS_HSC1_E____ECONOMY_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_DRVNG_MD_SW_STS_HSC1_N____NORMAL_CHOICE (1u)
#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_DRVNG_MD_SW_STS_HSC1_M____MOUNTAIN_CHOICE (2u)
#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_DRVNG_MD_SW_STS_HSC1_H_SOC__HOLD_CHOICE (3u)
#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_DRVNG_MD_SW_STS_HSC1_C__CHARGE_CHOICE (4u)
#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_DRVNG_MD_SW_STS_HSC1_E_____ECONOMY__CHOICE (5u)
#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_DRVNG_MD_SW_STS_HSC1_RESERVED_6_CHOICE (6u)
#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_DRVNG_MD_SW_STS_HSC1_RESERVED_7_CHOICE (7u)

#define CANVEHICLE_HCU_HSC1_FR_P07_EPTCC_TRGT_SPD_HSC1_KM_H__0X0___0X_FFF__CHOICE (0u)

#define CANVEHICLE_HCU_HSC1_FR_P07_EPTCCAHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P07_EPTCCAHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_SYS_PWR_LMT_AHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_SYS_PWR_LMT_AHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P07_EPTCC_ENBD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P07_EPTCC_ENBD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_HZRD_STA_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_HZRD_STA_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P07_EPTEDU_CLNT_TEM_HSC1_DEG_C__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_HCU_HSC1_FR_P07_ELEC_VEH_SYS_MD_HSC1_DEFAULT_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P07_ELEC_VEH_SYS_MD_HSC1_IDLE_CHARGE_CHOICE (1u)
#define CANVEHICLE_HCU_HSC1_FR_P07_ELEC_VEH_SYS_MD_HSC1_SMART_CHARGE_CHOICE (2u)
#define CANVEHICLE_HCU_HSC1_FR_P07_ELEC_VEH_SYS_MD_HSC1_PURE_ELECTRIC_DRIVE_MODE_CHOICE (3u)
#define CANVEHICLE_HCU_HSC1_FR_P07_ELEC_VEH_SYS_MD_HSC1_PURE_ENGINE_DRIVE_MODE_CHOICE (4u)
#define CANVEHICLE_HCU_HSC1_FR_P07_ELEC_VEH_SYS_MD_HSC1_SERIES_DRIVE_MODE_CHOICE (5u)
#define CANVEHICLE_HCU_HSC1_FR_P07_ELEC_VEH_SYS_MD_HSC1_PARALLEL_DRIVE_MODE_CHOICE (6u)
#define CANVEHICLE_HCU_HSC1_FR_P07_ELEC_VEH_SYS_MD_HSC1_REGEN_BRAKE_MODE_CHOICE (7u)
#define CANVEHICLE_HCU_HSC1_FR_P07_ELEC_VEH_SYS_MD_HSC1_PLUG_IN__CHARGING_CHOICE (8u)
#define CANVEHICLE_HCU_HSC1_FR_P07_ELEC_VEH_SYS_MD_HSC1_PURE_ELECTRIC_DRIVE_MODE___4_WD_CHOICE (9u)
#define CANVEHICLE_HCU_HSC1_FR_P07_ELEC_VEH_SYS_MD_HSC1_PARALLEL_DRIVE_MODE___4_WD_CHOICE (10u)
#define CANVEHICLE_HCU_HSC1_FR_P07_ELEC_VEH_SYS_MD_HSC1_ENGINE_IDLE_BUT_NOT_ELECTRIC_DRIVE_CHOICE (11u)
#define CANVEHICLE_HCU_HSC1_FR_P07_ELEC_VEH_SYS_MD_HSC1_ENGINE_IDLE_AND_ELECTRIC_DRIVE_CHOICE (12u)
#define CANVEHICLE_HCU_HSC1_FR_P07_ELEC_VEH_SYS_MD_HSC1_REGEN_BRAKE_ANDENGINE_IDLE_MODE__CHOICE (13u)
#define CANVEHICLE_HCU_HSC1_FR_P07_ELEC_VEH_SYS_MD_HSC1_VEHICLE_STATIONARYBUT_HV_ESTABLISHED_MODE_CHOICE (14u)
#define CANVEHICLE_HCU_HSC1_FR_P07_ELEC_VEH_SYS_MD_HSC1_RESERVED_CHOICE (15u)

#define CANVEHICLE_HCU_HSC1_FR_P07_EPT_SYS_PWR_HSC1_KW__0X0___0X_FFF__CHOICE (0u)

#define CANVEHICLE_HCU_HSC1_FR_P08_EPT_TR_INPT_SHAFT_MIN_AVLBL_TOQ_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P08_EPT_TR_INPT_SHAFT_MIN_AVLBL_TOQ_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P08_EPT_TR_INPT_SHAFT_MAX_AVLBL_TOQ_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P08_EPT_TR_INPT_SHAFT_MAX_AVLBL_TOQ_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P08_EPT_TR_INPT_SHAFT_MIN_AVLBL_TOQ_HSC1_NM__0X0___0X_FFF__CHOICE (0u)

#define CANVEHICLE_HCU_HSC1_FR_P08_EPT_TR_INPT_SHAFT_MAX_AVLBL_TOQ_HSC1_NM__0X0___0X_FFF__CHOICE (0u)

#define CANVEHICLE_HCU_HSC1_FR_P10_EPTAC_LD_ALD_HSC1_K_W__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_HCU_HSC1_FR_P10_EPTAC_LD_ALD_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P10_EPTAC_LD_ALD_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P10_EPTAC_LD_GRD_ALD_HSC1_K_W_S__0X0___0X_F__CHOICE (0u)

#define CANVEHICLE_HCU_HSC1_FR_P10_EPTAC_LD_GRD_ALD_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P10_EPTAC_LD_GRD_ALD_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P10_EPTEDU_CLNT_PUMP_STS_HSC1_NORMAL_OFF_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P10_EPTEDU_CLNT_PUMP_STS_HSC1_NORMAL_ON_CHOICE (1u)
#define CANVEHICLE_HCU_HSC1_FR_P10_EPTEDU_CLNT_PUMP_STS_HSC1_ALL_PUMP_CONSTANT_ON_BECAUSE_OF_FAULT_CHOICE (2u)
#define CANVEHICLE_HCU_HSC1_FR_P10_EPTEDU_CLNT_PUMP_STS_HSC1_ALL_PUMP_CONSTANT_OFF_BECAUSE_OF_FAULT_CHOICE (3u)
#define CANVEHICLE_HCU_HSC1_FR_P10_EPTEDU_CLNT_PUMP_STS_HSC1_ONE_PUMP_CONSTANT_ON_BECAUSE_OF_FAULT_CHOICE (4u)
#define CANVEHICLE_HCU_HSC1_FR_P10_EPTEDU_CLNT_PUMP_STS_HSC1_ONE_PUMP_CONSTANT_OFF_BECAUSE_OF_FAULT_CHOICE (5u)
#define CANVEHICLE_HCU_HSC1_FR_P10_EPTEDU_CLNT_PUMP_STS_HSC1_ONE_PUMP_SPEED_LIMITED_CHOICE (6u)
#define CANVEHICLE_HCU_HSC1_FR_P10_EPTEDU_CLNT_PUMP_STS_HSC1_ALL_PUMP_SPEED_LIMITED_CHOICE (7u)

#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_CRK_ABOTD_RSN_HSC1_NO__ABORTED_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_CRK_ABOTD_RSN_HSC1_SHIFTER_NON_PARK_OR__TRANSMISSION__CRANK_NOT_PERMIT_CHOICE (1u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_CRK_ABOTD_RSN_HSC1_VEHICLE_SPEED__LIMIT_CHOICE (2u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_CRK_ABOTD_RSN_HSC1_MIL__RELATED_DTC_CHOICE (3u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_CRK_ABOTD_RSN_HSC1_LOST_COMMUNICATION_WITH_BCM_OR_GW_OR_SCS_ABS_OR_TCM_CHOICE (4u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_CRK_ABOTD_RSN_HSC1_IN_POST_COLLISION_CHOICE (5u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_CRK_ABOTD_RSN_HSC1_FUEL_LEVEL_LOW_CHOICE (6u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_CRK_ABOTD_RSN_HSC1_KL15_DISCONNECTED_CHOICE (7u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_CRK_ABOTD_RSN_HSC1_MAX__CRANK_TIME_EXPIRE_CHOICE (8u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_CRK_ABOTD_RSN_HSC1_IN__CHARGING_CHOICE (9u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_CRK_ABOTD_RSN_HSC1_UNKNOWN__REASON_CHOICE (15u)

#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_RUN_ABOTD_RSN_HSC1_NO__ABORTED_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_RUN_ABOTD_RSN_HSC1_SHIFTER_NON_PARK_CHOICE (1u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_RUN_ABOTD_RSN_HSC1_VEHICLE_SPEED__LIMIT_CHOICE (2u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_RUN_ABOTD_RSN_HSC1_MIL__RELATED_DTC_CHOICE (3u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_RUN_ABOTD_RSN_HSC1_LOST_COMMUNICATION_WITH_BCM_OR_GW_OR_SCS_ABS_OR_TCM_CHOICE (4u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_RUN_ABOTD_RSN_HSC1_IN_POST_COLLISION_CHOICE (5u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_RUN_ABOTD_RSN_HSC1_ENGINE_OVERHEATING__RESERVED__CHOICE (6u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_RUN_ABOTD_RSN_HSC1_KL15_DISCONNECTED_CHOICE (7u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_RUN_ABOTD_RSN_HSC1_LOW__OIL__PRESSURE__RESERVED__CHOICE (8u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_RUN_ABOTD_RSN_HSC1_ENGINE_SPEED__LIMIT__RESERVED__CHOICE (9u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_RUN_ABOTD_RSN_HSC1_ACCELERATOR_PEDAL__LIMIT_CHOICE (10u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_RUN_ABOTD_RSN_HSC1_AUTHENTICATION__FAILURE_CHOICE (11u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_RUN_ABOTD_RSN_HSC1_MAX__RUN_TIME_EXPIRE_CHOICE (12u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_RUN_ABOTD_RSN_HSC1_IN__CHARGING_CHOICE (13u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_RUN_ABOTD_RSN_HSC1_UNKNOWN__REASON_CHOICE (15u)

#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_CRK_ABOTD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_CRK_ABOTD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_RUN_ABOTD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P11_RVSEPT_RUN_ABOTD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P11_EPTASL_STS_HSC1_OFF_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPTASL_STS_HSC1_ACTIVE_LIMITING__CHOICE (1u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPTASL_STS_HSC1_STANDBY_CHOICE (2u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPTASL_STS_HSC1_ENTRY_CONDITION_INCORRECT_CHOICE (3u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPTASL_STS_HSC1_ACTIVE__OVERSPEED__CHOICE (4u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPTASL_STS_HSC1_FAULT_CHOICE (5u)

#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_DEFAULT_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_SPEED__LIMITED_CHOICE (1u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_POWER__LIMITED_CHOICE (2u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_PULL_OVER_CHOICE (3u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_EV_DRIVE_ONLY_CHOICE (4u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_SOC__DEFAULT_MODE_RECOMENDED_CHOICE (5u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_SOC__HOLD_MODE_RECOMMENDED_CHOICE (6u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_SOC__CHARGE_MODE_RECOMMENDED_CHOICE (7u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_PULL_OUT_CHARGER_CHOICE (8u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_AGGRESSIVE_DRIVE_IS_NOT_RECOMMENDED_CHOICE (9u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_REGENERATION_LIMITED_CHOICE (10u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_RESERVED_11_CHOICE (11u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_RESERVED_12_CHOICE (12u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_RESERVED_13_CHOICE (13u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_POWER_OFF_BEFORE_CHARGE_CHOICE (14u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_CHARGE_STOPPED_CHOICE (15u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_AC_LIMITED_CHOICE (16u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_SOC_DEPLETING_CHOICE (17u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_SHIFT_TO_P_N_CHOICE (18u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_CLUTCH_OVERHEATED_CHOICE (19u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_HV_IS__READY_CHOICE (20u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_P_N_RECOMMENDED_FOR_FAULT_RESUMING_CHOICE (21u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_LIGHT_REGEN_NOT_SUPPORTED_CHOICE (22u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_SOC_MODE_NOT_SUPPORTED_CHOICE (23u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_MOTOR__FAULT__CHOICE (24u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_EXIT_FROM_EV__MODE__AUTOMATICALLY_CHOICE (25u)
#define CANVEHICLE_HCU_HSC1_FR_P11_EPT_INFO_DSP_HSC1_RESERVED_EV__MODE__ENTRY__NOT__SUPPORTED_CHOICE (26u)

#define CANVEHICLE_HCU_HSC1_FR_P13_EPT_DRVR_REQ_INPT_SHAFT_TVHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P13_EPT_DRVR_REQ_INPT_SHAFT_TVHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P13_EPT_TR_INPT_SHAFT_TOQ_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P13_EPT_TR_INPT_SHAFT_TOQ_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P13_EPT_TR_INPT_SHAFT_SPD_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P13_EPT_TR_INPT_SHAFT_SPD_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P13_EPT_DRVR_REQ_INPT_SHAFT_TOQ_HSC1_NM__0X0___0X_FFF__CHOICE (0u)

#define CANVEHICLE_HCU_HSC1_FR_P13_EPTHVDCDC_MD_REQ_HSC1_STANDBY_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P13_EPTHVDCDC_MD_REQ_HSC1_BOOST_CHOICE (1u)
#define CANVEHICLE_HCU_HSC1_FR_P13_EPTHVDCDC_MD_REQ_HSC1_BUCK_CHOICE (2u)
#define CANVEHICLE_HCU_HSC1_FR_P13_EPTHVDCDC_MD_REQ_HSC1_DC_LINK_DISCHARGE_CHOICE (3u)
#define CANVEHICLE_HCU_HSC1_FR_P13_EPTHVDCDC_MD_REQ_HSC1_RESERVED_4_CHOICE (4u)
#define CANVEHICLE_HCU_HSC1_FR_P13_EPTHVDCDC_MD_REQ_HSC1_RESERVED_5_CHOICE (5u)
#define CANVEHICLE_HCU_HSC1_FR_P13_EPTHVDCDC_MD_REQ_HSC1_RESERVED_6_CHOICE (6u)
#define CANVEHICLE_HCU_HSC1_FR_P13_EPTHVDCDC_MD_REQ_HSC1_RESERVED_7_CHOICE (7u)

#define CANVEHICLE_HCU_HSC1_FR_P13_EPT_TR_INPT_SHAFT_TOQ_HSC1_NM__0X0___0X_FFF__CHOICE (0u)

#define CANVEHICLE_HCU_HSC1_FR_P13_EPT_TR_INPT_SHAFT_SPD_HSC1_RPM__0X0___0X_FFFF__CHOICE (0u)

#define CANVEHICLE_HCU_HSC1_FR_P13_VCU_ACC_REQ_STS_HSC1_NO__REQUEST_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_FR_P13_VCU_ACC_REQ_STS_HSC1_REQUEST_CHOICE (1u)

#define CANVEHICLE_HCU_HSC1_FR_P13_VCU_ACC_REQ_VAL_HSC1___0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_HCU_HSC1_TCM_FR_P03_AUTOC_TR_GEAR_SHFT_DIRCN_HSC1_NO__SHIFT_IN__PROGRESS_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_TCM_FR_P03_AUTOC_TR_GEAR_SHFT_DIRCN_HSC1_UPSHIFT_IN__PROGRESS_CHOICE (1u)
#define CANVEHICLE_HCU_HSC1_TCM_FR_P03_AUTOC_TR_GEAR_SHFT_DIRCN_HSC1_DOWNSHIFT_IN__PROGRESS_CHOICE (2u)

#define CANVEHICLE_HCU_HSC1_TCM_FR_P03_AUTOC_TR_GEAR_SHFT_DIRCN_FHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HCU_HSC1_TCM_FR_P03_AUTOC_TR_GEAR_SHFT_DIRCN_FHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDC_DRTNG_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDC_DRTNG_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDC_ACTV_DIS_OVER_TIME_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDC_ACTV_DIS_OVER_TIME_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDC_OVER_CURR_PROT_LVHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDC_OVER_CURR_PROT_LVHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDCHV_SIDE_VOL_HSC1_V__0X0___0X3_FF__CHOICE (0u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDCHV_SIDE_CRNT_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDCHV_SIDE_CRNT_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDC_STA_HSC1_STANDBY_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDC_STA_HSC1_RESERVED_1_CHOICE (1u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDC_STA_HSC1_BUCK_CHOICE (2u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDC_STA_HSC1_DC__LINK__DISCHARGE_CHOICE (3u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDC_STA_HSC1_BOOST_CHOICE (4u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDC_STA_HSC1_FAILURE_CHOICE (5u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDC_STA_HSC1_RESERVED_6_CHOICE (6u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDC_STA_HSC1_RESERVED_7_CHOICE (7u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDCHV_SIDE_VOL_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDCHV_SIDE_VOL_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P01_HVDCDCHV_SIDE_CRNT_HSC1_A__0X0___0X7_FF__CHOICE (0u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P02_DC_OVER_CURRENT_HVHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P02_DC_OVER_CURRENT_HVHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P02_DC_VOLT_FAIL_HSC1_NO__FAILURE_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P02_DC_VOLT_FAIL_HSC1_FAILURE_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P02_HVDCDC_LD_RATIO_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P02_HVDCDC_LD_RATIO_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P02_HVDCDC_LD_RATIO_HSC1____0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P02_DC_CURRENT_MAX_HVHSC1___0X0___0X_FD__CHOICE (0u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P02_DC_UNDER_VOLT_LVHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P02_DC_UNDER_VOLT_LVHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P02_DC_UNDER_VOLT_HVHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P02_DC_UNDER_VOLT_HVHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P02_DC_OVER_VOLT_LVHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P02_DC_OVER_VOLT_LVHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P02_DC_OVER_VOLT_HVHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P02_DC_OVER_VOLT_HVHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P02_DC_OVER_CURRENT_LVHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P02_DC_OVER_CURRENT_LVHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P03_HVDCDC_TEM_HSC1_DEG_C__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P03_HVDCDCLV_SIDE_VOL_HSC1_V__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P03_HVDCDCLV_SIDE_VOL_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P03_HVDCDCLV_SIDE_VOL_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P03_HVDCDCLV_SIDE_STPT_FDBK_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P03_HVDCDCLV_SIDE_STPT_FDBK_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P03_HVDCDCLV_SIDE_STPT_FDBK_HSC1_V__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P03_HVDCDCLV_SIDE_CRNT_HSC1_A__0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P03_HVDCDC_CLNT_PUMP_PWM_REQ_HSC1____0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P03_HVDCDCLV_SIDE_CRNT_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P03_HVDCDCLV_SIDE_CRNT_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P03_HVDCDC_HDWR_FLR_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P03_HVDCDC_HDWR_FLR_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P03_HVDCDC_INTNL_FLR_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P03_HVDCDC_INTNL_FLR_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P03_HVDCDC_OVER_HTD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_HVDCDC_HSC1_FR_P03_HVDCDC_OVER_HTD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P03_HVDCDC_COUNTER01_HSC1_COUNT_VALUE__0X0___0X_F__CHOICE (0u)

#define CANVEHICLE_HVDCDC_HSC1_FR_P03_HVDCDC_CHECKSUM01_HSC1___0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_ISC_HSC1_FR_P03_ISG_ACTU_TOQ_V_H1_HSC1_VALID_CHOICE (0u)
#define CANVEHICLE_ISC_HSC1_FR_P03_ISG_ACTU_TOQ_V_H1_HSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_ISC_HSC1_FR_P03_ISG_STA_H1_HSC1_INITIALIZATION_CHOICE (0u)
#define CANVEHICLE_ISC_HSC1_FR_P03_ISG_STA_H1_HSC1_PRE_CHARGE_CHOICE (1u)
#define CANVEHICLE_ISC_HSC1_FR_P03_ISG_STA_H1_HSC1_STANDBY_CHOICE (3u)
#define CANVEHICLE_ISC_HSC1_FR_P03_ISG_STA_H1_HSC1_OFFSET__ANGLE__CALIBRATION_CHOICE (5u)
#define CANVEHICLE_ISC_HSC1_FR_P03_ISG_STA_H1_HSC1_EXTERNAL__SPEED__CONTROL_CHOICE (6u)
#define CANVEHICLE_ISC_HSC1_FR_P03_ISG_STA_H1_HSC1_INTERNAL__SPEED__CONTROL_CHOICE (7u)
#define CANVEHICLE_ISC_HSC1_FR_P03_ISG_STA_H1_HSC1_TORQUE__CONTROL_CHOICE (8u)
#define CANVEHICLE_ISC_HSC1_FR_P03_ISG_STA_H1_HSC1_IDC__CURRENT__CONTROL_CHOICE (9u)
#define CANVEHICLE_ISC_HSC1_FR_P03_ISG_STA_H1_HSC1_UDC__VOLTAGE__CONTROL_CHOICE (10u)
#define CANVEHICLE_ISC_HSC1_FR_P03_ISG_STA_H1_HSC1_AFTERRUN_CHOICE (11u)
#define CANVEHICLE_ISC_HSC1_FR_P03_ISG_STA_H1_HSC1_PRE_FAILURE_CHOICE (12u)
#define CANVEHICLE_ISC_HSC1_FR_P03_ISG_STA_H1_HSC1_FAILURE_CHOICE (13u)
#define CANVEHICLE_ISC_HSC1_FR_P03_ISG_STA_H1_HSC1_DISCHARGE_CHOICE (14u)

#define CANVEHICLE_ISC_HSC1_FR_S01_ISC_IMMO_DATA1_HSC1___0X0___0X_FFFFFFFF__CHOICE (0u)

#define CANVEHICLE_ISC_HSC1_FR_S02_ISC_IMMO_DATA2_HSC1___0X0___0X_FFFFFFFF__CHOICE (0u)

#define CANVEHICLE_ISC_HSC1_FR_S03_ISC_TO_PF_IMMO_CHLG_HSC1___0X0___0X_FFFFFFFF__CHOICE (0u)

#define CANVEHICLE_SCU_HSC1_FR_P00_SCUNRCD_ALV_RCHSC1___0X0___0X_F__CHOICE (0u)

#define CANVEHICLE_SCU_HSC1_FR_P00_SCUNRCD_AVLBL_HSC1_UNAVAILABLE_CHOICE (0u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCUNRCD_AVLBL_HSC1_AVAILABLE_CHOICE (1u)

#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_DRVR_INTRVN_AHSC1_INACTIVE_CHOICE (0u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_DRVR_INTRVN_AHSC1_ACTIVE_CHOICE (1u)

#define CANVEHICLE_SCU_HSC1_FR_P00_SCUSOC_MD_SW_STS_HSC1_NO__ACTIVE_CHOICE (0u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCUSOC_MD_SW_STS_HSC1_TAP__UP_CHOICE (1u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCUSOC_MD_SW_STS_HSC1_TAP__DOWN_CHOICE (2u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCUSOC_MD_SW_STS_HSC1_ILLEGAL__ACTIVE_CHOICE (3u)

#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_PARK_ACTR_STS_HSC1_NO__FAULT_CHOICE (0u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_PARK_ACTR_STS_HSC1_ACTUATOR__FAULT_CHOICE (1u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_PARK_ACTR_STS_HSC1_SINGLE_ACTUATOR_SENSOR_FAULT_SAFETY_YELLOW_WARNING__CHOICE (2u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_PARK_ACTR_STS_HSC1_ALL_ACTUATOR_SENSOR_FAULT_SAFETY_RED_WARNING__CHOICE (3u)

#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_POS_RCHSC1___0X0___0X_F__CHOICE (0u)

#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_LVR_POS_HSC1_SCU__INITIALIZATION_CHOICE (0u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_LVR_POS_HSC1_S__SPORT_MODE__CHOICE (1u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_LVR_POS_HSC1_W__WINTER_MODE__CHOICE (2u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_LVR_POS_HSC1_M__MANUAL_MODE__CHOICE (3u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_LVR_POS_HSC1_D__DRIVE__CHOICE (5u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_LVR_POS_HSC1_N__NEUTRAL__CHOICE (6u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_LVR_POS_HSC1_R__REVERSE__CHOICE (7u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_LVR_POS_HSC1_P__PARK__CHOICE (8u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_LVR_POS_HSC1_ERROR_CHOICE (10u)

#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_POS_INVSN_HSC1_ERROR_CHOICE (5u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_POS_INVSN_HSC1_RESERVED_6_CHOICE (6u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_POS_INVSN_HSC1_P__PARK__CHOICE (7u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_POS_INVSN_HSC1_R___REVERSE__CHOICE (8u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_POS_INVSN_HSC1_N___NEUTRAL__CHOICE (9u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_POS_INVSN_HSC1_D___DRIVE__CHOICE (10u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_POS_INVSN_HSC1_RESERVED_11_CHOICE (11u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_POS_INVSN_HSC1_M__MANUAL_MODE__CHOICE (12u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_POS_INVSN_HSC1_W__WINTER_MODE__CHOICE (13u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_POS_INVSN_HSC1_S__SPORT_MODE__CHOICE (14u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_POS_INVSN_HSC1_SCU_INITIALIZATION_CHOICE (15u)

#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_RGTN_LVL_SW_STS_HSC1_NO__ACTIVE_CHOICE (0u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_RGTN_LVL_SW_STS_HSC1_TAP__UP_CHOICE (1u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_RGTN_LVL_SW_STS_HSC1_TAP__DOWN_CHOICE (2u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_RGTN_LVL_SW_STS_HSC1_ILLEGAL__ACTIVE_CHOICE (3u)

#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_DRVNG_MD_SW_STS_HSC1_NO__ACTIVE_CHOICE (0u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_DRVNG_MD_SW_STS_HSC1_TAP__UP_CHOICE (1u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_DRVNG_MD_SW_STS_HSC1_TAP__DOWN_CHOICE (2u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_DRVNG_MD_SW_STS_HSC1_ILLEGAL__ACTIVE_CHOICE (3u)

#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_PARK_LCK_REQ_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_PARK_LCK_REQ_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_PARK_LCK_REQ_HSC1_12__NO__REQUEST_CHOICE (0u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_PARK_LCK_REQ_HSC1_24__RELEASE_BRAKE_REQUEST_CHOICE (1u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_PARK_LCK_REQ_HSC1_12__APPLY_BRAKE_REQUEST_CHOICE (2u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_PARK_LCK_REQ_HSC1_24__RESERVED_CHOICE (3u)

#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_PARK_LCK_REQ_PVHSC1___0X0___0X_F__CHOICE (0u)

#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_SPVS_UIT_FLR_HSC1_SSU_OK_CHOICE (0u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_SPVS_UIT_FLR_HSC1_SSU_NOT_PRESENT_CHOICE (1u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_SPVS_UIT_FLR_HSC1_SSU_FAIL_SAFE_MODE_CHOICE (2u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_SPVS_UIT_FLR_HSC1_SSU_RESET_OCCURRED_CHOICE (3u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_SPVS_UIT_FLR_HSC1_RESERVED_4_CHOICE (4u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_SPVS_UIT_FLR_HSC1_RESERVED_5_CHOICE (5u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_SPVS_UIT_FLR_HSC1_RESERVED_6_CHOICE (6u)
#define CANVEHICLE_SCU_HSC1_FR_P00_SCU_SHIFTER_SPVS_UIT_FLR_HSC1_RESERVED_7_CHOICE (7u)

#define CANVEHICLE_SDM_HSC1_FR_P00_FASN_DRVR_SBLT_IND_CMD_HSC1_DRIVE_LAMP_OFF_CHOICE (0u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FASN_DRVR_SBLT_IND_CMD_HSC1_DRIVE_LAMP_ON_CHOICE (1u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FASN_DRVR_SBLT_IND_CMD_HSC1_DRIVE_LAMP__FLASHING_CHOICE (2u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FASN_DRVR_SBLT_IND_CMD_HSC1_SIGNAL_NOT_AVAILABLE_CHOICE (3u)

#define CANVEHICLE_SDM_HSC1_FR_P00_FASN_FRT_PSNG_SBLT_IND_CMD_HSC1_DRIVE_LAMP_OFF_CHOICE (0u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FASN_FRT_PSNG_SBLT_IND_CMD_HSC1_DRIVE_LAMP_ON_CHOICE (1u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FASN_FRT_PSNG_SBLT_IND_CMD_HSC1_DRIVE_LAMP__FLASHING_CHOICE (2u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FASN_FRT_PSNG_SBLT_IND_CMD_HSC1_SIGNAL_NOT_AVAILABLE_CHOICE (3u)

#define CANVEHICLE_SDM_HSC1_FR_P00_SDMRCHSC1___0X0___0X3__CHOICE (0u)

#define CANVEHICLE_SDM_HSC1_FR_P00_AIRBAG_SYS_FLT_IND_CMD_HSC1_DRIVE_LAMP_OFF_CHOICE (0u)
#define CANVEHICLE_SDM_HSC1_FR_P00_AIRBAG_SYS_FLT_IND_CMD_HSC1_DRIVE_LAMP_ON_CHOICE (1u)
#define CANVEHICLE_SDM_HSC1_FR_P00_AIRBAG_SYS_FLT_IND_CMD_HSC1_DRIVE_LAMP__FLASHING_CHOICE (2u)

#define CANVEHICLE_SDM_HSC1_FR_P00_DRVR_SBLT_ATC_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_SDM_HSC1_FR_P00_DRVR_SBLT_ATC_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_SDM_HSC1_FR_P00_DRVR_SBLT_ATC_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_SDM_HSC1_FR_P00_DRVR_SBLT_ATC_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_SDM_HSC1_FR_P00_AIRBAG_DPL_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_SDM_HSC1_FR_P00_AIRBAG_DPL_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_SDM_HSC1_FR_P00_AIRBAG_DPL_INVSN_HSC1_AIRBAG__DEPLOYED_CHOICE (0u)
#define CANVEHICLE_SDM_HSC1_FR_P00_AIRBAG_DPL_INVSN_HSC1_NO__AIRBAG__DEPLOYED_CHOICE (1u)

#define CANVEHICLE_SDM_HSC1_FR_P00_FRT_PSNG_SBLT_ATC_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FRT_PSNG_SBLT_ATC_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_SDM_HSC1_FR_P00_FRT_PSNG_SBLT_ATC_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FRT_PSNG_SBLT_ATC_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_SDM_HSC1_FR_P00_AIRBAG_SYS_FLT_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_SDM_HSC1_FR_P00_AIRBAG_SYS_FLT_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_SDM_HSC1_FR_P00_FASN_SEC_ROW_L_SBLT_IND_CMD_HSC1_OFF__INDICATION_CHOICE (0u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FASN_SEC_ROW_L_SBLT_IND_CMD_HSC1_ON__INDICATION_CHOICE (1u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FASN_SEC_ROW_L_SBLT_IND_CMD_HSC1_FLASHING__INDICATION_CHOICE (2u)

#define CANVEHICLE_SDM_HSC1_FR_P00_FASN_SEC_ROW_MID_SBLT_IND_CHSC1_OFF__INDICATION_CHOICE (0u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FASN_SEC_ROW_MID_SBLT_IND_CHSC1_ON__INDICATION_CHOICE (1u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FASN_SEC_ROW_MID_SBLT_IND_CHSC1_FLASHING__INDICATION_CHOICE (2u)

#define CANVEHICLE_SDM_HSC1_FR_P00_FASN_SEC_ROW_R_SBLT_IND_CMD_HSC1_OFF__INDICATION_CHOICE (0u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FASN_SEC_ROW_R_SBLT_IND_CMD_HSC1_ON__INDICATION_CHOICE (1u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FASN_SEC_ROW_R_SBLT_IND_CMD_HSC1_FLASHING__INDICATION_CHOICE (2u)

#define CANVEHICLE_SDM_HSC1_FR_P00_FRT_PSNG_AIRBAG_IND_REQ_HSC1_PASSENGER__AIRBAG_NO__INDICATION_CHOICE (0u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FRT_PSNG_AIRBAG_IND_REQ_HSC1_PASSENGER__AIRBAG_ON__INDICATION_CHOICE (1u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FRT_PSNG_AIRBAG_IND_REQ_HSC1_PASSENGER__AIRBAG_OFF__INDICATION_CHOICE (2u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FRT_PSNG_AIRBAG_IND_REQ_HSC1_PASSENGER__AIRBAG_ON_AND_OFF__INDICATION__BOTH_CHOICE (3u)

#define CANVEHICLE_SDM_HSC1_FR_P00_FASN_SBLT_AUD_RMNDR_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FASN_SBLT_AUD_RMNDR_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_SDM_HSC1_FR_P00_FRT_PSNG_AIRBAG_ENB_IND_FHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FRT_PSNG_AIRBAG_ENB_IND_FHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_SDM_HSC1_FR_P00_FRT_PSNG_AIRBAG_DSBL_IND_FHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_SDM_HSC1_FR_P00_FRT_PSNG_AIRBAG_DSBL_IND_FHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_SDM_HSC1_FR_P00_VEH_CRSH_TYP_HSC1_NO__CRASH_CHOICE (0u)
#define CANVEHICLE_SDM_HSC1_FR_P00_VEH_CRSH_TYP_HSC1_FRONT__CRASH_CHOICE (1u)
#define CANVEHICLE_SDM_HSC1_FR_P00_VEH_CRSH_TYP_HSC1_SIDE__CRASH_CHOICE (2u)
#define CANVEHICLE_SDM_HSC1_FR_P00_VEH_CRSH_TYP_HSC1_REAR__CRASH_CHOICE (3u)
#define CANVEHICLE_SDM_HSC1_FR_P00_VEH_CRSH_TYP_HSC1_RESERVED_4_CHOICE (4u)
#define CANVEHICLE_SDM_HSC1_FR_P00_VEH_CRSH_TYP_HSC1_RESERVED_5_CHOICE (5u)
#define CANVEHICLE_SDM_HSC1_FR_P00_VEH_CRSH_TYP_HSC1_RESERVED_6_CHOICE (6u)
#define CANVEHICLE_SDM_HSC1_FR_P00_VEH_CRSH_TYP_HSC1_RESERVED_7_CHOICE (7u)

#define CANVEHICLE_SDM_HSC1_FR_S01_SDM_CPHR3_LRN_RESULT_FDBK_HSC1___0X0___0X_FFFFFFFF__CHOICE (0u)

#define CANVEHICLE_SDM_HSC1_FR_S02_SDM_IMMO_DATA1_HSC1___0X0___0X_FFFFFFFF__CHOICE (0u)

#define CANVEHICLE_SDM_HSC1_FR_S03_SDM_IMMO_DATA2_HSC1___0X0___0X_FFFFFFFF__CHOICE (0u)

#define CANVEHICLE_TCM_HSC1_FR_P07_TR_CC_CANCL_REQ_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_TCM_HSC1_FR_P07_TR_CC_CANCL_REQ_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_TCM_HSC1_FR_P09_TR_EMSN_RLTD_MALF_AHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_TCM_HSC1_FR_P09_TR_EMSN_RLTD_MALF_AHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_TCM_HSC1_FR_P09_TR_NON_EMSN_RLTD_MALF_AHSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_TCM_HSC1_FR_P09_TR_NON_EMSN_RLTD_MALF_AHSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_TC_HSC1_FR_P01_TM_SPD_H1_HSC1_RPM__0X0___0X_FFFF__CHOICE (0u)

#define CANVEHICLE_TC_HSC1_FR_P01_TM_SPD_V_H1_HSC1_VALID_CHOICE (0u)
#define CANVEHICLE_TC_HSC1_FR_P01_TM_SPD_V_H1_HSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_TC_HSC1_FR_P01_TM_STA_H1_HSC1_INITIALIZATION_CHOICE (0u)
#define CANVEHICLE_TC_HSC1_FR_P01_TM_STA_H1_HSC1_PRE_CHARGE_CHOICE (1u)
#define CANVEHICLE_TC_HSC1_FR_P01_TM_STA_H1_HSC1_STANDBY_CHOICE (3u)
#define CANVEHICLE_TC_HSC1_FR_P01_TM_STA_H1_HSC1_OFFSET__ANGLE__CALIBRATION_CHOICE (5u)
#define CANVEHICLE_TC_HSC1_FR_P01_TM_STA_H1_HSC1_EXTERNAL__SPEED__CONTROL_CHOICE (6u)
#define CANVEHICLE_TC_HSC1_FR_P01_TM_STA_H1_HSC1_INTERNAL__SPEED__CONTROL_CHOICE (7u)
#define CANVEHICLE_TC_HSC1_FR_P01_TM_STA_H1_HSC1_TORQUE__CONTROL_CHOICE (8u)
#define CANVEHICLE_TC_HSC1_FR_P01_TM_STA_H1_HSC1_IDC__CURRENT__CONTROL_CHOICE (9u)
#define CANVEHICLE_TC_HSC1_FR_P01_TM_STA_H1_HSC1_UDC__VOLTAGE__CONTROL_CHOICE (10u)
#define CANVEHICLE_TC_HSC1_FR_P01_TM_STA_H1_HSC1_AFTERRUN_CHOICE (11u)
#define CANVEHICLE_TC_HSC1_FR_P01_TM_STA_H1_HSC1_PRE_FAILURE_CHOICE (12u)
#define CANVEHICLE_TC_HSC1_FR_P01_TM_STA_H1_HSC1_FAILURE_CHOICE (13u)
#define CANVEHICLE_TC_HSC1_FR_P01_TM_STA_H1_HSC1_DISCHARGE_CHOICE (14u)

#define CANVEHICLE_TC_HSC1_FR_S01_TC_IMMO_DATA1_HSC1___0X0___0X_FFFFFFFF__CHOICE (0u)

#define CANVEHICLE_TC_HSC1_FR_S02_TC_IMMO_DATA2_HSC1___0X0___0X_FFFFFFFF__CHOICE (0u)

#define CANVEHICLE_TC_HSC1_FR_S03_TC_TO_PF_IMMO_CHLG_HSC1___0X0___0X_FFFFFFFF__CHOICE (0u)

#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_ESTD_GEAR_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_ESTD_GEAR_VHSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_ESTD_GEAR_HSC1_NOT__SUPPORTED_CHOICE (0u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_ESTD_GEAR_HSC1_FIRST__GEAR_CHOICE (1u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_ESTD_GEAR_HSC1_SECOND__GEAR_CHOICE (2u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_ESTD_GEAR_HSC1_THIRD__GEAR_CHOICE (3u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_ESTD_GEAR_HSC1_FOURTH__GEAR_CHOICE (4u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_ESTD_GEAR_HSC1_FIFTH__GEAR_CHOICE (5u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_ESTD_GEAR_HSC1_SIXTH__GEAR_CHOICE (6u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_ESTD_GEAR_HSC1_SEVENTH__GEAR_CHOICE (7u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_ESTD_GEAR_HSC1_EIGHTH__GEAR_CHOICE (8u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_ESTD_GEAR_HSC1_NEUTRAL__GEAR_CHOICE (13u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_ESTD_GEAR_HSC1_REVERSE__GEAR_CHOICE (14u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_ESTD_GEAR_HSC1_PARK__GEAR_CHOICE (15u)

#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_AUTOC_TR_CMDD_GEAR_HSC1_NOT__SUPPORTED_CHOICE (0u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_AUTOC_TR_CMDD_GEAR_HSC1_FIRST__GEAR_CHOICE (1u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_AUTOC_TR_CMDD_GEAR_HSC1_SECOND__GEAR_CHOICE (2u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_AUTOC_TR_CMDD_GEAR_HSC1_THIRD__GEAR_CHOICE (3u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_AUTOC_TR_CMDD_GEAR_HSC1_FOURTH__GEAR_CHOICE (4u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_AUTOC_TR_CMDD_GEAR_HSC1_FIFTH__GEAR_CHOICE (5u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_AUTOC_TR_CMDD_GEAR_HSC1_SIXTH__GEAR_CHOICE (6u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_AUTOC_TR_CMDD_GEAR_HSC1_SEVENTH__GEAR_CHOICE (7u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_AUTOC_TR_CMDD_GEAR_HSC1_EIGHTH__GEAR_CHOICE (8u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_AUTOC_TR_CMDD_GEAR_HSC1_NEUTRAL__GEAR_CHOICE (13u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_AUTOC_TR_CMDD_GEAR_HSC1_REVERSE__GEAR_CHOICE (14u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_AUTOC_TR_CMDD_GEAR_HSC1_PARK__GEAR_CHOICE (15u)

#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_SHFT_LVR_POS_V_H1_HSC1_VALID_CHOICE (0u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_SHFT_LVR_POS_V_H1_HSC1_INVALID_CHOICE (1u)

#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_SHFT_LVR_POS_H1_HSC1_BETWEEN__RANGES_CHOICE (0u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_SHFT_LVR_POS_H1_HSC1_PARK__RANGE_CHOICE (1u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_SHFT_LVR_POS_H1_HSC1_REVERSE__RANGE_CHOICE (2u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_SHFT_LVR_POS_H1_HSC1_NEUTRAL__RANGE_CHOICE (3u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_SHFT_LVR_POS_H1_HSC1_FORWARD__RANGE_A_CHOICE (4u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_SHFT_LVR_POS_H1_HSC1_FORWARD__RANGE_B_CHOICE (5u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_SHFT_LVR_POS_H1_HSC1_FORWARD__RANGE_C_CHOICE (6u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_SHFT_LVR_POS_H1_HSC1_FORWARD__RANGE_D_CHOICE (7u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_SHFT_LVR_POS_H1_HSC1_FORWARD__RANGE_E_CHOICE (8u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_SHFT_LVR_POS_H1_HSC1_FORWARD__RANGE_F_CHOICE (9u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_SHFT_LVR_POS_H1_HSC1_FORWARD__RANGE_G_CHOICE (10u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_SHFT_LVR_POS_H1_HSC1_FORWARD__RANGE_H_CHOICE (11u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P04_TR_SHFT_LVR_POS_H1_HSC1_LEVER__POSITION__UNKNOWN_CHOICE (15u)

#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_COOLNG_FAN_LVL_FDBK_HSC1_OFF_CHOICE (0u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_COOLNG_FAN_LVL_FDBK_HSC1_1__LEVEL_CHOICE (1u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_COOLNG_FAN_LVL_FDBK_HSC1_2__LEVEL_CHOICE (2u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_COOLNG_FAN_LVL_FDBK_HSC1_3__LEVEL_CHOICE (3u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_COOLNG_FAN_LVL_FDBK_HSC1_4__LEVEL_CHOICE (4u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_COOLNG_FAN_LVL_FDBK_HSC1_5__LEVEL_CHOICE (5u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_COOLNG_FAN_LVL_FDBK_HSC1_6__LEVEL_CHOICE (6u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_COOLNG_FAN_LVL_FDBK_HSC1_7__LEVEL_CHOICE (7u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_COOLNG_FAN_LVL_FDBK_HSC1_8__LEVEL_CHOICE (8u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_COOLNG_FAN_LVL_FDBK_HSC1_9__LEVEL_CHOICE (9u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_COOLNG_FAN_LVL_FDBK_HSC1_10__LEVEL_CHOICE (10u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_COOLNG_FAN_LVL_FDBK_HSC1_11__LEVEL_CHOICE (11u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_COOLNG_FAN_LVL_FDBK_HSC1_12__LEVEL_CHOICE (12u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_COOLNG_FAN_LVL_FDBK_HSC1_13__LEVEL_CHOICE (13u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_COOLNG_FAN_LVL_FDBK_HSC1_14__LEVEL_CHOICE (14u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_COOLNG_FAN_LVL_FDBK_HSC1_15__LEVEL_CHOICE (15u)

#define CANVEHICLE_VCU_HSC1_ECM_FR_P11_COOLNG_FAN_PWM_FDBK_HSC1____0X0___0X_FF__CHOICE (0u)

#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_PT_ACC_TOQ_REQ_RESP_HSC1_NO_REQUEST_CHOICE (0u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_PT_ACC_TOQ_REQ_RESP_HSC1_REQUEST_HONORED_CHOICE (1u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_PT_ACC_TOQ_REQ_RESP_HSC1_LOST_ARBITRATION_CHOICE (2u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_PT_ACC_TOQ_REQ_RESP_HSC1_CONTROL_NOT_ALLOWED_FOR_ERROR_CHOICE (3u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_PT_ACC_TOQ_REQ_RESP_HSC1_PRE_CONDITION_NOT_SATISFIED_CHOICE (4u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_PT_ACC_TOQ_REQ_RESP_HSC1_RESERVED_5_CHOICE (5u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_PT_ACC_TOQ_REQ_RESP_HSC1_RESERVED_6_CHOICE (6u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_PT_ACC_TOQ_REQ_RESP_HSC1_RESERVED_7_CHOICE (7u)

#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_BRK_AST_REQ_VAL_SPD_AST_SYS_HSC1___0X0___0X3_FF__CHOICE (0u)

#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_TRGT_SPD_SRC_STS_HSC1_UNDEFINED_CHOICE (0u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_TRGT_SPD_SRC_STS_HSC1_CAMERA_CHOICE (1u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_TRGT_SPD_SRC_STS_HSC1_NAVIGATION_CHOICE (2u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_TRGT_SPD_SRC_STS_HSC1_FAULT_CHOICE (3u)

#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_BRK_AST_REQ_A_SPD_AST_SYS_HSC1_OFF_CHOICE (0u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_BRK_AST_REQ_A_SPD_AST_SYS_HSC1_ON_CHOICE (1u)

#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_ACCEL_OVRD_HSC1_FALSE_CHOICE (0u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_ACCEL_OVRD_HSC1_TRUE_CHOICE (1u)

#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_SPD_AST_SYS_STS_ECMHSC1_OFF_CHOICE (0u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_SPD_AST_SYS_STS_ECMHSC1_ACTIVE___LIMITING__CHOICE (1u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_SPD_AST_SYS_STS_ECMHSC1_STANDBY_CHOICE (2u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_SPD_AST_SYS_STS_ECMHSC1_ENTRY__CONDITIONS__INCORRECT_CHOICE (3u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_SPD_AST_SYS_STS_ECMHSC1_OVERSPEED_CHOICE (4u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_SPD_AST_SYS_STS_ECMHSC1_FAULT_CHOICE (5u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_SPD_AST_SYS_STS_ECMHSC1_ACTIVE___PASSIVE__CHOICE (6u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_SPD_AST_SYS_STS_ECMHSC1_RESERVED_CHOICE (7u)

#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_SPD_AST_SYS_TRGT_SPD_HSC1___0X0___0X7_FFF__CHOICE (0u)

#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_PT_ADAS_ALV_RCHSC1___0X0___0X_F__CHOICE (0u)

#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_PT_ACC_TOQ_REQ_RESP_PVHSC1___0X0___0X_F__CHOICE (0u)

#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_SPD_AST_MD_ECMHSC1_OFF_CHOICE (0u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_SPD_AST_MD_ECMHSC1_SLIF_CHOICE (1u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_SPD_AST_MD_ECMHSC1_MSA_CHOICE (2u)
#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_SPD_AST_MD_ECMHSC1_ISA_CHOICE (3u)

#define CANVEHICLE_VCU_HSC1_ECM_FR_P27_BRK_ASS_REQ_PV_SPD_AST_SYS_HSC1___0X0___0X7_FF__CHOICE (0u)

#define CANVEHICLE_VCU_HSC1_TCM_FR_P01_TR_OTPT_ROTL_STS_ROT_DIRCN_HSC1_UNKNOWN_CHOICE (0u)
#define CANVEHICLE_VCU_HSC1_TCM_FR_P01_TR_OTPT_ROTL_STS_ROT_DIRCN_HSC1_FORWARD_CHOICE (1u)
#define CANVEHICLE_VCU_HSC1_TCM_FR_P01_TR_OTPT_ROTL_STS_ROT_DIRCN_HSC1_REVERSE_CHOICE (2u)
#define CANVEHICLE_VCU_HSC1_TCM_FR_P01_TR_OTPT_ROTL_STS_ROT_DIRCN_HSC1_UNDEFINED_CHOICE (3u)

#define CANVEHICLE_VCU_HSC1_TCM_FR_P01_TR_OTPT_ROTL_STS_VHSC1_VALID_CHOICE (0u)
#define CANVEHICLE_VCU_HSC1_TCM_FR_P01_TR_OTPT_ROTL_STS_VHSC1_INVALID_CHOICE (1u)



//2.定义CAN信息帧的数据类型。
typedef  struct  _ZCAN_CAN_OBJ{
    UINT    ID;
    UINT    TimeStamp;
    BYTE    TimeFlag;
    BYTE    SendType;
    BYTE    RemoteFlag;//是否是远程帧
    BYTE    ExternFlag;//是否是扩展帧
    BYTE    DataLen;
    BYTE    Data[8];
    BYTE    Reserved[3];
}ZCAN_CAN_OBJ,*PZCAN_CAN_OBJ;



typedef  struct  _DBC_INFO{
    int matrix_column_value;
    int matrix_row;
    int frequency;
    int matrix_row_value;
    int timestamp;
    int calcul_batch;
    int id_num_can;
}DBC_INFO;


/**
 * Signals in message BMS_HSC1_FrP02.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_bms_hsc1_fr_p02_t {
    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bsc_sta_h1_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_main_relay_sts_h1_hsc1;
};

/**
 * Signals in message BMS_HSC1_FrP07.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_bms_hsc1_fr_p07_t {
    /**
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chrg_sts_io_h1_hsc1;

    /**
     * Battery Management System Charger Plug Connection Indication On
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chrgr_plug_cnctn_io_h1_hsc1;
};

/**
 * Signals in message BMS_HSC1_FrP11.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_bms_hsc1_fr_p11_t {
    /**
     * Range: 0..255 (-40..87.5 DegC)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t bms_cell_max_tem_h1_hsc1;

    /**
     * Range: 0..255 (-40..87.5 degC)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t bms_clnt_tem_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cell_max_tem_v_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_clnt_tem_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_onbd_chrgr_plug_on_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_balc_rmndng_req_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_flt_ind_req_hsc1;

    /**
     * High Voltage Battery Shut Off
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hv_bat_shut_off_hsc1;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t bms_onbd_chrgr_clnt_pump_pwm_req_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cell_min_tem_v_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chlr_off_req_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_clnt_pump_sts_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ofbd_chrgr_plug_on_h1_hsc1;

    /**
     * Charger System Keep Awake
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chrgr_sys_keep_awk_hsc1;

    /**
     * Range: 0..255 (-40..87.5 Deg C)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t bms_cell_min_tem_h1_hsc1;

    /**
     * Range: 0..2047 (0..2047 km)
     * Scale: 1
     * Offset: 0
     */
    uint16_t veh_elec_rng_h1_hsc1;
};

/**
 * Signals in message BMS_HSC1_FrP12.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_bms_hsc1_fr_p12_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hv_bat_elec_enrg_avg_rate_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avlbl_enrg_v_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elec_enrg_avg_rst_perfd_hsc1;

    /**
     * Range: 0..1023 (-20..82.3 kwh/100km)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t hv_bat_elec_enrg_avg_rate_h1_hsc1;

    /**
     * Range: 0..255 (0..102 kwh)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t bms_avlbl_enrg_h1_hsc1;
};

/**
 * Signals in message BMS_HSC1_FrP13.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_bms_hsc1_fr_p13_t {
    /**
     * Range: 0..1023 (0..102.3 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_pack_soc_dsp_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pack_vol_v_h1_hsc1;

    /**
     * Battery Management System Pack State Of Charge Display Validity
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pack_soc_dsp_v_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pack_crnt_v_h1_hsc1;

    /**
     * Range: 0..4095 (0..1023.75 V)
     * Scale: 0.25
     * Offset: 0
     */
    uint16_t bms_pack_vol_h1_hsc1;

    /**
     * Range: 0..65535 (-1000..2276.75 A)
     * Scale: 0.05
     * Offset: -1000
     */
    uint16_t bms_pack_crnt_h1_hsc1;
};

/**
 * Signals in message BMS_HSC1_FrP14.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_bms_hsc1_fr_p14_t {
    /**
     * Range: 0..40 (0..20 -)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t bms_reser_durtn_time_dsp_cmd_h1_hsc1;

    /**
     * Range: 0..23 (0..23 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_reser_st_hour_dsp_cmd_h1_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chrg_sts_h1_hsc1;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_reser_st_time_dsp_cmd_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chrg_ctrl_dsp_cmd_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_reser_ctrl_dsp_cmd_hsc1;
};

/**
 * Signals in message BMS_HSC1_FrP15.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_bms_hsc1_fr_p15_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_reser_chrg_md_dsp_cmd_h1_hsc1;

    /**
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_reser_chrg_rng_dsp_cmd_h1_hsc1;

    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_reser_chrg_enrg_dsp_cmd_h1_hsc1;

    /**
     * Range: 0..1023 (0..102.3 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_reser_trgt_soc_dsp_cmd_h1_hsc1;

    /**
     * Range: 0..32 (0..32 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_reser_max_crnt_dsp_cmd_h1_hsc1;
};

/**
 * Signals in message BMS_HSC1_FrP16.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_bms_hsc1_fr_p16_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_wrls_chrgng_resp_h1_hsc1;

    /**
     * Range: 0..2047 (0..2047 minute)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_chrgng_rmnng_st_time_h1_hsc1;

    /**
     * Range: 0..1023 (0..1023 min)
     * Scale: 1
     * Offset: 0
     */
    uint16_t chrgng_rmnng_time_h1_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_wrls_chrgn_flt_reason_h1_hsc1;

    /**
     * Range: 0..1023 (-20..82.3 kwh/100km)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t elec_csump_per_km_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elec_csump_per_km_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chrgng_rmnng_time_v_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crnt_avg_elec_csump_vhsc1;

    /**
     * Range: 0..1023 (-20..82.3 kwh/100km)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t crnt_avg_elec_csump_hsc1;
};

/**
 * Signals in message DIAG_ACL_Req.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_acl_req_t {
    /**
     * End of life activation of on-board pyrotechnic request
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t acl_req;
};

/**
 * Signals in message DIAG_ACL_Resp.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_acl_resp_t {
    /**
     * End of life activation of on-board pyrotechnic response
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t acl_resp;
};

/**
 * Signals in message DIAG_DTCInfo_BMS.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_dtc_info_bms_t {
    /**
     * DTC Infomation of BMS
     * 
     * The length of DTC information signal is 7 bytes.
     * Byte 0 is MSB (most significant byte), and Byte 6 is LSB (least significant byte).
     * For each byte, Bit 7 is msb (most significant bit), and Bit 0 is lsb (least significant bit).
     * 
     * Byte 0:
     * Bit (7-4): DTC Serious Level
     * Bit (3-0): Reserved
     * 
     * Byte 1:
     * Bit (7-0): Reserved
     * 
     * Byte 2:
     * Bit (7-0): DTCHighByte
     * 
     * Byte 3:
     * Bit (7-0): DTCLowByte
     * 
     * Byte 4:
     * Bit (7-0): DTCFailureTypeByte
     * 
     * Byte 5:
     * Bit 7: warningIndicatorRequested
     * Bit 6: testNotCompletedThisOperationCycle
     * Bit 5: testFailedSinceLastClear
     * Bit 4: testNotCompletedSinceLastClear
     * Bit 3: confirmedDTC
     * Bit 2: pendingDTC
     * Bit 1: testFailedThisOperationCycle
     * Bit 0: testFailed
     * 
     * Byte 6:
     * Bit (7-0): DTC Type
     * 
     * For more detail, please refer to SMTC 2 800 004.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t dtc_infomation_bmshsc1;
};

/**
 * Signals in message DIAG_DTCInfo_HCU.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_dtc_info_hcu_t {
    /**
     * DTC Infomation of HCU
     * 
     * The length of DTC information signal is 7 bytes.
     * Byte 0 is MSB (most significant byte), and Byte 6 is LSB (least significant byte).
     * For each byte, Bit 7 is msb (most significant bit), and Bit 0 is lsb (least significant bit).
     * 
     * Byte 0:
     * Bit (7-4): DTC Serious Level
     * Bit (3-0): Reserved
     * 
     * Byte 1:
     * Bit (7-0): Reserved
     * 
     * Byte 2:
     * Bit (7-0): DTCHighByte
     * 
     * Byte 3:
     * Bit (7-0): DTCLowByte
     * 
     * Byte 4:
     * Bit (7-0): DTCFailureTypeByte
     * 
     * Byte 5:
     * Bit 7: warningIndicatorRequested
     * Bit 6: testNotCompletedThisOperationCycle
     * Bit 5: testFailedSinceLastClear
     * Bit 4: testNotCompletedSinceLastClear
     * Bit 3: confirmedDTC
     * Bit 2: pendingDTC
     * Bit 1: testFailedThisOperationCycle
     * Bit 0: testFailed
     * 
     * Byte 6:
     * Bit (7-0): DTC Type
     * 
     * For more detail, please refer to SMTC 2 800 004.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t dtc_infomation_hcuhsc1;
};

/**
 * Signals in message DIAG_DTCInfo_HVDCDC.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_dtc_info_hvdcdc_t {
    /**
     * DTC Infomation of HVDCDC
     * 
     * The length of DTC information signal is 7 bytes.
     * Byte 0 is MSB (most significant byte), and Byte 6 is LSB (least significant byte).
     * For each byte, Bit 7 is msb (most significant bit), and Bit 0 is lsb (least significant bit).
     * 
     * Byte 0:
     * Bit (7-4): DTC Serious Level
     * Bit (3-0): Reserved
     * 
     * Byte 1:
     * Bit (7-0): Reserved
     * 
     * Byte 2:
     * Bit (7-0): DTCHighByte
     * 
     * Byte 3:
     * Bit (7-0): DTCLowByte
     * 
     * Byte 4:
     * Bit (7-0): DTCFailureTypeByte
     * 
     * Byte 5:
     * Bit 7: warningIndicatorRequested
     * Bit 6: testNotCompletedThisOperationCycle
     * Bit 5: testFailedSinceLastClear
     * Bit 4: testNotCompletedSinceLastClear
     * Bit 3: confirmedDTC
     * Bit 2: pendingDTC
     * Bit 1: testFailedThisOperationCycle
     * Bit 0: testFailed
     * 
     * Byte 6:
     * Bit (7-0): DTC Type
     * 
     * For more detail, please refer to SMTC 2 800 004.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t dtc_infomation_hvdcdchsc1;
};

/**
 * Signals in message DIAG_DTCInfo_ISC.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_dtc_info_isc_t {
    /**
     * DTC Infomation of ISC
     * 
     * The length of DTC information signal is 7 bytes.
     * Byte 0 is MSB (most significant byte), and Byte 6 is LSB (least significant byte).
     * For each byte, Bit 7 is msb (most significant bit), and Bit 0 is lsb (least significant bit).
     * 
     * Byte 0:
     * Bit (7-4): DTC Serious Level
     * Bit (3-0): Reserved
     * 
     * Byte 1:
     * Bit (7-0): Reserved
     * 
     * Byte 2:
     * Bit (7-0): DTCHighByte
     * 
     * Byte 3:
     * Bit (7-0): DTCLowByte
     * 
     * Byte 4:
     * Bit (7-0): DTCFailureTypeByte
     * 
     * Byte 5:
     * Bit 7: warningIndicatorRequested
     * Bit 6: testNotCompletedThisOperationCycle
     * Bit 5: testFailedSinceLastClear
     * Bit 4: testNotCompletedSinceLastClear
     * Bit 3: confirmedDTC
     * Bit 2: pendingDTC
     * Bit 1: testFailedThisOperationCycle
     * Bit 0: testFailed
     * 
     * Byte 6:
     * Bit (7-0): DTC Type
     * 
     * For more detail, please refer to SMTC 2 800 004.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t dtc_infomation_ischsc1;
};

/**
 * Signals in message DIAG_DTCInfo_SAC.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_dtc_info_sac_t {
    /**
     * DTC Infomation of SAC
     * 
     * The length of DTC information signal is 7 bytes.
     * Byte 0 is MSB (most significant byte), and Byte 6 is LSB (least significant byte).
     * For each byte, Bit 7 is msb (most significant bit), and Bit 0 is lsb (least significant bit).
     * 
     * Byte 0:
     * Bit (7-4): DTC Serious Level
     * Bit (3-0): Reserved
     * 
     * Byte 1:
     * Bit (7-0): Reserved
     * 
     * Byte 2:
     * Bit (7-0): DTCHighByte
     * 
     * Byte 3:
     * Bit (7-0): DTCLowByte
     * 
     * Byte 4:
     * Bit (7-0): DTCFailureTypeByte
     * 
     * Byte 5:
     * Bit 7: warningIndicatorRequested
     * Bit 6: testNotCompletedThisOperationCycle
     * Bit 5: testFailedSinceLastClear
     * Bit 4: testNotCompletedSinceLastClear
     * Bit 3: confirmedDTC
     * Bit 2: pendingDTC
     * Bit 1: testFailedThisOperationCycle
     * Bit 0: testFailed
     * 
     * Byte 6:
     * Bit (7-0): DTC Type
     * 
     * For more detail, please refer to SMTC 2 800 004.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t dtc_infomation_sachsc1;
};

/**
 * Signals in message DIAG_DTCInfo_SCU.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_dtc_info_scu_t {
    /**
     * DTC Infomation of SCU
     * 
     * The length of DTC information signal is 7 bytes.
     * Byte 0 is MSB (most significant byte), and Byte 6 is LSB (least significant byte).
     * For each byte, Bit 7 is msb (most significant bit), and Bit 0 is lsb (least significant bit).
     * 
     * Byte 0:
     * Bit (7-4): DTC Serious Level
     * Bit (3-0): Reserved
     * 
     * Byte 1:
     * Bit (7-0): Reserved
     * 
     * Byte 2:
     * Bit (7-0): DTCHighByte
     * 
     * Byte 3:
     * Bit (7-0): DTCLowByte
     * 
     * Byte 4:
     * Bit (7-0): DTCFailureTypeByte
     * 
     * Byte 5:
     * Bit 7: warningIndicatorRequested
     * Bit 6: testNotCompletedThisOperationCycle
     * Bit 5: testFailedSinceLastClear
     * Bit 4: testNotCompletedSinceLastClear
     * Bit 3: confirmedDTC
     * Bit 2: pendingDTC
     * Bit 1: testFailedThisOperationCycle
     * Bit 0: testFailed
     * 
     * Byte 6:
     * Bit (7-0): DTC Type
     * 
     * For more detail, please refer to SMTC 2 800 004.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t dtc_infomation_scuhsc1;
};

/**
 * Signals in message DIAG_DTCInfo_SDM.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_dtc_info_sdm_t {
    /**
     * DTC Infomation of SDM
     * 
     * The length of DTC information signal is 7 bytes.
     * Byte 0 is MSB (most significant byte), and Byte 6 is LSB (least significant byte).
     * For each byte, Bit 7 is msb (most significant bit), and Bit 0 is lsb (least significant bit).
     * 
     * Byte 0:
     * Bit (7-4): DTC Serious Level
     * Bit (3-0): Reserved
     * 
     * Byte 1:
     * Bit (7-0): Reserved
     * 
     * Byte 2:
     * Bit (7-0): DTCHighByte
     * 
     * Byte 3:
     * Bit (7-0): DTCLowByte
     * 
     * Byte 4:
     * Bit (7-0): DTCFailureTypeByte
     * 
     * Byte 5:
     * Bit 7: warningIndicatorRequested
     * Bit 6: testNotCompletedThisOperationCycle
     * Bit 5: testFailedSinceLastClear
     * Bit 4: testNotCompletedSinceLastClear
     * Bit 3: confirmedDTC
     * Bit 2: pendingDTC
     * Bit 1: testFailedThisOperationCycle
     * Bit 0: testFailed
     * 
     * Byte 6:
     * Bit (7-0): DTC Type
     * 
     * For more detail, please refer to SMTC 2 800 004.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t dtc_infomation_sdmhsc1;
};

/**
 * Signals in message DIAG_DTCInfo_TC.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_dtc_info_tc_t {
    /**
     * DTC Infomation of TC
     * 
     * The length of DTC information signal is 7 bytes.
     * Byte 0 is MSB (most significant byte), and Byte 6 is LSB (least significant byte).
     * For each byte, Bit 7 is msb (most significant bit), and Bit 0 is lsb (least significant bit).
     * 
     * Byte 0:
     * Bit (7-4): DTC Serious Level
     * Bit (3-0): Reserved
     * 
     * Byte 1:
     * Bit (7-0): Reserved
     * 
     * Byte 2:
     * Bit (7-0): DTCHighByte
     * 
     * Byte 3:
     * Bit (7-0): DTCLowByte
     * 
     * Byte 4:
     * Bit (7-0): DTCFailureTypeByte
     * 
     * Byte 5:
     * Bit 7: warningIndicatorRequested
     * Bit 6: testNotCompletedThisOperationCycle
     * Bit 5: testFailedSinceLastClear
     * Bit 4: testNotCompletedSinceLastClear
     * Bit 3: confirmedDTC
     * Bit 2: pendingDTC
     * Bit 1: testFailedThisOperationCycle
     * Bit 0: testFailed
     * 
     * Byte 6:
     * Bit (7-0): DTC Type
     * 
     * For more detail, please refer to SMTC 2 800 004.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t dtc_infomation_tchsc1;
};

/**
 * Signals in message DIAG_FuncReq_HSC1.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_func_req_hsc1_t {
    /**
     * Diagnostic functional address request
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t diagnostic_func_addr_req_h1;
};

/**
 * Signals in message DIAG_PhysReq_BMS.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_phys_req_bms_t {
    /**
     * Diagnostic request to BMS
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t diagnostic_req_bms_h1;
};

/**
 * Signals in message DIAG_PhysReq_HCU.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_phys_req_hcu_t {
    /**
     * Diagnostic request to HCU
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t diagnostic_req_hcu_h1;
};

/**
 * Signals in message DIAG_PhysReq_HVDCDC.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_phys_req_hvdcdc_t {
    /**
     * Diagnostic request to HVDCDC
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t diagnostic_req_hvdcdc_h1;
};

/**
 * Signals in message DIAG_PhysReq_ISC.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_phys_req_isc_t {
    /**
     * Diagnostic request to ISC
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t diagnostic_req_isc_h1;
};

/**
 * Signals in message DIAG_PhysReq_SAC.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_phys_req_sac_t {
    /**
     * Diagnostic request to SAC
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t diagnostic_req_sac_h1;
};

/**
 * Signals in message DIAG_PhysReq_SCU.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_phys_req_scu_t {
    /**
     * Diagnostic request to SCU
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t diagnostic_req_scu_h1;
};

/**
 * Signals in message DIAG_PhysReq_SDM.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_phys_req_sdm_t {
    /**
     * Diagnostic request to SDM
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t diagnostic_req_sdm_h1;
};

/**
 * Signals in message DIAG_PhysReq_TC.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_phys_req_tc_t {
    /**
     * Diagnostic request to TC
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t diagnostic_req_tc_h1;
};

/**
 * Signals in message DIAG_PhysResp_BMS.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_phys_resp_bms_t {
    /**
     * Diagnostic response from BMS
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t diagnostic_resp_bms;
};

/**
 * Signals in message DIAG_PhysResp_HCU.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_phys_resp_hcu_t {
    /**
     * Diagnostic response from HCU
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t diagnostic_resp_hcu;
};

/**
 * Signals in message DIAG_PhysResp_HVDCDC.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_phys_resp_hvdcdc_t {
    /**
     * Diagnostic response from HVDCDC
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t diagnostic_resp_hvdcdc;
};

/**
 * Signals in message DIAG_PhysResp_ISC.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_phys_resp_isc_t {
    /**
     * Diagnostic response from ISC
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t diagnostic_resp_isc;
};

/**
 * Signals in message DIAG_PhysResp_SAC.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_phys_resp_sac_t {
    /**
     * Diagnostic response from SAC
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t diagnostic_resp_sac;
};

/**
 * Signals in message DIAG_PhysResp_SCU.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_phys_resp_scu_t {
    /**
     * Diagnostic response from SCU
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t diagnostic_resp_scu;
};

/**
 * Signals in message DIAG_PhysResp_SDM.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_phys_resp_sdm_t {
    /**
     * Diagnostic response from SDM
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t diagnostic_resp_sdm;
};

/**
 * Signals in message DIAG_PhysResp_TC.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_diag_phys_resp_tc_t {
    /**
     * Diagnostic response from TC
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t diagnostic_resp_tc;
};

/**
 * Signals in message ECM_HSC1_FrP00.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_ecm_hsc1_fr_p00_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t en_run_ahsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t en_spd_sts_hsc1;

    /**
     * Range: 0..65535.2 (0..16383.8 rpm)
     * Scale: 0.25
     * Offset: 0
     */
    uint16_t en_spd_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t accel_actu_pos_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccahsc1;

    /**
     * Range: 0..254.9999107500312374890668788 (0..100 %)
     * Scale: 0.392157
     * Offset: 0
     */
    uint8_t accel_actu_pos_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pt_brk_pdl_dscrt_inpt_sts_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pt_brk_pdl_dscrt_inpt_sts_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t en12_volt_str_mot_cmdd_on_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t en_ctrlr_run_crk_trml_sts_hsc1;
};

/**
 * Signals in message ECM_HSC1_FrP01.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_ecm_hsc1_fr_p01_t {
    /**
     * Range: 0..254.9999107500312374890668788 (0..100 %)
     * Scale: 0.392157
     * Offset: 0
     */
    uint8_t accel_efctv_pos_hsc1;
};

/**
 * Signals in message ECM_HSC1_FrP03.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_ecm_hsc1_fr_p03_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t en_toq_actu_extd_rng_vhsc1;

    /**
     * Range: 0..4095 (-848..1199.5 Nm)
     * Scale: 0.5
     * Offset: -848
     */
    uint16_t en_toq_actu_extd_rng_hsc1;
};

/**
 * Signals in message ECM_HSC1_FrP07.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_ecm_hsc1_fr_p07_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t en_ass_sta_hsc1;
};

/**
 * Signals in message ECM_HSC1_FrP09.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_ecm_hsc1_fr_p09_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t en_toq_max_extd_rng_vhsc1;

    /**
     * Range: 0..4095 (-848..1199.5 Nm)
     * Scale: 0.5
     * Offset: -848
     */
    uint16_t en_toq_max_extd_rng_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t en_toq_min_extd_rng_vhsc1;

    /**
     * Range: 0..4095 (-848..1199.5 Nm)
     * Scale: 0.5
     * Offset: -848
     */
    uint16_t en_toq_min_extd_rng_hsc1;
};

/**
 * Signals in message ECM_HSC1_FrP10.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_ecm_hsc1_fr_p10_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_flt_prst_hsc1;
};

/**
 * Signals in message ECM_HSC1_FrP12.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_ecm_hsc1_fr_p12_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message ECM_HSC1_FrP14.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_ecm_hsc1_fr_p14_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t en_clnt_tem_vhsc1;

    /**
     * Range: 0..255 (-40..215 deg C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t en_clnt_tem_hsc1;
};

/**
 * Signals in message GW_HSC1_AC_FrP01.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_ac_fr_p01_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_on_off_dsp_cmd_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dfst_on_dsp_cmd_hsc1;
};

/**
 * Signals in message GW_HSC1_AC_FrP02.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_ac_fr_p02_t {
    /**
     * Range: 0..253 (-40..86.5 degC)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t ac_ambt_tem_hsc1;

    /**
     * Range: 0..255 (-40..87.5 ¡æ)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t ac_evapo_tem_hsc1;

    /**
     * Air Conditioning Ambient Temperature Validity
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_ambt_tem_vhsc1;
};

/**
 * Signals in message GW_HSC1_AC_FrP03.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_ac_fr_p03_t {
    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t ac_coolng_fan_pwm_req_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_compr_req_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_coolng_fan_lvl_req_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hv_bat_coolng_sys_enbd_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_hi_side_flud_prs_vhsc1;

    /**
     * Range: 0..255 (0..3570 kPaG)
     * Scale: 14
     * Offset: 0
     */
    uint8_t ac_hi_side_flud_prs_hsc1;
};

/**
 * Signals in message GW_HSC1_AC_FrP04.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_ac_fr_p04_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ots_air_tmp_vhsc1;

    /**
     * Range: 0..255 (-40..87.5 deg C)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t ots_air_tmp_hsc1;
};

/**
 * Signals in message GW_HSC1_AC_FrP05.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_ac_fr_p05_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eac_vol_vhsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t esspwm_clnt_pump_sts_hsc1;

    /**
     * Range: 0..255 (0..7.65 kW)
     * Scale: 0.03
     * Offset: 0
     */
    uint8_t ac_compr_actu_pwr_hsc1;

    /**
     * Range: 0..4093 (0..1023.25 -)
     * Scale: 0.25
     * Offset: 0
     */
    uint16_t ac_compr_actu_hvhsc1;

    /**
     * Range: 0..4095 (0..1023.75 -)
     * Scale: 0.25
     * Offset: 0
     */
    uint16_t eac_vol_hsc1;
};

/**
 * Signals in message GW_HSC1_AC_FrP06.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_ac_fr_p06_t {
    /**
     * Range: 0..255 (0..7.65 kW)
     * Scale: 0.03
     * Offset: 0
     */
    uint8_t ac_htr_pwr_hsc1;

    /**
     * Range: 0..255 (0..25.5 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t ac_pwr_hsc1;
};

/**
 * Signals in message GW_HSC1_AC_FrP07.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_ac_fr_p07_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t heat_pump_md_hsc1;
};

/**
 * Signals in message GW_HSC1_BCM_FrP04.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_bcm_fr_p04_t {
    /**
     * Rear Right Door Open Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rr_door_open_sts_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvr_door_open_sts_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t main_beam_lght_on_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dipd_beam_lght_on_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t l_dircn_iohsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_dircn_iohsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rr_fog_lght_on_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t airbag_wrnng_ind_fhsc1;

    /**
     * Vehicle Locking State
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_lckng_sta_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bnt_open_sts_hsc1;

    /**
     * Vehicle Inertia Switch Triggered
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_inertia_sw_trigd_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dsp_meas_sys_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t frt_psng_door_open_sts_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rl_door_open_sts_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_side_lght_sts_hsc1;
};

/**
 * Signals in message GW_HSC1_BCM_FrP06.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_bcm_fr_p06_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rvs_sts_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rvs_req_hsc1;

    /**
     * Remote Vehicle Start Request Active
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rvs_req_ahsc1;
};

/**
 * Signals in message GW_HSC1_BCM_FrP07.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_bcm_fr_p07_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sys_bpm_enbd_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sys_bpmhsc1;
};

/**
 * Signals in message GW_HSC1_BCM_FrS02.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_bcm_fr_s02_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t bcm_immo_data1_hsc1;
};

/**
 * Signals in message GW_HSC1_BCM_FrS04.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_bcm_fr_s04_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t bcm_immo_data2_hsc1;
};

/**
 * Signals in message GW_HSC1_BCM_FrS06.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_bcm_fr_s06_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t bcm_immo_data6_hsc1;
};

/**
 * Signals in message GW_HSC1_BCM_FrS07.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_bcm_fr_s07_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t bcm_immo_data7_hsc1;
};

/**
 * Signals in message GW_HSC1_BCM_FrS12.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_bcm_fr_s12_t {
    /**
     * Range: -1..0 (-1..0 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t pf_to_tc_immo_resp_hsc1;
};

/**
 * Signals in message GW_HSC1_BCM_FrS14.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_bcm_fr_s14_t {
    /**
     * Node Authentication Challenge 1
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t node_authn_chlg1_hsc1;
};

/**
 * Signals in message GW_HSC1_BCM_FrS15.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_bcm_fr_s15_t {
    /**
     * Range: -1..0 (-1..0 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t pf_to_isc_immo_resp_hsc1;
};

/**
 * Signals in message GW_HSC1_EPB_FrP00.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_epb_fr_p00_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_sw_sts_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_sw_sts_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epbcc_cancl_reqd_hsc1;
};

/**
 * Signals in message GW_HSC1_EPB_FrP01.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_epb_fr_p01_t {
    /**
     * Electric Park Brake Application Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_appcn_sts_hsc1;

    /**
     * Electric Park Brake Application Status Protection Value
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_appcn_sts_pvhsc1;
};

/**
 * Signals in message GW_HSC1_FICM_FrP02.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_ficm_fr_p02_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rstr_fctry_defts_req_hsc1;
};

/**
 * Signals in message GW_HSC1_FICM_FrP08.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_ficm_fr_p08_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spd_ast_md_ficmvhsc1;

    /**
     * Range: 0..32766.976 (0..511.984 -)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t ancpt_road_spd_nav_hsc1;

    /**
     * Range: 0..32766.976 (0..511.984 -)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t trgt_spd_req_nav_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spd_ast_md_ficmhsc1;

    /**
     * Range: 0..63 (-100..490.625 m)
     * Scale: 9.375
     * Offset: -100
     */
    uint8_t dist_to_trgt_nav_hsc1;

    /**
     * Speed Assist Request Status Navigation
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spd_ast_req_sts_nav_hsc1;
};

/**
 * Signals in message GW_HSC1_FICM_FrP14.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_ficm_fr_p14_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ficm_chrg_ctrl_req_hsc1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ficm_reser_chrg_md_req_hsc1;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ficm_reser_st_time_hsc1;

    /**
     * Range: 0..40 (0..20 -)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t ficm_reser_durtn_time_hsc1;

    /**
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ficm_reser_chrg_rng_hsc1;

    /**
     * Range: 0..32 (0..32 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ficm_reser_max_crnt_hsc1;

    /**
     * Range: 0..1023 (0..102.3 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ficm_reser_trgt_sochsc1;

    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ficm_reser_chrg_enrg_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ficm_reser_ctrl_req_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ficm_wrls_chrgng_req_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ficm_reser_tgt_socvhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ficm_reser_chrg_rng_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ficm_reser_chrg_enrg_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ficm_reser_durtn_time_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ficm_reser_max_crnt_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ficm_reser_st_time_vhsc1;
};

/**
 * Signals in message GW_HSC1_FrP00.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_fr_p00_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ecm_avlbly_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcm_avlbly_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sdm_avlbly_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t scs_avlbly_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t scu_avlbly_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tccm_avlbly_h1_hsc1;

    /**
     * EPS Available
     * 
     * Detect if specific ECU is available according to node missing strategy by gateway ECU.
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eps_avlbly_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epb_avlbly_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sas_avlbly_h1_hsc1;

    /**
     * DHL Available
     * 
     * Detect if specific ECU is available according to node missing strategy by gateway ECU.
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dhl_avlbly_h1_hsc1;

    /**
     * HCU Available
     * 
     * Detect if specific ECU is available according to node missing strategy by gateway ECU.
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hcu_avlbly_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fvcm_avlbly_h1_hsc1;

    /**
     * ESCL Available
     * 
     * Detect if specific ECU is available according to node missing strategy by gateway ECU.
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t msm_avlbly_h1_hsc1;

    /**
     * PLCM Available
     * 
     * Detect if specific ECU is available according to node missing strategy by gateway ECU.
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t plcm_avlbly_h1_hsc1;

    /**
     * TC Available
     * 
     * Detect if specific ECU is available according to node missing strategy by gateway ECU.
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tc_avlbly_h1_hsc1;

    /**
     * ISC Available
     * 
     * Detect if specific ECU is available according to node missing strategy by gateway ECU.
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t isc_avlbly_h1_hsc1;

    /**
     * BMS Available
     * 
     * Detect if specific ECU is available according to node missing strategy by gateway ECU.
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avlbly_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bcm_avlbly_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ipc_avlbly_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_avlbly_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peps_avlbly_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pmdc_avlbly_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_avlbly_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ficm_avlbly_h1_hsc1;

    /**
     * ESCL Available
     * 
     * Detect if specific ECU is available according to node missing strategy by gateway ECU.
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t escl_avlbly_h1_hsc1;

    /**
     * PACM Available
     * 
     * Detect if specific ECU is available according to node missing strategy by gateway ECU.
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pacm_avlbly_h1_hsc1;

    /**
     * TPMS Available
     * 
     * Detect if specific ECU is available according to node missing strategy by gateway ECU.
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tpms_avlbly_h1_hsc1;

    /**
     * RDA Available
     * 
     * Detect if specific ECU is available according to node missing strategy by gateway ECU.
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rda_avlbly_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvdcdc_avlbly_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t apa_avlbly_h1_hsc1;

    /**
     * SAVM Available
     * 
     * Detect if specific ECU is available according to node missing strategy by gateway ECU.
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t savm_avlbly_h1_hsc1;

    /**
     * EHBS Available
     * 
     * Detect if specific ECU is available according to node missing strategy by gateway ECU.
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ehbs_avlbly_h1_hsc1;
};

/**
 * Signals in message GW_HSC1_FrP01.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_fr_p01_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sys_vol_md_v_h1_hsc1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sys_opnl_md_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwr_md_mstr_run_crk_a_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwr_md_mstr_accry_a_h1_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sys_pwr_md_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bpm_mstr_avlbly_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sys_pwr_md_v_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sys_vol_v_h1_hsc1;

    /**
     * Range: 0..255 (3..28.5 V)
     * Scale: 0.1
     * Offset: 3
     */
    uint8_t sys_vol_h1_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sys_vol_md_h1_hsc1;
};

/**
 * Signals in message GW_HSC1_FrP02.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_fr_p02_t {
    /**
     * Brake Pedal Position
     *
     * Range: 0..254.9999107500312374890668788 (0..100 %)
     * Scale: 0.392157
     * Offset: 0
     */
    uint8_t brk_pdl_pos_h1_hsc1;

    /**
     * Brake Pedal Position Validity
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk_pdl_pos_v_h1_hsc1;

    /**
     * Security Key Invalid
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t scurt_key_invd_hsc1;
};

/**
 * Signals in message GW_HSC1_FrP04.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_fr_p04_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_sw_sts_cancl_sw_a_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_sw_sts_on_sw_a_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_sw_sts_rsm_sw_a_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_sw_sts_set_sw_a_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_sw_sts_spd_inc_sw_a_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_sw_sts_spd_dec_sw_a_h1_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_sw_sts_sw_data_intgty_h1_hsc1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_sw_sts_pv_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_sw_sts_dist_inc_sw_a_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_sw_sts_dist_dec_sw_a_h1_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cc_sw_sts_alv_rc_h1_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nrcdscu_req_alv_rchsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nrcd_shifter_pos_reqd_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nrcd_toq_req_sts_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nrcd_crp_spd_req_sts_hsc1;

    /**
     * Range: 0..63 (0..6.3 km/h)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t nrcd_crp_spd_req_val_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nrcdvcu_req_alv_rchsc1;

    /**
     * Range: 0..4095 (-848..1199.5 Nm)
     * Scale: 0.5
     * Offset: -848
     */
    uint16_t nrcd_toq_req_val_hsc1;
};

/**
 * Signals in message GW_HSC1_FrP08.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_fr_p08_t {
    /**
     * Range: 0..16777200 (0..16777200 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t veh_odo_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_odo_v_h1_hsc1;
};

/**
 * Signals in message GW_HSC1_FrP09.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_fr_p09_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t sdm_cal_priy_key_hsc1;

    /**
     * Range: 0..252.9984 (8.5..16.4062 V)
     * Scale: 0.03125
     * Offset: 8.5
     */
    uint8_t dcdc_vol_stpt_h1_hsc1;

    /**
     * Vehicle Driving Mode
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_drvng_md_h1_hsc1;
};

/**
 * Signals in message GW_HSC1_FrP10.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_fr_p10_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t otsd_air_tem_cr_val_msk_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t otsd_air_tem_cr_val_v_h1_hsc1;

    /**
     * Range: 0..255 (-40..87.5 degC)
     * Scale: 0.5
     * Offset: -40
     */
    uint8_t otsd_air_tem_cr_val_h1_hsc1;
};

/**
 * Signals in message GW_HSC1_FrP12.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_fr_p12_t {
    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t dim_lght_lvl_hsc1;
};

/**
 * Signals in message GW_HSC1_FrP13.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_fr_p13_t {
    /**
     * Range: 0..255 (-12.7..12.8 -)
     * Scale: 0.1
     * Offset: -12.7
     */
    uint8_t nrcd_acc_req_val_h1_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t nrcd_sts_h1_hsc1;
};

/**
 * Signals in message GW_HSC1_FrS00.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_fr_s00_t {
    /**
     * Range: -1..0 (-1..0 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t nrcd_mstr_chlg_h1_hsc1;
};

/**
 * Signals in message GW_HSC1_FVCM_FrP00.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_fvcm_fr_p00_t {
    /**
     * 2017.05.23 updated
     * ACCAEBToqReqSts name changed to ACCToqReqSts
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_toq_req_sts_hsc1;

    /**
     * 2017.05.23 updated:
     * ACCAEBToqReqVal name changed to ACCToqReqVal
     *
     * Range: 0..4095 (-848..1199.5 Nm)
     * Scale: 0.5
     * Offset: -848
     */
    uint16_t acc_toq_req_val_hsc1;

    /**
     * 2017.05.23 updated:
     * ACCAEBToqReqValPV name changed to ACCToqReqValPV
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t acc_toq_req_val_pvhsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t accaeb_dcl_req_sts_hsc1;

    /**
     * 2017.05.23 updated:
     * ACCAEBAlvRC name changed to ACCAlvRC
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_alv_rchsc1;
};

/**
 * Signals in message GW_HSC1_FVCM_FrP01.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_fvcm_fr_p01_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aeb_sys_sts_hsc1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aeb_sys_flt_sts_hsc1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_sys_sts_hsc1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_sys_flt_sts_hsc1;
};

/**
 * Signals in message GW_HSC1_FVCM_FrP02.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_fvcm_fr_p02_t {
    /**
     * Range: 0..254.9993928354584092289010322 (-100..1999.92 m)
     * Scale: 8.235
     * Offset: -100
     */
    uint8_t dist_since_trgt_camr_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spd_ast_req_sts_camr_hsc1;

    /**
     * Range: 0..32766.976 (0..511.984 -)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t trgt_spd_req_camr_hsc1;
};

/**
 * Signals in message GW_HSC1_IPK_FrP06.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_ipk_fr_p06_t {
    /**
     * Range: 0..255 (2000..2255 year)
     * Scale: 1
     * Offset: 2000
     */
    uint8_t calendar_year_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t calendar_month_hsc1;

    /**
     * Range: 0..31 (0..31 days)
     * Scale: 1
     * Offset: 0
     */
    uint8_t calendar_day_hsc1;

    /**
     * Range: 0..23 (0..23 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hour_of_day_hsc1;

    /**
     * Range: 0..59 (0..59 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t minute_of_hour_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t time_dsp_fmt_hsc1;

    /**
     * Range: 0..59 (0..59 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t secs_of_minute_hsc1;
};

/**
 * Signals in message GW_HSC1_IPK_FrP10.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_ipk_fr_p10_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elec_enrg_avg_rst_req_hsc1;
};

/**
 * Signals in message GW_HSC1_PDC_FrP00.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_pdc_fr_p00_t {
    /**
     * Range: 0..255 (0..255 cm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t frt_obs_dist_hsc1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rr_obs_dist_hsc1;
};

/**
 * Signals in message GW_HSC1_PMDC_FrP02.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_pmdc_fr_p02_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t emgc_call_trigd_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t telmcs_srvc_sts_hsc1;
};

/**
 * Signals in message GW_HSC1_PMDC_FrP03.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_pmdc_fr_p03_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_ld_shed_lvl_h1_hsc1;
};

/**
 * Signals in message GW_HSC1_SAS_FrP00.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_sas_fr_p00_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t strg_whl_ang_vhsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t strg_whl_ang_snsr_cal_sts_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t strg_whl_ang_snsr_inid_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t strg_whl_ang_snsr_mult_capb_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t strg_whl_ang_snsr_flt_hsc1;

    /**
     * Range: 0..65534.08 (-2048..2047.88 degree)
     * Scale: 0.0625
     * Offset: -2048
     */
    uint16_t strg_whl_ang_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t strg_whl_ang_alv_rchsc1;

    /**
     * Range: 0..4094 (-2048..2046 degree/s)
     * Scale: 1
     * Offset: -2048
     */
    uint16_t strg_whl_ang_grd_hsc1;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t strg_whl_ang_extd_pvhsc1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t strg_whl_ang_snsr_chksm_hsc1;
};

/**
 * Signals in message GW_HSC1_SCS_FrP00.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_scs_fr_p00_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t l_drvn_whl_rotl_dist_trchsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t l_drvn_whl_rotl_seq_num_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t l_drvn_whl_rotl_rst_ocd_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t l_drvn_whl_rotl_dist_vhsc1;

    /**
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t l_drvn_whl_rotl_dist_pls_ctr_hsc1;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t l_drvn_whl_rotl_dist_tmsp_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_drvn_whl_rotl_dist_trchsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_drvn_whl_rotl_seq_num_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_drvn_whl_rotl_rst_ocd_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_drvn_whl_rotl_dist_vhsc1;

    /**
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t r_drvn_whl_rotl_dist_pls_ctr_hsc1;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t r_drvn_whl_rotl_dist_tmsp_hsc1;
};

/**
 * Signals in message GW_HSC1_SCS_FrP01.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_scs_fr_p01_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t l_non_drvn_whl_rotl_dist_trchsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t l_non_drvn_whl_rotl_seq_num_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t l_non_drvn_whl_rotl_rst_ocd_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t l_non_drvn_whl_rotl_dist_vhsc1;

    /**
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t l_non_drvn_whl_rotl_dist_pchsc1;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t l_non_drvn_whl_rotl_dist_thsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_non_drvn_whl_rotl_dist_trchsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_non_drvn_whl_rotl_seq_num_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_non_drvn_whl_rotl_rst_ocd_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_non_drvn_whl_rotl_dist_vhsc1;

    /**
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t r_non_drvn_whl_rotl_dist_pchsc1;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t r_non_drvn_whl_rotl_dist_thsc1;
};

/**
 * Signals in message GW_HSC1_SCS_FrP02.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_scs_fr_p02_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vse_lat_acc_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vse_longt_acc_vhsc1;

    /**
     * Range: -512..511 (-15.36..15.33 m/s^2)
     * Scale: 0.03
     * Offset: 0
     */
    int16_t vse_longt_acc_hsc1;

    /**
     * Range: -2048..2047.0016 (-32..31.9844 m/s^2)
     * Scale: 0.015625
     * Offset: 0
     */
    int16_t vse_lat_acc_hsc1;
};

/**
 * Signals in message GW_HSC1_SCS_FrP03.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_scs_fr_p03_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t auto_hold_sys_sts_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ch_sys_en_toq_intrvn_typ_errhsc1;

    /**
     * Range: 0..4095 (-848..1199.5 Nm)
     * Scale: 0.5
     * Offset: -848
     */
    uint16_t ch_sys_en_toq_val_extd_rng_rhsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trc_ctrl_alv_rchsc1;

    /**
     * Range: 0..16383 (0..16383 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ch_sys_en_toq_req_protn_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_non_drvn_whl_rotl_dircn_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t l_non_drvn_whl_rotl_dircn_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t scsnrcd_alv_rchsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t scs_dcl_ahsc1;
};

/**
 * Signals in message GW_HSC1_SCS_FrP05.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_scs_fr_p05_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk_sys_tr_gear_req_typ_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk_sys_tr_gear_req_gear_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t absahsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t absfhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcsahsc1;

    /**
     * Traction Control System Enabled
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcs_enbd_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vse_sys_ahsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_dyn_yaw_rate_vhsc1;

    /**
     * Range: -2048..2047.008 (-128..127.938 deg/s)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t veh_dyn_yaw_rate_hsc1;
};

/**
 * Signals in message GW_HSC1_SCS_FrP08.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_scs_fr_p08_t {
    /**
     * Range: -32768.00196608503317768493487..32767.01892356844433521749816 (-3.99999..3.99987 g)
     * Scale: 0.00012207
     * Offset: 0
     */
    int16_t longd_acc_snsr_val_hsc1;

    /**
     * Latitude  Acceleration Sensor Value
     *
     * Range: -32768.03278688524590163934426..32766.96721311475409836065574 (-3.9977..3.99757 g)
     * Scale: 0.000122
     * Offset: 0
     */
    int16_t latd_acc_snsr_val_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t longd_latd_acc_snsr_val_archsc1;
};

/**
 * Signals in message GW_HSC1_SCS_FrP09.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_scs_fr_p09_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk_flud_lvl_low_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk_flud_lvl_low_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk_pdl_drvr_appd_prs_alv_rchsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk_pdl_drvr_appd_prs_vhsc1;

    /**
     * Range: 0..255 (0..19125 kPa)
     * Scale: 75
     * Offset: 0
     */
    uint8_t brk_pdl_drvr_appd_prs_hsc1;
};

/**
 * Signals in message GW_HSC1_SCS_FrP11.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_scs_fr_p11_t {
    /**
     * Wheel Ground Velocity Left Driven Validity
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t whl_gnd_vel_l_drvn_vhsc1;

    /**
     * Range: 0..16383.008 (0..511.969 km/h)
     * Scale: 0.03125
     * Offset: 0
     */
    uint16_t whl_gnd_vel_l_drvn_hsc1;

    /**
     * Wheel Ground Velocity Right Driven Validity
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t whl_gnd_vel_r_drvn_vhsc1;

    /**
     * Range: 0..16383.008 (0..511.969 km/h)
     * Scale: 0.03125
     * Offset: 0
     */
    uint16_t whl_gnd_vel_r_drvn_hsc1;
};

/**
 * Signals in message GW_HSC1_SCS_FrP12.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_scs_fr_p12_t {
    /**
     * Wheel Ground Velocity Left Non Driven Validity
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t whl_gnd_vel_l_non_drvn_vhsc1;

    /**
     * Range: 0..16383.008 (0..511.969 km/h)
     * Scale: 0.03125
     * Offset: 0
     */
    uint16_t whl_gnd_vel_l_non_drvn_hsc1;

    /**
     * Wheel Ground Velocity Right  Non Driven Validity
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t whl_gnd_vel_r_non_drvn_vhsc1;

    /**
     * Range: 0..16383.008 (0..511.969 km/h)
     * Scale: 0.03125
     * Offset: 0
     */
    uint16_t whl_gnd_vel_r_non_drvn_hsc1;
};

/**
 * Signals in message GW_HSC1_SCS_FrP13.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_scs_fr_p13_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vse_sts_hsc1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vse_md_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t absiohsc1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tcs_opng_sts_hsc1;
};

/**
 * Signals in message GW_HSC1_SCS_FrP15.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_scs_fr_p15_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_spd_avg_drvn_vhsc1;

    /**
     * Range: 0..32766.976 (0..511.984 km/h)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t veh_spd_avg_drvn_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dist_rc_avg_drvn_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dist_rc_avg_drvn_rst_ocd_hsc1;

    /**
     * Range: 0..8191.04 (0..1023.88 m)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t dist_rc_avg_drvn_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_spd_avg_non_drvn_vhsc1;

    /**
     * Range: 0..32766.976 (0..511.984 km/h)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t veh_spd_avg_non_drvn_hsc1;
};

/**
 * Signals in message GW_HSC1_SCS_FrP16.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_scs_fr_p16_t {
    /**
     * Range: 0..65535 (-30000..35535 Nm)
     * Scale: 1
     * Offset: -30000
     */
    uint16_t brk_sys_rgtv_toq_trgt_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk_sys_rgtv_toq_trgt_vhsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk_sys_rgtv_toq_trgt_alv_rchsc1;

    /**
     * Range: 1..131071 (1..131071 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t brk_sys_rgtv_toq_trgt_pvhsc1;
};

/**
 * Signals in message GW_HSC1_VehConfign.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_gw_hsc1_veh_confign_t {
    /**
     * Range: 7..31 (7..31 Reserved)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_info_mkt_h1_hsc1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_cofign_body_ctrlr_typ_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_info_drv_hadl_typ_h1_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_cofign_tpms_typ_h1_hsc1;

    /**
     * Range: 13..31 (13..31 Reserved)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_cofign_en_typ_h1_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_info_emsn_regn_h1_hsc1;

    /**
     * Range: 9..15 (9..15 Reserved)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_cofign_tr_typ_h1_hsc1;

    /**
     * Range: 5..15 (5..15 Reserved)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_info_body_typ_h1_hsc1;

    /**
     * Range: 8..15 (8..15 Reserved)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_info_pf_h1_hsc1;

    /**
     * Range: 8..15 (8..15 Reserved)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_cofign_ac_h1_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_cofign_hyb_lvl_h1_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_info_brand_h1_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_cofign_strg_typ_h1_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_cofign_trnsf_case_typ_h1_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_cofign_cc_typ_h1_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_cofign_parkng_brk_typ_h1_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_cofign_slip_ctrl_typ_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_cofign_sp_st_h1_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_cofign_sta_h1_hsc1;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_info_mdl_year_h1_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_cofign_inftn_typ_h1_hsc1;
};

/**
 * Signals in message HCU_HSC1_FrP00.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_hcu_hsc1_fr_p00_t {
    /**
     * Range: 0..254.9999107500312374890668788 (0..100 %)
     * Scale: 0.392157
     * Offset: 0
     */
    uint8_t ept_accel_actu_pos_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_crk_abotd_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rvsept_rdy_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_st_cmd_on_h1_hsc1;

    /**
     * Electric Powertrain Brake Pedal Discrete Input Status Validity
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_brk_pdl_dscrt_inpt_sts_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_brk_pdl_dscrt_inpt_sts_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hcu_fr_p00_rolling_counter_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_accel_actu_pos_vhsc1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hcu_fr_p00_checksum_hsc1;
};

/**
 * Signals in message HCU_HSC1_FrP01.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_hcu_hsc1_fr_p01_t {
    /**
     * Range: 0..65535 (-30000..35535 Nm)
     * Scale: 1
     * Offset: -30000
     */
    uint16_t ept_rgtv_brk_actu_toq_hsc1;

    /**
     * Range: 0..65535 (-30000..35535 Nm)
     * Scale: 1
     * Offset: -30000
     */
    uint16_t ept_rgtv_brk_toq_lmt_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_rgtv_brk_sys_flt_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_rdy_h1_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_rgtn_lvl_hsc1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_toq_rducn_flr_sts_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_rgtv_cstdn_toq_vhsc1;

    /**
     * Range: 0..254.9999107500312374890668788 (0..100 %)
     * Scale: 0.392157
     * Offset: 0
     */
    uint8_t ept_accel_efctv_pos_hsc1;

    /**
     * Range: 0..65535 (-30000..35535 Nm)
     * Scale: 1
     * Offset: -30000
     */
    uint16_t ept_rgtv_cstdn_toq_hsc1;
};

/**
 * Signals in message HCU_HSC1_FrP07.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_hcu_hsc1_fr_p07_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_drv_efncy_ind_vhsc1;

    /**
     * Range: 0..127 (-27..100 %)
     * Scale: 1
     * Offset: -27
     */
    uint8_t ept_drv_efncy_ind_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eptedu_clnt_tem_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eptcc_flt_prst_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_mot_clnt_flt_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_mot_ovhtd_iohsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elec_mot_flt_iohsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_flt_hsc1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_drvng_md_sw_sts_hsc1;

    /**
     * Range: 0..4095.008 (0..255.938 km/h)
     * Scale: 0.0625
     * Offset: 0
     */
    uint16_t eptcc_trgt_spd_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eptccahsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_sys_pwr_lmt_ahsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eptcc_enbd_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_hzrd_sta_hsc1;

    /**
     * Range: 0..255 (-40..215 DegC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t eptedu_clnt_tem_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elec_veh_sys_md_hsc1;

    /**
     * Range: 0..4095 (-100..309.5 kw)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t ept_sys_pwr_hsc1;
};

/**
 * Signals in message HCU_HSC1_FrP08.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_hcu_hsc1_fr_p08_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_tr_inpt_shaft_min_avlbl_toq_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_tr_inpt_shaft_max_avlbl_toq_vhsc1;

    /**
     * Range: 0..4095 (-848..1199.5 Nm)
     * Scale: 0.5
     * Offset: -848
     */
    uint16_t ept_tr_inpt_shaft_min_avlbl_toq_hsc1;

    /**
     * Range: 0..4095 (-848..1199.5 Nm)
     * Scale: 0.5
     * Offset: -848
     */
    uint16_t ept_tr_inpt_shaft_max_avlbl_toq_hsc1;
};

/**
 * Signals in message HCU_HSC1_FrP10.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_hcu_hsc1_fr_p10_t {
    /**
     * Range: 0..255 (0..7.65 kW)
     * Scale: 0.03
     * Offset: 0
     */
    uint8_t eptac_ld_ald_hsc1;

    /**
     * Electric powertrain air conditioning load allowed validity
     * 
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eptac_ld_ald_vhsc1;

    /**
     * Range: 0..15 (0..7.5 kW/s)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t eptac_ld_grd_ald_hsc1;

    /**
     * Electric powertrain air conditioning load gradient allowd validity
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eptac_ld_grd_ald_vhsc1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eptedu_clnt_pump_sts_hsc1;
};

/**
 * Signals in message HCU_HSC1_FrP11.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_hcu_hsc1_fr_p11_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rvsept_crk_abotd_rsn_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rvsept_run_abotd_rsn_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rvsept_crk_abotd_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rvsept_run_abotd_hsc1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eptasl_sts_hsc1;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_info_dsp_hsc1;
};

/**
 * Signals in message HCU_HSC1_FrP13.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_hcu_hsc1_fr_p13_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_drvr_req_inpt_shaft_tvhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_tr_inpt_shaft_toq_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ept_tr_inpt_shaft_spd_vhsc1;

    /**
     * Range: 0..4095 (-848..1199.5 Nm)
     * Scale: 0.5
     * Offset: -848
     */
    uint16_t ept_drvr_req_inpt_shaft_toq_hsc1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t epthvdcdc_md_req_hsc1;

    /**
     * Range: 0..4095 (-848..1199.5 Nm)
     * Scale: 0.5
     * Offset: -848
     */
    uint16_t ept_tr_inpt_shaft_toq_hsc1;

    /**
     * Range: 0..65535 (-32767..32768 rpm)
     * Scale: 1
     * Offset: -32767
     */
    uint16_t ept_tr_inpt_shaft_spd_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_acc_req_sts_hsc1;

    /**
     * Range: 0..255 (-12.7..12.8 -)
     * Scale: 0.1
     * Offset: -12.7
     */
    uint8_t vcu_acc_req_val_hsc1;
};

/**
 * Signals in message HCU_HSC1_TCM_FrP03.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_hcu_hsc1_tcm_fr_p03_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t autoc_tr_gear_shft_dircn_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t autoc_tr_gear_shft_dircn_fhsc1;
};

/**
 * Signals in message HVDCDC_HSC1_FrP01.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_hvdcdc_hsc1_fr_p01_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvdcdc_drtng_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvdcdc_actv_dis_over_time_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvdcdc_over_curr_prot_lvhsc1;

    /**
     * Range: 0..1023 (0..1023 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hvdcdchv_side_vol_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvdcdchv_side_crnt_vhsc1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvdcdc_sta_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvdcdchv_side_vol_vhsc1;

    /**
     * Range: 0..2047 (-1023..1024 A)
     * Scale: 1
     * Offset: -1023
     */
    uint16_t hvdcdchv_side_crnt_hsc1;
};

/**
 * Signals in message HVDCDC_HSC1_FrP02.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_hvdcdc_hsc1_fr_p02_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_over_current_hvhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_volt_fail_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvdcdc_ld_ratio_vhsc1;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t hvdcdc_ld_ratio_hsc1;

    /**
     * Range: 0..253 (0..63.25 -)
     * Scale: 0.25
     * Offset: 0
     */
    uint8_t dc_current_max_hvhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_under_volt_lvhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_under_volt_hvhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_over_volt_lvhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_over_volt_hvhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_over_current_lvhsc1;
};

/**
 * Signals in message HVDCDC_HSC1_FrP03.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_hvdcdc_hsc1_fr_p03_t {
    /**
     * Range: 0..255 (-40..215 Deg C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t hvdcdc_tem_hsc1;

    /**
     * Range: 0..255 (0..31.875 V)
     * Scale: 0.125
     * Offset: 0
     */
    uint8_t hvdcdclv_side_vol_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvdcdclv_side_vol_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvdcdclv_side_stpt_fdbk_vhsc1;

    /**
     * Range: 0..255.0016 (8.5..16.4688 V)
     * Scale: 0.03125
     * Offset: 8.5
     */
    uint8_t hvdcdclv_side_stpt_fdbk_hsc1;

    /**
     * Range: 0..255 (0..255 A)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvdcdclv_side_crnt_hsc1;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t hvdcdc_clnt_pump_pwm_req_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvdcdclv_side_crnt_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvdcdc_hdwr_flr_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvdcdc_intnl_flr_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvdcdc_over_htd_hsc1;

    /**
     * Range: 0..15 (0..15 count value)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvdcdc_counter01_hsc1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvdcdc_checksum01_hsc1;
};

/**
 * Signals in message ISC_HSC1_FrP03.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_isc_hsc1_fr_p03_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t isg_actu_toq_v_h1_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t isg_sta_h1_hsc1;
};

/**
 * Signals in message ISC_HSC1_FrS01.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_isc_hsc1_fr_s01_t {
    /**
     * Range: -1..0 (-1..0 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t isc_immo_data1_hsc1;
};

/**
 * Signals in message ISC_HSC1_FrS02.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_isc_hsc1_fr_s02_t {
    /**
     * Range: -1..0 (-1..0 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t isc_immo_data2_hsc1;
};

/**
 * Signals in message ISC_HSC1_FrS03.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_isc_hsc1_fr_s03_t {
    /**
     * Range: -1..0 (-1..0 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t isc_to_pf_immo_chlg_hsc1;
};

/**
 * Signals in message SCU_HSC1_FrP00.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_scu_hsc1_fr_p00_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t scunrcd_alv_rchsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t scunrcd_avlbl_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t scu_drvr_intrvn_ahsc1;

    /**
     * Shifter control unit SOC mode Switch status
     * 
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t scusoc_md_sw_sts_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t scu_park_actr_sts_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t scu_shifter_pos_rchsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t scu_shifter_lvr_pos_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t scu_shifter_pos_invsn_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t scu_rgtn_lvl_sw_sts_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t scu_drvng_md_sw_sts_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t scu_park_lck_req_vhsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t scu_park_lck_req_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t scu_park_lck_req_pvhsc1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t scu_shifter_spvs_uit_flr_hsc1;
};

/**
 * Signals in message SDM_HSC1_FrP00.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_sdm_hsc1_fr_p00_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fasn_drvr_sblt_ind_cmd_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fasn_frt_psng_sblt_ind_cmd_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sdmrchsc1;

    /**
     * Airbag System Fault Indication Command
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t airbag_sys_flt_ind_cmd_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvr_sblt_atc_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drvr_sblt_atc_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t airbag_dpl_hsc1;

    /**
     * Airbag Deployed Inversion
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t airbag_dpl_invsn_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t frt_psng_sblt_atc_vhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t frt_psng_sblt_atc_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t airbag_sys_flt_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fasn_sec_row_l_sblt_ind_cmd_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fasn_sec_row_mid_sblt_ind_chsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fasn_sec_row_r_sblt_ind_cmd_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t frt_psng_airbag_ind_req_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fasn_sblt_aud_rmndr_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t frt_psng_airbag_enb_ind_fhsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t frt_psng_airbag_dsbl_ind_fhsc1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_crsh_typ_hsc1;
};

/**
 * Signals in message SDM_HSC1_FrS00.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_sdm_hsc1_fr_s00_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t node_authn_resp1_hsc1;
};

/**
 * Signals in message SDM_HSC1_FrS01.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_sdm_hsc1_fr_s01_t {
    /**
     * Range: -1..0 (-1..0 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t sdm_cphr3_lrn_result_fdbk_hsc1;
};

/**
 * Signals in message SDM_HSC1_FrS02.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_sdm_hsc1_fr_s02_t {
    /**
     * Range: -1..0 (-1..0 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t sdm_immo_data1_hsc1;
};

/**
 * Signals in message SDM_HSC1_FrS03.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_sdm_hsc1_fr_s03_t {
    /**
     * Range: -1..0 (-1..0 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t sdm_immo_data2_hsc1;
};

/**
 * Signals in message TCM_HSC1_FrP07.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_tcm_hsc1_fr_p07_t {
    /**
     * Transmission Cruise Control Cancel Request
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tr_cc_cancl_req_hsc1;
};

/**
 * Signals in message TCM_HSC1_FrP09.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_tcm_hsc1_fr_p09_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tr_emsn_rltd_malf_ahsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tr_non_emsn_rltd_malf_ahsc1;
};

/**
 * Signals in message TC_HSC1_FrP01.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_tc_hsc1_fr_p01_t {
    /**
     * Range: 0..65535 (-32768..32767 rpm)
     * Scale: 1
     * Offset: -32768
     */
    uint16_t tm_spd_h1_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tm_spd_v_h1_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tm_sta_h1_hsc1;
};

/**
 * Signals in message TC_HSC1_FrS01.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_tc_hsc1_fr_s01_t {
    /**
     * Range: -1..0 (-1..0 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t tc_immo_data1_hsc1;
};

/**
 * Signals in message TC_HSC1_FrS02.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_tc_hsc1_fr_s02_t {
    /**
     * Range: -1..0 (-1..0 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t tc_immo_data2_hsc1;
};

/**
 * Signals in message TC_HSC1_FrS03.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_tc_hsc1_fr_s03_t {
    /**
     * Range: -1..0 (-1..0 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t tc_to_pf_immo_chlg_hsc1;
};

/**
 * Signals in message VCU_HSC1_ECM_FrP04.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_vcu_hsc1_ecm_fr_p04_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tr_estd_gear_vhsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tr_estd_gear_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t autoc_tr_cmdd_gear_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tr_shft_lvr_pos_v_h1_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tr_shft_lvr_pos_h1_hsc1;
};

/**
 * Signals in message VCU_HSC1_ECM_FrP11.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_vcu_hsc1_ecm_fr_p11_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t coolng_fan_lvl_fdbk_hsc1;

    /**
     * Range: 0..255 (0..102 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t coolng_fan_pwm_fdbk_hsc1;
};

/**
 * Signals in message VCU_HSC1_ECM_FrP27.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_vcu_hsc1_ecm_fr_p27_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pt_acc_toq_req_resp_hsc1;

    /**
     * Range: 0..1023 (-16..16.0199 -)
     * Scale: 0.0313
     * Offset: -16
     */
    uint16_t brk_ast_req_val_spd_ast_sys_hsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trgt_spd_src_sts_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brk_ast_req_a_spd_ast_sys_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t accel_ovrd_hsc1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spd_ast_sys_sts_ecmhsc1;

    /**
     * Range: 0..32766.976 (0..511.984 -)
     * Scale: 0.015625
     * Offset: 0
     */
    uint16_t spd_ast_sys_trgt_spd_hsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pt_adas_alv_rchsc1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pt_acc_toq_req_resp_pvhsc1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spd_ast_md_ecmhsc1;

    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t brk_ass_req_pv_spd_ast_sys_hsc1;
};

/**
 * Signals in message VCU_HSC1_TCM_FrP01.
 *
 * All signal values are as on the CAN bus.
 */
struct canvehicle_vcu_hsc1_tcm_fr_p01_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tr_otpt_rotl_sts_rot_dircn_hsc1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tr_otpt_rotl_sts_vhsc1;
};

/**
 * Pack message BMS_HSC1_FrP02.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_bms_hsc1_fr_p02_pack(
    uint8_t *dst_p,
    const struct canvehicle_bms_hsc1_fr_p02_t *src_p,
    size_t size);

/**
 * Unpack message BMS_HSC1_FrP02.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_bms_hsc1_fr_p02_unpack(
    struct canvehicle_bms_hsc1_fr_p02_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p02_bms_bsc_sta_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p02_bms_bsc_sta_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p02_bms_bsc_sta_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p02_bms_main_relay_sts_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p02_bms_main_relay_sts_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p02_bms_main_relay_sts_h1_hsc1_is_in_range(uint8_t value);

/**
 * Pack message BMS_HSC1_FrP07.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_bms_hsc1_fr_p07_pack(
    uint8_t *dst_p,
    const struct canvehicle_bms_hsc1_fr_p07_t *src_p,
    size_t size);

/**
 * Unpack message BMS_HSC1_FrP07.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_bms_hsc1_fr_p07_unpack(
    struct canvehicle_bms_hsc1_fr_p07_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p07_bms_chrg_sts_io_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p07_bms_chrg_sts_io_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p07_bms_chrg_sts_io_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p07_bms_chrgr_plug_cnctn_io_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p07_bms_chrgr_plug_cnctn_io_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p07_bms_chrgr_plug_cnctn_io_h1_hsc1_is_in_range(uint8_t value);

/**
 * Pack message BMS_HSC1_FrP11.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_bms_hsc1_fr_p11_pack(
    uint8_t *dst_p,
    const struct canvehicle_bms_hsc1_fr_p11_t *src_p,
    size_t size);

/**
 * Unpack message BMS_HSC1_FrP11.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_bms_hsc1_fr_p11_unpack(
    struct canvehicle_bms_hsc1_fr_p11_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p11_bms_cell_max_tem_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p11_bms_cell_max_tem_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p11_bms_cell_max_tem_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p11_bms_clnt_tem_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p11_bms_clnt_tem_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p11_bms_clnt_tem_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p11_bms_cell_max_tem_v_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p11_bms_cell_max_tem_v_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p11_bms_cell_max_tem_v_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p11_bms_clnt_tem_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p11_bms_clnt_tem_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p11_bms_clnt_tem_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p11_bms_onbd_chrgr_plug_on_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p11_bms_onbd_chrgr_plug_on_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p11_bms_onbd_chrgr_plug_on_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p11_bms_balc_rmndng_req_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p11_bms_balc_rmndng_req_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p11_bms_balc_rmndng_req_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p11_bms_flt_ind_req_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p11_bms_flt_ind_req_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p11_bms_flt_ind_req_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p11_hv_bat_shut_off_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p11_hv_bat_shut_off_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p11_hv_bat_shut_off_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p11_bms_onbd_chrgr_clnt_pump_pwm_req_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p11_bms_onbd_chrgr_clnt_pump_pwm_req_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p11_bms_onbd_chrgr_clnt_pump_pwm_req_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p11_bms_cell_min_tem_v_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p11_bms_cell_min_tem_v_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p11_bms_cell_min_tem_v_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p11_bms_chlr_off_req_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p11_bms_chlr_off_req_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p11_bms_chlr_off_req_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p11_bms_clnt_pump_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p11_bms_clnt_pump_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p11_bms_clnt_pump_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p11_bms_ofbd_chrgr_plug_on_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p11_bms_ofbd_chrgr_plug_on_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p11_bms_ofbd_chrgr_plug_on_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p11_chrgr_sys_keep_awk_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p11_chrgr_sys_keep_awk_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p11_chrgr_sys_keep_awk_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p11_bms_cell_min_tem_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p11_bms_cell_min_tem_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p11_bms_cell_min_tem_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_bms_hsc1_fr_p11_veh_elec_rng_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p11_veh_elec_rng_h1_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p11_veh_elec_rng_h1_hsc1_is_in_range(uint16_t value);

/**
 * Pack message BMS_HSC1_FrP12.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_bms_hsc1_fr_p12_pack(
    uint8_t *dst_p,
    const struct canvehicle_bms_hsc1_fr_p12_t *src_p,
    size_t size);

/**
 * Unpack message BMS_HSC1_FrP12.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_bms_hsc1_fr_p12_unpack(
    struct canvehicle_bms_hsc1_fr_p12_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p12_hv_bat_elec_enrg_avg_rate_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p12_hv_bat_elec_enrg_avg_rate_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p12_hv_bat_elec_enrg_avg_rate_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p12_bms_avlbl_enrg_v_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p12_bms_avlbl_enrg_v_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p12_bms_avlbl_enrg_v_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p12_elec_enrg_avg_rst_perfd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p12_elec_enrg_avg_rst_perfd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p12_elec_enrg_avg_rst_perfd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_bms_hsc1_fr_p12_hv_bat_elec_enrg_avg_rate_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p12_hv_bat_elec_enrg_avg_rate_h1_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p12_hv_bat_elec_enrg_avg_rate_h1_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p12_bms_avlbl_enrg_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p12_bms_avlbl_enrg_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p12_bms_avlbl_enrg_h1_hsc1_is_in_range(uint8_t value);

/**
 * Pack message BMS_HSC1_FrP13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_bms_hsc1_fr_p13_pack(
    uint8_t *dst_p,
    const struct canvehicle_bms_hsc1_fr_p13_t *src_p,
    size_t size);

/**
 * Unpack message BMS_HSC1_FrP13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_bms_hsc1_fr_p13_unpack(
    struct canvehicle_bms_hsc1_fr_p13_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_bms_hsc1_fr_p13_bms_pack_soc_dsp_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p13_bms_pack_soc_dsp_h1_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p13_bms_pack_soc_dsp_h1_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p13_bms_pack_vol_v_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p13_bms_pack_vol_v_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p13_bms_pack_vol_v_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p13_bms_pack_soc_dsp_v_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p13_bms_pack_soc_dsp_v_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p13_bms_pack_soc_dsp_v_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p13_bms_pack_crnt_v_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p13_bms_pack_crnt_v_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p13_bms_pack_crnt_v_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_bms_hsc1_fr_p13_bms_pack_vol_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p13_bms_pack_vol_h1_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p13_bms_pack_vol_h1_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_bms_hsc1_fr_p13_bms_pack_crnt_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p13_bms_pack_crnt_h1_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p13_bms_pack_crnt_h1_hsc1_is_in_range(uint16_t value);

/**
 * Pack message BMS_HSC1_FrP14.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_bms_hsc1_fr_p14_pack(
    uint8_t *dst_p,
    const struct canvehicle_bms_hsc1_fr_p14_t *src_p,
    size_t size);

/**
 * Unpack message BMS_HSC1_FrP14.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_bms_hsc1_fr_p14_unpack(
    struct canvehicle_bms_hsc1_fr_p14_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p14_bms_reser_durtn_time_dsp_cmd_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p14_bms_reser_durtn_time_dsp_cmd_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p14_bms_reser_durtn_time_dsp_cmd_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p14_bms_reser_st_hour_dsp_cmd_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p14_bms_reser_st_hour_dsp_cmd_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p14_bms_reser_st_hour_dsp_cmd_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p14_bms_chrg_sts_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p14_bms_chrg_sts_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p14_bms_chrg_sts_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_bms_hsc1_fr_p14_bms_reser_st_time_dsp_cmd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p14_bms_reser_st_time_dsp_cmd_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p14_bms_reser_st_time_dsp_cmd_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p14_bms_chrg_ctrl_dsp_cmd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p14_bms_chrg_ctrl_dsp_cmd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p14_bms_chrg_ctrl_dsp_cmd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p14_bms_reser_ctrl_dsp_cmd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p14_bms_reser_ctrl_dsp_cmd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p14_bms_reser_ctrl_dsp_cmd_hsc1_is_in_range(uint8_t value);

/**
 * Pack message BMS_HSC1_FrP15.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_bms_hsc1_fr_p15_pack(
    uint8_t *dst_p,
    const struct canvehicle_bms_hsc1_fr_p15_t *src_p,
    size_t size);

/**
 * Unpack message BMS_HSC1_FrP15.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_bms_hsc1_fr_p15_unpack(
    struct canvehicle_bms_hsc1_fr_p15_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p15_bms_reser_chrg_md_dsp_cmd_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p15_bms_reser_chrg_md_dsp_cmd_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p15_bms_reser_chrg_md_dsp_cmd_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_bms_hsc1_fr_p15_bms_reser_chrg_rng_dsp_cmd_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p15_bms_reser_chrg_rng_dsp_cmd_h1_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p15_bms_reser_chrg_rng_dsp_cmd_h1_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p15_bms_reser_chrg_enrg_dsp_cmd_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p15_bms_reser_chrg_enrg_dsp_cmd_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p15_bms_reser_chrg_enrg_dsp_cmd_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_bms_hsc1_fr_p15_bms_reser_trgt_soc_dsp_cmd_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p15_bms_reser_trgt_soc_dsp_cmd_h1_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p15_bms_reser_trgt_soc_dsp_cmd_h1_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p15_bms_reser_max_crnt_dsp_cmd_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p15_bms_reser_max_crnt_dsp_cmd_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p15_bms_reser_max_crnt_dsp_cmd_h1_hsc1_is_in_range(uint8_t value);

/**
 * Pack message BMS_HSC1_FrP16.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_bms_hsc1_fr_p16_pack(
    uint8_t *dst_p,
    const struct canvehicle_bms_hsc1_fr_p16_t *src_p,
    size_t size);

/**
 * Unpack message BMS_HSC1_FrP16.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_bms_hsc1_fr_p16_unpack(
    struct canvehicle_bms_hsc1_fr_p16_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p16_bms_wrls_chrgng_resp_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p16_bms_wrls_chrgng_resp_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p16_bms_wrls_chrgng_resp_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_bms_hsc1_fr_p16_bms_chrgng_rmnng_st_time_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p16_bms_chrgng_rmnng_st_time_h1_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p16_bms_chrgng_rmnng_st_time_h1_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_bms_hsc1_fr_p16_chrgng_rmnng_time_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p16_chrgng_rmnng_time_h1_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p16_chrgng_rmnng_time_h1_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p16_bms_wrls_chrgn_flt_reason_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p16_bms_wrls_chrgn_flt_reason_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p16_bms_wrls_chrgn_flt_reason_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_bms_hsc1_fr_p16_elec_csump_per_km_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p16_elec_csump_per_km_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p16_elec_csump_per_km_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p16_elec_csump_per_km_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p16_elec_csump_per_km_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p16_elec_csump_per_km_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p16_chrgng_rmnng_time_v_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p16_chrgng_rmnng_time_v_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p16_chrgng_rmnng_time_v_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_bms_hsc1_fr_p16_crnt_avg_elec_csump_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p16_crnt_avg_elec_csump_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p16_crnt_avg_elec_csump_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_bms_hsc1_fr_p16_crnt_avg_elec_csump_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_bms_hsc1_fr_p16_crnt_avg_elec_csump_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_bms_hsc1_fr_p16_crnt_avg_elec_csump_hsc1_is_in_range(uint16_t value);

/**
 * Pack message DIAG_ACL_Req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_acl_req_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_acl_req_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_ACL_Req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_acl_req_unpack(
    struct canvehicle_diag_acl_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_acl_req_acl_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_acl_req_acl_req_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_acl_req_acl_req_is_in_range(uint64_t value);

/**
 * Pack message DIAG_ACL_Resp.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_acl_resp_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_acl_resp_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_ACL_Resp.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_acl_resp_unpack(
    struct canvehicle_diag_acl_resp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_acl_resp_acl_resp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_acl_resp_acl_resp_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_acl_resp_acl_resp_is_in_range(uint64_t value);

/**
 * Pack message DIAG_DTCInfo_BMS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_dtc_info_bms_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_dtc_info_bms_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_DTCInfo_BMS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_dtc_info_bms_unpack(
    struct canvehicle_diag_dtc_info_bms_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_dtc_info_bms_dtc_infomation_bmshsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_dtc_info_bms_dtc_infomation_bmshsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_dtc_info_bms_dtc_infomation_bmshsc1_is_in_range(uint64_t value);

/**
 * Pack message DIAG_DTCInfo_HCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_dtc_info_hcu_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_dtc_info_hcu_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_DTCInfo_HCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_dtc_info_hcu_unpack(
    struct canvehicle_diag_dtc_info_hcu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_dtc_info_hcu_dtc_infomation_hcuhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_dtc_info_hcu_dtc_infomation_hcuhsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_dtc_info_hcu_dtc_infomation_hcuhsc1_is_in_range(uint64_t value);

/**
 * Pack message DIAG_DTCInfo_HVDCDC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_dtc_info_hvdcdc_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_dtc_info_hvdcdc_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_DTCInfo_HVDCDC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_dtc_info_hvdcdc_unpack(
    struct canvehicle_diag_dtc_info_hvdcdc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_dtc_info_hvdcdc_dtc_infomation_hvdcdchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_dtc_info_hvdcdc_dtc_infomation_hvdcdchsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_dtc_info_hvdcdc_dtc_infomation_hvdcdchsc1_is_in_range(uint64_t value);

/**
 * Pack message DIAG_DTCInfo_ISC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_dtc_info_isc_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_dtc_info_isc_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_DTCInfo_ISC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_dtc_info_isc_unpack(
    struct canvehicle_diag_dtc_info_isc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_dtc_info_isc_dtc_infomation_ischsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_dtc_info_isc_dtc_infomation_ischsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_dtc_info_isc_dtc_infomation_ischsc1_is_in_range(uint64_t value);

/**
 * Pack message DIAG_DTCInfo_SAC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_dtc_info_sac_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_dtc_info_sac_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_DTCInfo_SAC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_dtc_info_sac_unpack(
    struct canvehicle_diag_dtc_info_sac_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_dtc_info_sac_dtc_infomation_sachsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_dtc_info_sac_dtc_infomation_sachsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_dtc_info_sac_dtc_infomation_sachsc1_is_in_range(uint64_t value);

/**
 * Pack message DIAG_DTCInfo_SCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_dtc_info_scu_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_dtc_info_scu_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_DTCInfo_SCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_dtc_info_scu_unpack(
    struct canvehicle_diag_dtc_info_scu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_dtc_info_scu_dtc_infomation_scuhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_dtc_info_scu_dtc_infomation_scuhsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_dtc_info_scu_dtc_infomation_scuhsc1_is_in_range(uint64_t value);

/**
 * Pack message DIAG_DTCInfo_SDM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_dtc_info_sdm_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_dtc_info_sdm_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_DTCInfo_SDM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_dtc_info_sdm_unpack(
    struct canvehicle_diag_dtc_info_sdm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_dtc_info_sdm_dtc_infomation_sdmhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_dtc_info_sdm_dtc_infomation_sdmhsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_dtc_info_sdm_dtc_infomation_sdmhsc1_is_in_range(uint64_t value);

/**
 * Pack message DIAG_DTCInfo_TC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_dtc_info_tc_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_dtc_info_tc_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_DTCInfo_TC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_dtc_info_tc_unpack(
    struct canvehicle_diag_dtc_info_tc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_dtc_info_tc_dtc_infomation_tchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_dtc_info_tc_dtc_infomation_tchsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_dtc_info_tc_dtc_infomation_tchsc1_is_in_range(uint64_t value);

/**
 * Pack message DIAG_FuncReq_HSC1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_func_req_hsc1_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_func_req_hsc1_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_FuncReq_HSC1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_func_req_hsc1_unpack(
    struct canvehicle_diag_func_req_hsc1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_func_req_hsc1_diagnostic_func_addr_req_h1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_func_req_hsc1_diagnostic_func_addr_req_h1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_func_req_hsc1_diagnostic_func_addr_req_h1_is_in_range(uint64_t value);

/**
 * Pack message DIAG_PhysReq_BMS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_phys_req_bms_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_phys_req_bms_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_PhysReq_BMS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_phys_req_bms_unpack(
    struct canvehicle_diag_phys_req_bms_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_phys_req_bms_diagnostic_req_bms_h1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_phys_req_bms_diagnostic_req_bms_h1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_phys_req_bms_diagnostic_req_bms_h1_is_in_range(uint64_t value);

/**
 * Pack message DIAG_PhysReq_HCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_phys_req_hcu_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_phys_req_hcu_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_PhysReq_HCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_phys_req_hcu_unpack(
    struct canvehicle_diag_phys_req_hcu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_phys_req_hcu_diagnostic_req_hcu_h1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_phys_req_hcu_diagnostic_req_hcu_h1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_phys_req_hcu_diagnostic_req_hcu_h1_is_in_range(uint64_t value);

/**
 * Pack message DIAG_PhysReq_HVDCDC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_phys_req_hvdcdc_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_phys_req_hvdcdc_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_PhysReq_HVDCDC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_phys_req_hvdcdc_unpack(
    struct canvehicle_diag_phys_req_hvdcdc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_phys_req_hvdcdc_diagnostic_req_hvdcdc_h1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_phys_req_hvdcdc_diagnostic_req_hvdcdc_h1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_phys_req_hvdcdc_diagnostic_req_hvdcdc_h1_is_in_range(uint64_t value);

/**
 * Pack message DIAG_PhysReq_ISC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_phys_req_isc_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_phys_req_isc_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_PhysReq_ISC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_phys_req_isc_unpack(
    struct canvehicle_diag_phys_req_isc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_phys_req_isc_diagnostic_req_isc_h1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_phys_req_isc_diagnostic_req_isc_h1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_phys_req_isc_diagnostic_req_isc_h1_is_in_range(uint64_t value);

/**
 * Pack message DIAG_PhysReq_SAC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_phys_req_sac_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_phys_req_sac_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_PhysReq_SAC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_phys_req_sac_unpack(
    struct canvehicle_diag_phys_req_sac_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_phys_req_sac_diagnostic_req_sac_h1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_phys_req_sac_diagnostic_req_sac_h1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_phys_req_sac_diagnostic_req_sac_h1_is_in_range(uint64_t value);

/**
 * Pack message DIAG_PhysReq_SCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_phys_req_scu_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_phys_req_scu_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_PhysReq_SCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_phys_req_scu_unpack(
    struct canvehicle_diag_phys_req_scu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_phys_req_scu_diagnostic_req_scu_h1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_phys_req_scu_diagnostic_req_scu_h1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_phys_req_scu_diagnostic_req_scu_h1_is_in_range(uint64_t value);

/**
 * Pack message DIAG_PhysReq_SDM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_phys_req_sdm_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_phys_req_sdm_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_PhysReq_SDM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_phys_req_sdm_unpack(
    struct canvehicle_diag_phys_req_sdm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_phys_req_sdm_diagnostic_req_sdm_h1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_phys_req_sdm_diagnostic_req_sdm_h1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_phys_req_sdm_diagnostic_req_sdm_h1_is_in_range(uint64_t value);

/**
 * Pack message DIAG_PhysReq_TC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_phys_req_tc_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_phys_req_tc_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_PhysReq_TC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_phys_req_tc_unpack(
    struct canvehicle_diag_phys_req_tc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_phys_req_tc_diagnostic_req_tc_h1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_phys_req_tc_diagnostic_req_tc_h1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_phys_req_tc_diagnostic_req_tc_h1_is_in_range(uint64_t value);

/**
 * Pack message DIAG_PhysResp_BMS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_phys_resp_bms_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_phys_resp_bms_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_PhysResp_BMS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_phys_resp_bms_unpack(
    struct canvehicle_diag_phys_resp_bms_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_phys_resp_bms_diagnostic_resp_bms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_phys_resp_bms_diagnostic_resp_bms_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_phys_resp_bms_diagnostic_resp_bms_is_in_range(uint64_t value);

/**
 * Pack message DIAG_PhysResp_HCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_phys_resp_hcu_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_phys_resp_hcu_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_PhysResp_HCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_phys_resp_hcu_unpack(
    struct canvehicle_diag_phys_resp_hcu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_phys_resp_hcu_diagnostic_resp_hcu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_phys_resp_hcu_diagnostic_resp_hcu_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_phys_resp_hcu_diagnostic_resp_hcu_is_in_range(uint64_t value);

/**
 * Pack message DIAG_PhysResp_HVDCDC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_phys_resp_hvdcdc_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_phys_resp_hvdcdc_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_PhysResp_HVDCDC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_phys_resp_hvdcdc_unpack(
    struct canvehicle_diag_phys_resp_hvdcdc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_phys_resp_hvdcdc_diagnostic_resp_hvdcdc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_phys_resp_hvdcdc_diagnostic_resp_hvdcdc_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_phys_resp_hvdcdc_diagnostic_resp_hvdcdc_is_in_range(uint64_t value);

/**
 * Pack message DIAG_PhysResp_ISC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_phys_resp_isc_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_phys_resp_isc_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_PhysResp_ISC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_phys_resp_isc_unpack(
    struct canvehicle_diag_phys_resp_isc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_phys_resp_isc_diagnostic_resp_isc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_phys_resp_isc_diagnostic_resp_isc_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_phys_resp_isc_diagnostic_resp_isc_is_in_range(uint64_t value);

/**
 * Pack message DIAG_PhysResp_SAC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_phys_resp_sac_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_phys_resp_sac_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_PhysResp_SAC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_phys_resp_sac_unpack(
    struct canvehicle_diag_phys_resp_sac_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_phys_resp_sac_diagnostic_resp_sac_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_phys_resp_sac_diagnostic_resp_sac_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_phys_resp_sac_diagnostic_resp_sac_is_in_range(uint64_t value);

/**
 * Pack message DIAG_PhysResp_SCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_phys_resp_scu_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_phys_resp_scu_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_PhysResp_SCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_phys_resp_scu_unpack(
    struct canvehicle_diag_phys_resp_scu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_phys_resp_scu_diagnostic_resp_scu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_phys_resp_scu_diagnostic_resp_scu_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_phys_resp_scu_diagnostic_resp_scu_is_in_range(uint64_t value);

/**
 * Pack message DIAG_PhysResp_SDM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_phys_resp_sdm_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_phys_resp_sdm_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_PhysResp_SDM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_phys_resp_sdm_unpack(
    struct canvehicle_diag_phys_resp_sdm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_phys_resp_sdm_diagnostic_resp_sdm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_phys_resp_sdm_diagnostic_resp_sdm_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_phys_resp_sdm_diagnostic_resp_sdm_is_in_range(uint64_t value);

/**
 * Pack message DIAG_PhysResp_TC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_diag_phys_resp_tc_pack(
    uint8_t *dst_p,
    const struct canvehicle_diag_phys_resp_tc_t *src_p,
    size_t size);

/**
 * Unpack message DIAG_PhysResp_TC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_diag_phys_resp_tc_unpack(
    struct canvehicle_diag_phys_resp_tc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_diag_phys_resp_tc_diagnostic_resp_tc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_diag_phys_resp_tc_diagnostic_resp_tc_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_diag_phys_resp_tc_diagnostic_resp_tc_is_in_range(uint64_t value);

/**
 * Pack message ECM_HSC1_FrP00.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_ecm_hsc1_fr_p00_pack(
    uint8_t *dst_p,
    const struct canvehicle_ecm_hsc1_fr_p00_t *src_p,
    size_t size);

/**
 * Unpack message ECM_HSC1_FrP00.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_ecm_hsc1_fr_p00_unpack(
    struct canvehicle_ecm_hsc1_fr_p00_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_ecm_hsc1_fr_p00_en_run_ahsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p00_en_run_ahsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p00_en_run_ahsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_ecm_hsc1_fr_p00_en_spd_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p00_en_spd_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p00_en_spd_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_ecm_hsc1_fr_p00_en_spd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p00_en_spd_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p00_en_spd_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_ecm_hsc1_fr_p00_accel_actu_pos_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p00_accel_actu_pos_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p00_accel_actu_pos_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_ecm_hsc1_fr_p00_ccahsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p00_ccahsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p00_ccahsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_ecm_hsc1_fr_p00_accel_actu_pos_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p00_accel_actu_pos_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p00_accel_actu_pos_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_ecm_hsc1_fr_p00_pt_brk_pdl_dscrt_inpt_sts_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p00_pt_brk_pdl_dscrt_inpt_sts_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p00_pt_brk_pdl_dscrt_inpt_sts_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_ecm_hsc1_fr_p00_pt_brk_pdl_dscrt_inpt_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p00_pt_brk_pdl_dscrt_inpt_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p00_pt_brk_pdl_dscrt_inpt_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_ecm_hsc1_fr_p00_en12_volt_str_mot_cmdd_on_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p00_en12_volt_str_mot_cmdd_on_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p00_en12_volt_str_mot_cmdd_on_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_ecm_hsc1_fr_p00_en_ctrlr_run_crk_trml_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p00_en_ctrlr_run_crk_trml_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p00_en_ctrlr_run_crk_trml_sts_hsc1_is_in_range(uint8_t value);

/**
 * Pack message ECM_HSC1_FrP01.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_ecm_hsc1_fr_p01_pack(
    uint8_t *dst_p,
    const struct canvehicle_ecm_hsc1_fr_p01_t *src_p,
    size_t size);

/**
 * Unpack message ECM_HSC1_FrP01.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_ecm_hsc1_fr_p01_unpack(
    struct canvehicle_ecm_hsc1_fr_p01_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_ecm_hsc1_fr_p01_accel_efctv_pos_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p01_accel_efctv_pos_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p01_accel_efctv_pos_hsc1_is_in_range(uint8_t value);

/**
 * Pack message ECM_HSC1_FrP03.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_ecm_hsc1_fr_p03_pack(
    uint8_t *dst_p,
    const struct canvehicle_ecm_hsc1_fr_p03_t *src_p,
    size_t size);

/**
 * Unpack message ECM_HSC1_FrP03.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_ecm_hsc1_fr_p03_unpack(
    struct canvehicle_ecm_hsc1_fr_p03_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_ecm_hsc1_fr_p03_en_toq_actu_extd_rng_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p03_en_toq_actu_extd_rng_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p03_en_toq_actu_extd_rng_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_ecm_hsc1_fr_p03_en_toq_actu_extd_rng_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p03_en_toq_actu_extd_rng_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p03_en_toq_actu_extd_rng_hsc1_is_in_range(uint16_t value);

/**
 * Pack message ECM_HSC1_FrP07.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_ecm_hsc1_fr_p07_pack(
    uint8_t *dst_p,
    const struct canvehicle_ecm_hsc1_fr_p07_t *src_p,
    size_t size);

/**
 * Unpack message ECM_HSC1_FrP07.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_ecm_hsc1_fr_p07_unpack(
    struct canvehicle_ecm_hsc1_fr_p07_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_ecm_hsc1_fr_p07_en_ass_sta_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p07_en_ass_sta_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p07_en_ass_sta_hsc1_is_in_range(uint8_t value);

/**
 * Pack message ECM_HSC1_FrP09.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_ecm_hsc1_fr_p09_pack(
    uint8_t *dst_p,
    const struct canvehicle_ecm_hsc1_fr_p09_t *src_p,
    size_t size);

/**
 * Unpack message ECM_HSC1_FrP09.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_ecm_hsc1_fr_p09_unpack(
    struct canvehicle_ecm_hsc1_fr_p09_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_ecm_hsc1_fr_p09_en_toq_max_extd_rng_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p09_en_toq_max_extd_rng_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p09_en_toq_max_extd_rng_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_ecm_hsc1_fr_p09_en_toq_max_extd_rng_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p09_en_toq_max_extd_rng_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p09_en_toq_max_extd_rng_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_ecm_hsc1_fr_p09_en_toq_min_extd_rng_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p09_en_toq_min_extd_rng_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p09_en_toq_min_extd_rng_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_ecm_hsc1_fr_p09_en_toq_min_extd_rng_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p09_en_toq_min_extd_rng_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p09_en_toq_min_extd_rng_hsc1_is_in_range(uint16_t value);

/**
 * Pack message ECM_HSC1_FrP10.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_ecm_hsc1_fr_p10_pack(
    uint8_t *dst_p,
    const struct canvehicle_ecm_hsc1_fr_p10_t *src_p,
    size_t size);

/**
 * Unpack message ECM_HSC1_FrP10.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_ecm_hsc1_fr_p10_unpack(
    struct canvehicle_ecm_hsc1_fr_p10_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_ecm_hsc1_fr_p10_cc_flt_prst_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p10_cc_flt_prst_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p10_cc_flt_prst_hsc1_is_in_range(uint8_t value);

/**
 * Pack message ECM_HSC1_FrP12.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_ecm_hsc1_fr_p12_pack(
    uint8_t *dst_p,
    const struct canvehicle_ecm_hsc1_fr_p12_t *src_p,
    size_t size);

/**
 * Unpack message ECM_HSC1_FrP12.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_ecm_hsc1_fr_p12_unpack(
    struct canvehicle_ecm_hsc1_fr_p12_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message ECM_HSC1_FrP14.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_ecm_hsc1_fr_p14_pack(
    uint8_t *dst_p,
    const struct canvehicle_ecm_hsc1_fr_p14_t *src_p,
    size_t size);

/**
 * Unpack message ECM_HSC1_FrP14.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_ecm_hsc1_fr_p14_unpack(
    struct canvehicle_ecm_hsc1_fr_p14_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_ecm_hsc1_fr_p14_en_clnt_tem_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p14_en_clnt_tem_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p14_en_clnt_tem_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_ecm_hsc1_fr_p14_en_clnt_tem_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_ecm_hsc1_fr_p14_en_clnt_tem_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_ecm_hsc1_fr_p14_en_clnt_tem_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_AC_FrP01.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_ac_fr_p01_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_ac_fr_p01_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_AC_FrP01.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_ac_fr_p01_unpack(
    struct canvehicle_gw_hsc1_ac_fr_p01_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ac_fr_p01_ac_on_off_dsp_cmd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p01_ac_on_off_dsp_cmd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p01_ac_on_off_dsp_cmd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ac_fr_p01_dfst_on_dsp_cmd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p01_dfst_on_dsp_cmd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p01_dfst_on_dsp_cmd_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_AC_FrP02.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_ac_fr_p02_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_ac_fr_p02_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_AC_FrP02.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_ac_fr_p02_unpack(
    struct canvehicle_gw_hsc1_ac_fr_p02_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ac_fr_p02_ac_ambt_tem_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p02_ac_ambt_tem_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p02_ac_ambt_tem_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ac_fr_p02_ac_evapo_tem_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p02_ac_evapo_tem_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p02_ac_evapo_tem_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ac_fr_p02_ac_ambt_tem_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p02_ac_ambt_tem_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p02_ac_ambt_tem_vhsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_AC_FrP03.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_ac_fr_p03_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_ac_fr_p03_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_AC_FrP03.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_ac_fr_p03_unpack(
    struct canvehicle_gw_hsc1_ac_fr_p03_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ac_fr_p03_ac_coolng_fan_pwm_req_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p03_ac_coolng_fan_pwm_req_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p03_ac_coolng_fan_pwm_req_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ac_fr_p03_ac_compr_req_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p03_ac_compr_req_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p03_ac_compr_req_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ac_fr_p03_ac_coolng_fan_lvl_req_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p03_ac_coolng_fan_lvl_req_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p03_ac_coolng_fan_lvl_req_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ac_fr_p03_hv_bat_coolng_sys_enbd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p03_hv_bat_coolng_sys_enbd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p03_hv_bat_coolng_sys_enbd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ac_fr_p03_ac_hi_side_flud_prs_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p03_ac_hi_side_flud_prs_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p03_ac_hi_side_flud_prs_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ac_fr_p03_ac_hi_side_flud_prs_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p03_ac_hi_side_flud_prs_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p03_ac_hi_side_flud_prs_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_AC_FrP04.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_ac_fr_p04_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_ac_fr_p04_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_AC_FrP04.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_ac_fr_p04_unpack(
    struct canvehicle_gw_hsc1_ac_fr_p04_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ac_fr_p04_ots_air_tmp_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p04_ots_air_tmp_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p04_ots_air_tmp_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ac_fr_p04_ots_air_tmp_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p04_ots_air_tmp_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p04_ots_air_tmp_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_AC_FrP05.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_ac_fr_p05_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_ac_fr_p05_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_AC_FrP05.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_ac_fr_p05_unpack(
    struct canvehicle_gw_hsc1_ac_fr_p05_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ac_fr_p05_eac_vol_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p05_eac_vol_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p05_eac_vol_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ac_fr_p05_esspwm_clnt_pump_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p05_esspwm_clnt_pump_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p05_esspwm_clnt_pump_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ac_fr_p05_ac_compr_actu_pwr_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p05_ac_compr_actu_pwr_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p05_ac_compr_actu_pwr_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_ac_fr_p05_ac_compr_actu_hvhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p05_ac_compr_actu_hvhsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p05_ac_compr_actu_hvhsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_ac_fr_p05_eac_vol_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p05_eac_vol_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p05_eac_vol_hsc1_is_in_range(uint16_t value);

/**
 * Pack message GW_HSC1_AC_FrP06.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_ac_fr_p06_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_ac_fr_p06_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_AC_FrP06.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_ac_fr_p06_unpack(
    struct canvehicle_gw_hsc1_ac_fr_p06_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ac_fr_p06_ac_htr_pwr_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p06_ac_htr_pwr_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p06_ac_htr_pwr_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ac_fr_p06_ac_pwr_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p06_ac_pwr_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p06_ac_pwr_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_AC_FrP07.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_ac_fr_p07_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_ac_fr_p07_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_AC_FrP07.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_ac_fr_p07_unpack(
    struct canvehicle_gw_hsc1_ac_fr_p07_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ac_fr_p07_heat_pump_md_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ac_fr_p07_heat_pump_md_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ac_fr_p07_heat_pump_md_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_BCM_FrP04.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_p04_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_bcm_fr_p04_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_BCM_FrP04.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_p04_unpack(
    struct canvehicle_gw_hsc1_bcm_fr_p04_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p04_rr_door_open_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p04_rr_door_open_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p04_rr_door_open_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p04_drvr_door_open_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p04_drvr_door_open_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p04_drvr_door_open_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p04_main_beam_lght_on_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p04_main_beam_lght_on_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p04_main_beam_lght_on_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p04_dipd_beam_lght_on_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p04_dipd_beam_lght_on_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p04_dipd_beam_lght_on_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p04_l_dircn_iohsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p04_l_dircn_iohsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p04_l_dircn_iohsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p04_r_dircn_iohsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p04_r_dircn_iohsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p04_r_dircn_iohsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p04_rr_fog_lght_on_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p04_rr_fog_lght_on_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p04_rr_fog_lght_on_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p04_airbag_wrnng_ind_fhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p04_airbag_wrnng_ind_fhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p04_airbag_wrnng_ind_fhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p04_veh_lckng_sta_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p04_veh_lckng_sta_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p04_veh_lckng_sta_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p04_bnt_open_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p04_bnt_open_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p04_bnt_open_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p04_veh_inertia_sw_trigd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p04_veh_inertia_sw_trigd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p04_veh_inertia_sw_trigd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p04_dsp_meas_sys_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p04_dsp_meas_sys_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p04_dsp_meas_sys_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p04_frt_psng_door_open_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p04_frt_psng_door_open_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p04_frt_psng_door_open_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p04_rl_door_open_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p04_rl_door_open_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p04_rl_door_open_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p04_veh_side_lght_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p04_veh_side_lght_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p04_veh_side_lght_sts_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_BCM_FrP06.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_p06_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_bcm_fr_p06_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_BCM_FrP06.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_p06_unpack(
    struct canvehicle_gw_hsc1_bcm_fr_p06_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p06_rvs_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p06_rvs_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p06_rvs_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p06_rvs_req_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p06_rvs_req_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p06_rvs_req_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p06_rvs_req_ahsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p06_rvs_req_ahsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p06_rvs_req_ahsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_BCM_FrP07.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_p07_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_bcm_fr_p07_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_BCM_FrP07.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_p07_unpack(
    struct canvehicle_gw_hsc1_bcm_fr_p07_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p07_sys_bpm_enbd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p07_sys_bpm_enbd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p07_sys_bpm_enbd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_bcm_fr_p07_sys_bpmhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_p07_sys_bpmhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_p07_sys_bpmhsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_BCM_FrS02.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_s02_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_bcm_fr_s02_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_BCM_FrS02.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_s02_unpack(
    struct canvehicle_gw_hsc1_bcm_fr_s02_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_gw_hsc1_bcm_fr_s02_bcm_immo_data1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_s02_bcm_immo_data1_hsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_s02_bcm_immo_data1_hsc1_is_in_range(uint64_t value);

/**
 * Pack message GW_HSC1_BCM_FrS04.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_s04_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_bcm_fr_s04_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_BCM_FrS04.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_s04_unpack(
    struct canvehicle_gw_hsc1_bcm_fr_s04_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_gw_hsc1_bcm_fr_s04_bcm_immo_data2_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_s04_bcm_immo_data2_hsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_s04_bcm_immo_data2_hsc1_is_in_range(uint64_t value);

/**
 * Pack message GW_HSC1_BCM_FrS06.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_s06_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_bcm_fr_s06_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_BCM_FrS06.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_s06_unpack(
    struct canvehicle_gw_hsc1_bcm_fr_s06_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_gw_hsc1_bcm_fr_s06_bcm_immo_data6_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_s06_bcm_immo_data6_hsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_s06_bcm_immo_data6_hsc1_is_in_range(uint64_t value);

/**
 * Pack message GW_HSC1_BCM_FrS07.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_s07_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_bcm_fr_s07_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_BCM_FrS07.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_s07_unpack(
    struct canvehicle_gw_hsc1_bcm_fr_s07_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_gw_hsc1_bcm_fr_s07_bcm_immo_data7_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_s07_bcm_immo_data7_hsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_s07_bcm_immo_data7_hsc1_is_in_range(uint64_t value);

/**
 * Pack message GW_HSC1_BCM_FrS12.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_s12_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_bcm_fr_s12_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_BCM_FrS12.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_s12_unpack(
    struct canvehicle_gw_hsc1_bcm_fr_s12_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_gw_hsc1_bcm_fr_s12_pf_to_tc_immo_resp_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_s12_pf_to_tc_immo_resp_hsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_s12_pf_to_tc_immo_resp_hsc1_is_in_range(uint64_t value);

/**
 * Pack message GW_HSC1_BCM_FrS14.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_s14_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_bcm_fr_s14_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_BCM_FrS14.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_s14_unpack(
    struct canvehicle_gw_hsc1_bcm_fr_s14_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_gw_hsc1_bcm_fr_s14_node_authn_chlg1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_s14_node_authn_chlg1_hsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_s14_node_authn_chlg1_hsc1_is_in_range(uint64_t value);

/**
 * Pack message GW_HSC1_BCM_FrS15.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_s15_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_bcm_fr_s15_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_BCM_FrS15.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_bcm_fr_s15_unpack(
    struct canvehicle_gw_hsc1_bcm_fr_s15_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_gw_hsc1_bcm_fr_s15_pf_to_isc_immo_resp_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_bcm_fr_s15_pf_to_isc_immo_resp_hsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_bcm_fr_s15_pf_to_isc_immo_resp_hsc1_is_in_range(uint64_t value);

/**
 * Pack message GW_HSC1_EPB_FrP00.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_epb_fr_p00_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_epb_fr_p00_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_EPB_FrP00.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_epb_fr_p00_unpack(
    struct canvehicle_gw_hsc1_epb_fr_p00_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_epb_fr_p00_epb_sw_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_epb_fr_p00_epb_sw_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_epb_fr_p00_epb_sw_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_epb_fr_p00_epb_sw_sts_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_epb_fr_p00_epb_sw_sts_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_epb_fr_p00_epb_sw_sts_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_epb_fr_p00_epbcc_cancl_reqd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_epb_fr_p00_epbcc_cancl_reqd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_epb_fr_p00_epbcc_cancl_reqd_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_EPB_FrP01.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_epb_fr_p01_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_epb_fr_p01_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_EPB_FrP01.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_epb_fr_p01_unpack(
    struct canvehicle_gw_hsc1_epb_fr_p01_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_epb_fr_p01_epb_appcn_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_epb_fr_p01_epb_appcn_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_epb_fr_p01_epb_appcn_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_epb_fr_p01_epb_appcn_sts_pvhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_epb_fr_p01_epb_appcn_sts_pvhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_epb_fr_p01_epb_appcn_sts_pvhsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_FICM_FrP02.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_ficm_fr_p02_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_ficm_fr_p02_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_FICM_FrP02.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_ficm_fr_p02_unpack(
    struct canvehicle_gw_hsc1_ficm_fr_p02_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ficm_fr_p02_rstr_fctry_defts_req_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p02_rstr_fctry_defts_req_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p02_rstr_fctry_defts_req_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_FICM_FrP08.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_ficm_fr_p08_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_ficm_fr_p08_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_FICM_FrP08.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_ficm_fr_p08_unpack(
    struct canvehicle_gw_hsc1_ficm_fr_p08_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ficm_fr_p08_spd_ast_md_ficmvhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p08_spd_ast_md_ficmvhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p08_spd_ast_md_ficmvhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_ficm_fr_p08_ancpt_road_spd_nav_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p08_ancpt_road_spd_nav_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p08_ancpt_road_spd_nav_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_ficm_fr_p08_trgt_spd_req_nav_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p08_trgt_spd_req_nav_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p08_trgt_spd_req_nav_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ficm_fr_p08_spd_ast_md_ficmhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p08_spd_ast_md_ficmhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p08_spd_ast_md_ficmhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ficm_fr_p08_dist_to_trgt_nav_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p08_dist_to_trgt_nav_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p08_dist_to_trgt_nav_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ficm_fr_p08_spd_ast_req_sts_nav_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p08_spd_ast_req_sts_nav_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p08_spd_ast_req_sts_nav_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_FICM_FrP14.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_ficm_fr_p14_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_ficm_fr_p14_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_FICM_FrP14.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_ficm_fr_p14_unpack(
    struct canvehicle_gw_hsc1_ficm_fr_p14_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ficm_fr_p14_ficm_chrg_ctrl_req_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p14_ficm_chrg_ctrl_req_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p14_ficm_chrg_ctrl_req_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_chrg_md_req_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_chrg_md_req_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_chrg_md_req_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_st_time_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_st_time_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_st_time_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_durtn_time_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_durtn_time_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_durtn_time_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_chrg_rng_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_chrg_rng_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_chrg_rng_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_max_crnt_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_max_crnt_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_max_crnt_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_trgt_sochsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_trgt_sochsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_trgt_sochsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_chrg_enrg_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_chrg_enrg_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_chrg_enrg_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_ctrl_req_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_ctrl_req_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_ctrl_req_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ficm_fr_p14_ficm_wrls_chrgng_req_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p14_ficm_wrls_chrgng_req_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p14_ficm_wrls_chrgng_req_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_tgt_socvhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_tgt_socvhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_tgt_socvhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_chrg_rng_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_chrg_rng_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_chrg_rng_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_chrg_enrg_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_chrg_enrg_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_chrg_enrg_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_durtn_time_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_durtn_time_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_durtn_time_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_max_crnt_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_max_crnt_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_max_crnt_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_st_time_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_st_time_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ficm_fr_p14_ficm_reser_st_time_vhsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_FrP00.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_fr_p00_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_fr_p00_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_FrP00.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_fr_p00_unpack(
    struct canvehicle_gw_hsc1_fr_p00_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_ecm_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_ecm_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_ecm_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_tcm_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_tcm_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_tcm_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_sdm_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_sdm_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_sdm_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_scs_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_scs_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_scs_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_scu_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_scu_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_scu_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_tccm_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_tccm_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_tccm_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_eps_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_eps_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_eps_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_epb_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_epb_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_epb_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_sas_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_sas_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_sas_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_dhl_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_dhl_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_dhl_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_hcu_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_hcu_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_hcu_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_fvcm_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_fvcm_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_fvcm_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_msm_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_msm_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_msm_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_plcm_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_plcm_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_plcm_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_tc_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_tc_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_tc_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_isc_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_isc_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_isc_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_bms_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_bms_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_bms_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_bcm_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_bcm_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_bcm_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_ipc_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_ipc_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_ipc_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_ac_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_ac_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_ac_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_peps_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_peps_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_peps_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_pmdc_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_pmdc_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_pmdc_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_tbox_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_tbox_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_tbox_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_ficm_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_ficm_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_ficm_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_escl_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_escl_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_escl_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_pacm_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_pacm_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_pacm_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_tpms_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_tpms_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_tpms_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_rda_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_rda_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_rda_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_hvdcdc_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_hvdcdc_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_hvdcdc_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_apa_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_apa_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_apa_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_savm_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_savm_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_savm_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p00_ehbs_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p00_ehbs_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p00_ehbs_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_FrP01.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_fr_p01_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_fr_p01_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_FrP01.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_fr_p01_unpack(
    struct canvehicle_gw_hsc1_fr_p01_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p01_sys_vol_md_v_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p01_sys_vol_md_v_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p01_sys_vol_md_v_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p01_sys_opnl_md_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p01_sys_opnl_md_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p01_sys_opnl_md_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p01_pwr_md_mstr_run_crk_a_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p01_pwr_md_mstr_run_crk_a_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p01_pwr_md_mstr_run_crk_a_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p01_pwr_md_mstr_accry_a_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p01_pwr_md_mstr_accry_a_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p01_pwr_md_mstr_accry_a_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p01_sys_pwr_md_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p01_sys_pwr_md_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p01_sys_pwr_md_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p01_bpm_mstr_avlbly_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p01_bpm_mstr_avlbly_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p01_bpm_mstr_avlbly_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p01_sys_pwr_md_v_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p01_sys_pwr_md_v_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p01_sys_pwr_md_v_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p01_sys_vol_v_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p01_sys_vol_v_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p01_sys_vol_v_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p01_sys_vol_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p01_sys_vol_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p01_sys_vol_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p01_sys_vol_md_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p01_sys_vol_md_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p01_sys_vol_md_h1_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_FrP02.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_fr_p02_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_fr_p02_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_FrP02.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_fr_p02_unpack(
    struct canvehicle_gw_hsc1_fr_p02_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p02_brk_pdl_pos_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p02_brk_pdl_pos_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p02_brk_pdl_pos_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p02_brk_pdl_pos_v_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p02_brk_pdl_pos_v_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p02_brk_pdl_pos_v_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p02_scurt_key_invd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p02_scurt_key_invd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p02_scurt_key_invd_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_FrP04.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_fr_p04_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_fr_p04_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_FrP04.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_fr_p04_unpack(
    struct canvehicle_gw_hsc1_fr_p04_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p04_cc_sw_sts_cancl_sw_a_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p04_cc_sw_sts_cancl_sw_a_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p04_cc_sw_sts_cancl_sw_a_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p04_cc_sw_sts_on_sw_a_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p04_cc_sw_sts_on_sw_a_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p04_cc_sw_sts_on_sw_a_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p04_cc_sw_sts_rsm_sw_a_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p04_cc_sw_sts_rsm_sw_a_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p04_cc_sw_sts_rsm_sw_a_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p04_cc_sw_sts_set_sw_a_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p04_cc_sw_sts_set_sw_a_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p04_cc_sw_sts_set_sw_a_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p04_cc_sw_sts_spd_inc_sw_a_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p04_cc_sw_sts_spd_inc_sw_a_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p04_cc_sw_sts_spd_inc_sw_a_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p04_cc_sw_sts_spd_dec_sw_a_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p04_cc_sw_sts_spd_dec_sw_a_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p04_cc_sw_sts_spd_dec_sw_a_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p04_cc_sw_sts_sw_data_intgty_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p04_cc_sw_sts_sw_data_intgty_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p04_cc_sw_sts_sw_data_intgty_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p04_cc_sw_sts_pv_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p04_cc_sw_sts_pv_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p04_cc_sw_sts_pv_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p04_cc_sw_sts_dist_inc_sw_a_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p04_cc_sw_sts_dist_inc_sw_a_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p04_cc_sw_sts_dist_inc_sw_a_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p04_cc_sw_sts_dist_dec_sw_a_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p04_cc_sw_sts_dist_dec_sw_a_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p04_cc_sw_sts_dist_dec_sw_a_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p04_cc_sw_sts_alv_rc_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p04_cc_sw_sts_alv_rc_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p04_cc_sw_sts_alv_rc_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p04_nrcdscu_req_alv_rchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p04_nrcdscu_req_alv_rchsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p04_nrcdscu_req_alv_rchsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p04_nrcd_shifter_pos_reqd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p04_nrcd_shifter_pos_reqd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p04_nrcd_shifter_pos_reqd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p04_nrcd_toq_req_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p04_nrcd_toq_req_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p04_nrcd_toq_req_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p04_nrcd_crp_spd_req_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p04_nrcd_crp_spd_req_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p04_nrcd_crp_spd_req_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p04_nrcd_crp_spd_req_val_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p04_nrcd_crp_spd_req_val_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p04_nrcd_crp_spd_req_val_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p04_nrcdvcu_req_alv_rchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p04_nrcdvcu_req_alv_rchsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p04_nrcdvcu_req_alv_rchsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_fr_p04_nrcd_toq_req_val_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p04_nrcd_toq_req_val_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p04_nrcd_toq_req_val_hsc1_is_in_range(uint16_t value);

/**
 * Pack message GW_HSC1_FrP08.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_fr_p08_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_fr_p08_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_FrP08.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_fr_p08_unpack(
    struct canvehicle_gw_hsc1_fr_p08_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t canvehicle_gw_hsc1_fr_p08_veh_odo_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p08_veh_odo_h1_hsc1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p08_veh_odo_h1_hsc1_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p08_veh_odo_v_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p08_veh_odo_v_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p08_veh_odo_v_h1_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_FrP09.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_fr_p09_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_fr_p09_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_FrP09.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_fr_p09_unpack(
    struct canvehicle_gw_hsc1_fr_p09_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_fr_p09_sdm_cal_priy_key_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p09_sdm_cal_priy_key_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p09_sdm_cal_priy_key_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p09_dcdc_vol_stpt_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p09_dcdc_vol_stpt_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p09_dcdc_vol_stpt_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p09_veh_drvng_md_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p09_veh_drvng_md_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p09_veh_drvng_md_h1_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_FrP10.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_fr_p10_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_fr_p10_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_FrP10.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_fr_p10_unpack(
    struct canvehicle_gw_hsc1_fr_p10_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p10_otsd_air_tem_cr_val_msk_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p10_otsd_air_tem_cr_val_msk_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p10_otsd_air_tem_cr_val_msk_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p10_otsd_air_tem_cr_val_v_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p10_otsd_air_tem_cr_val_v_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p10_otsd_air_tem_cr_val_v_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p10_otsd_air_tem_cr_val_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p10_otsd_air_tem_cr_val_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p10_otsd_air_tem_cr_val_h1_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_FrP12.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_fr_p12_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_fr_p12_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_FrP12.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_fr_p12_unpack(
    struct canvehicle_gw_hsc1_fr_p12_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p12_dim_lght_lvl_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p12_dim_lght_lvl_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p12_dim_lght_lvl_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_FrP13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_fr_p13_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_fr_p13_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_FrP13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_fr_p13_unpack(
    struct canvehicle_gw_hsc1_fr_p13_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p13_nrcd_acc_req_val_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p13_nrcd_acc_req_val_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p13_nrcd_acc_req_val_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fr_p13_nrcd_sts_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_p13_nrcd_sts_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_p13_nrcd_sts_h1_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_FrS00.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_fr_s00_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_fr_s00_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_FrS00.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_fr_s00_unpack(
    struct canvehicle_gw_hsc1_fr_s00_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_gw_hsc1_fr_s00_nrcd_mstr_chlg_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fr_s00_nrcd_mstr_chlg_h1_hsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fr_s00_nrcd_mstr_chlg_h1_hsc1_is_in_range(uint64_t value);

/**
 * Pack message GW_HSC1_FVCM_FrP00.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_fvcm_fr_p00_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_fvcm_fr_p00_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_FVCM_FrP00.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_fvcm_fr_p00_unpack(
    struct canvehicle_gw_hsc1_fvcm_fr_p00_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fvcm_fr_p00_acc_toq_req_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fvcm_fr_p00_acc_toq_req_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fvcm_fr_p00_acc_toq_req_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_fvcm_fr_p00_acc_toq_req_val_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fvcm_fr_p00_acc_toq_req_val_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fvcm_fr_p00_acc_toq_req_val_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_fvcm_fr_p00_acc_toq_req_val_pvhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fvcm_fr_p00_acc_toq_req_val_pvhsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fvcm_fr_p00_acc_toq_req_val_pvhsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fvcm_fr_p00_accaeb_dcl_req_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fvcm_fr_p00_accaeb_dcl_req_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fvcm_fr_p00_accaeb_dcl_req_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fvcm_fr_p00_acc_alv_rchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fvcm_fr_p00_acc_alv_rchsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fvcm_fr_p00_acc_alv_rchsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_FVCM_FrP01.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_fvcm_fr_p01_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_fvcm_fr_p01_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_FVCM_FrP01.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_fvcm_fr_p01_unpack(
    struct canvehicle_gw_hsc1_fvcm_fr_p01_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fvcm_fr_p01_aeb_sys_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fvcm_fr_p01_aeb_sys_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fvcm_fr_p01_aeb_sys_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fvcm_fr_p01_aeb_sys_flt_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fvcm_fr_p01_aeb_sys_flt_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fvcm_fr_p01_aeb_sys_flt_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fvcm_fr_p01_acc_sys_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fvcm_fr_p01_acc_sys_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fvcm_fr_p01_acc_sys_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fvcm_fr_p01_acc_sys_flt_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fvcm_fr_p01_acc_sys_flt_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fvcm_fr_p01_acc_sys_flt_sts_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_FVCM_FrP02.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_fvcm_fr_p02_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_fvcm_fr_p02_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_FVCM_FrP02.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_fvcm_fr_p02_unpack(
    struct canvehicle_gw_hsc1_fvcm_fr_p02_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fvcm_fr_p02_dist_since_trgt_camr_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fvcm_fr_p02_dist_since_trgt_camr_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fvcm_fr_p02_dist_since_trgt_camr_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_fvcm_fr_p02_spd_ast_req_sts_camr_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fvcm_fr_p02_spd_ast_req_sts_camr_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fvcm_fr_p02_spd_ast_req_sts_camr_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_fvcm_fr_p02_trgt_spd_req_camr_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_fvcm_fr_p02_trgt_spd_req_camr_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_fvcm_fr_p02_trgt_spd_req_camr_hsc1_is_in_range(uint16_t value);

/**
 * Pack message GW_HSC1_IPK_FrP06.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_ipk_fr_p06_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_ipk_fr_p06_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_IPK_FrP06.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_ipk_fr_p06_unpack(
    struct canvehicle_gw_hsc1_ipk_fr_p06_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ipk_fr_p06_calendar_year_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ipk_fr_p06_calendar_year_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ipk_fr_p06_calendar_year_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ipk_fr_p06_calendar_month_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ipk_fr_p06_calendar_month_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ipk_fr_p06_calendar_month_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ipk_fr_p06_calendar_day_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ipk_fr_p06_calendar_day_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ipk_fr_p06_calendar_day_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ipk_fr_p06_hour_of_day_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ipk_fr_p06_hour_of_day_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ipk_fr_p06_hour_of_day_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ipk_fr_p06_minute_of_hour_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ipk_fr_p06_minute_of_hour_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ipk_fr_p06_minute_of_hour_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ipk_fr_p06_time_dsp_fmt_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ipk_fr_p06_time_dsp_fmt_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ipk_fr_p06_time_dsp_fmt_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ipk_fr_p06_secs_of_minute_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ipk_fr_p06_secs_of_minute_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ipk_fr_p06_secs_of_minute_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_IPK_FrP10.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_ipk_fr_p10_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_ipk_fr_p10_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_IPK_FrP10.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_ipk_fr_p10_unpack(
    struct canvehicle_gw_hsc1_ipk_fr_p10_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_ipk_fr_p10_elec_enrg_avg_rst_req_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_ipk_fr_p10_elec_enrg_avg_rst_req_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_ipk_fr_p10_elec_enrg_avg_rst_req_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_PDC_FrP00.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_pdc_fr_p00_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_pdc_fr_p00_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_PDC_FrP00.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_pdc_fr_p00_unpack(
    struct canvehicle_gw_hsc1_pdc_fr_p00_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_pdc_fr_p00_frt_obs_dist_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_pdc_fr_p00_frt_obs_dist_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_pdc_fr_p00_frt_obs_dist_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_pdc_fr_p00_rr_obs_dist_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_pdc_fr_p00_rr_obs_dist_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_pdc_fr_p00_rr_obs_dist_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_PMDC_FrP02.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_pmdc_fr_p02_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_pmdc_fr_p02_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_PMDC_FrP02.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_pmdc_fr_p02_unpack(
    struct canvehicle_gw_hsc1_pmdc_fr_p02_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_pmdc_fr_p02_emgc_call_trigd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_pmdc_fr_p02_emgc_call_trigd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_pmdc_fr_p02_emgc_call_trigd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_pmdc_fr_p02_telmcs_srvc_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_pmdc_fr_p02_telmcs_srvc_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_pmdc_fr_p02_telmcs_srvc_sts_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_PMDC_FrP03.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_pmdc_fr_p03_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_pmdc_fr_p03_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_PMDC_FrP03.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_pmdc_fr_p03_unpack(
    struct canvehicle_gw_hsc1_pmdc_fr_p03_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_pmdc_fr_p03_veh_ld_shed_lvl_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_pmdc_fr_p03_veh_ld_shed_lvl_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_pmdc_fr_p03_veh_ld_shed_lvl_h1_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_SAS_FrP00.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_sas_fr_p00_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_sas_fr_p00_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_SAS_FrP00.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_sas_fr_p00_unpack(
    struct canvehicle_gw_hsc1_sas_fr_p00_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_snsr_cal_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_snsr_cal_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_snsr_cal_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_snsr_inid_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_snsr_inid_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_snsr_inid_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_snsr_mult_capb_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_snsr_mult_capb_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_snsr_mult_capb_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_snsr_flt_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_snsr_flt_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_snsr_flt_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_alv_rchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_alv_rchsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_alv_rchsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_grd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_grd_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_grd_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_extd_pvhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_extd_pvhsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_extd_pvhsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_snsr_chksm_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_snsr_chksm_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_sas_fr_p00_strg_whl_ang_snsr_chksm_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_SCS_FrP00.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p00_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_scs_fr_p00_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_SCS_FrP00.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p00_unpack(
    struct canvehicle_gw_hsc1_scs_fr_p00_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p00_l_drvn_whl_rotl_dist_trchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p00_l_drvn_whl_rotl_dist_trchsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p00_l_drvn_whl_rotl_dist_trchsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p00_l_drvn_whl_rotl_seq_num_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p00_l_drvn_whl_rotl_seq_num_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p00_l_drvn_whl_rotl_seq_num_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p00_l_drvn_whl_rotl_rst_ocd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p00_l_drvn_whl_rotl_rst_ocd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p00_l_drvn_whl_rotl_rst_ocd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p00_l_drvn_whl_rotl_dist_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p00_l_drvn_whl_rotl_dist_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p00_l_drvn_whl_rotl_dist_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_scs_fr_p00_l_drvn_whl_rotl_dist_pls_ctr_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p00_l_drvn_whl_rotl_dist_pls_ctr_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p00_l_drvn_whl_rotl_dist_pls_ctr_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_scs_fr_p00_l_drvn_whl_rotl_dist_tmsp_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p00_l_drvn_whl_rotl_dist_tmsp_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p00_l_drvn_whl_rotl_dist_tmsp_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p00_r_drvn_whl_rotl_dist_trchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p00_r_drvn_whl_rotl_dist_trchsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p00_r_drvn_whl_rotl_dist_trchsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p00_r_drvn_whl_rotl_seq_num_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p00_r_drvn_whl_rotl_seq_num_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p00_r_drvn_whl_rotl_seq_num_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p00_r_drvn_whl_rotl_rst_ocd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p00_r_drvn_whl_rotl_rst_ocd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p00_r_drvn_whl_rotl_rst_ocd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p00_r_drvn_whl_rotl_dist_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p00_r_drvn_whl_rotl_dist_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p00_r_drvn_whl_rotl_dist_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_scs_fr_p00_r_drvn_whl_rotl_dist_pls_ctr_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p00_r_drvn_whl_rotl_dist_pls_ctr_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p00_r_drvn_whl_rotl_dist_pls_ctr_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_scs_fr_p00_r_drvn_whl_rotl_dist_tmsp_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p00_r_drvn_whl_rotl_dist_tmsp_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p00_r_drvn_whl_rotl_dist_tmsp_hsc1_is_in_range(uint16_t value);

/**
 * Pack message GW_HSC1_SCS_FrP01.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p01_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_scs_fr_p01_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_SCS_FrP01.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p01_unpack(
    struct canvehicle_gw_hsc1_scs_fr_p01_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p01_l_non_drvn_whl_rotl_dist_trchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p01_l_non_drvn_whl_rotl_dist_trchsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p01_l_non_drvn_whl_rotl_dist_trchsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p01_l_non_drvn_whl_rotl_seq_num_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p01_l_non_drvn_whl_rotl_seq_num_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p01_l_non_drvn_whl_rotl_seq_num_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p01_l_non_drvn_whl_rotl_rst_ocd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p01_l_non_drvn_whl_rotl_rst_ocd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p01_l_non_drvn_whl_rotl_rst_ocd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p01_l_non_drvn_whl_rotl_dist_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p01_l_non_drvn_whl_rotl_dist_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p01_l_non_drvn_whl_rotl_dist_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_scs_fr_p01_l_non_drvn_whl_rotl_dist_pchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p01_l_non_drvn_whl_rotl_dist_pchsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p01_l_non_drvn_whl_rotl_dist_pchsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_scs_fr_p01_l_non_drvn_whl_rotl_dist_thsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p01_l_non_drvn_whl_rotl_dist_thsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p01_l_non_drvn_whl_rotl_dist_thsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p01_r_non_drvn_whl_rotl_dist_trchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p01_r_non_drvn_whl_rotl_dist_trchsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p01_r_non_drvn_whl_rotl_dist_trchsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p01_r_non_drvn_whl_rotl_seq_num_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p01_r_non_drvn_whl_rotl_seq_num_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p01_r_non_drvn_whl_rotl_seq_num_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p01_r_non_drvn_whl_rotl_rst_ocd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p01_r_non_drvn_whl_rotl_rst_ocd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p01_r_non_drvn_whl_rotl_rst_ocd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p01_r_non_drvn_whl_rotl_dist_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p01_r_non_drvn_whl_rotl_dist_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p01_r_non_drvn_whl_rotl_dist_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_scs_fr_p01_r_non_drvn_whl_rotl_dist_pchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p01_r_non_drvn_whl_rotl_dist_pchsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p01_r_non_drvn_whl_rotl_dist_pchsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_scs_fr_p01_r_non_drvn_whl_rotl_dist_thsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p01_r_non_drvn_whl_rotl_dist_thsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p01_r_non_drvn_whl_rotl_dist_thsc1_is_in_range(uint16_t value);

/**
 * Pack message GW_HSC1_SCS_FrP02.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p02_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_scs_fr_p02_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_SCS_FrP02.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p02_unpack(
    struct canvehicle_gw_hsc1_scs_fr_p02_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p02_vse_lat_acc_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p02_vse_lat_acc_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p02_vse_lat_acc_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p02_vse_longt_acc_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p02_vse_longt_acc_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p02_vse_longt_acc_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canvehicle_gw_hsc1_scs_fr_p02_vse_longt_acc_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p02_vse_longt_acc_hsc1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p02_vse_longt_acc_hsc1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canvehicle_gw_hsc1_scs_fr_p02_vse_lat_acc_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p02_vse_lat_acc_hsc1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p02_vse_lat_acc_hsc1_is_in_range(int16_t value);

/**
 * Pack message GW_HSC1_SCS_FrP03.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p03_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_scs_fr_p03_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_SCS_FrP03.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p03_unpack(
    struct canvehicle_gw_hsc1_scs_fr_p03_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p03_auto_hold_sys_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p03_auto_hold_sys_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p03_auto_hold_sys_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p03_ch_sys_en_toq_intrvn_typ_errhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p03_ch_sys_en_toq_intrvn_typ_errhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p03_ch_sys_en_toq_intrvn_typ_errhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_scs_fr_p03_ch_sys_en_toq_val_extd_rng_rhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p03_ch_sys_en_toq_val_extd_rng_rhsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p03_ch_sys_en_toq_val_extd_rng_rhsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p03_trc_ctrl_alv_rchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p03_trc_ctrl_alv_rchsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p03_trc_ctrl_alv_rchsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_scs_fr_p03_ch_sys_en_toq_req_protn_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p03_ch_sys_en_toq_req_protn_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p03_ch_sys_en_toq_req_protn_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p03_r_non_drvn_whl_rotl_dircn_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p03_r_non_drvn_whl_rotl_dircn_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p03_r_non_drvn_whl_rotl_dircn_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p03_l_non_drvn_whl_rotl_dircn_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p03_l_non_drvn_whl_rotl_dircn_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p03_l_non_drvn_whl_rotl_dircn_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p03_scsnrcd_alv_rchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p03_scsnrcd_alv_rchsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p03_scsnrcd_alv_rchsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p03_scs_dcl_ahsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p03_scs_dcl_ahsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p03_scs_dcl_ahsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_SCS_FrP05.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p05_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_scs_fr_p05_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_SCS_FrP05.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p05_unpack(
    struct canvehicle_gw_hsc1_scs_fr_p05_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p05_brk_sys_tr_gear_req_typ_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p05_brk_sys_tr_gear_req_typ_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p05_brk_sys_tr_gear_req_typ_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p05_brk_sys_tr_gear_req_gear_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p05_brk_sys_tr_gear_req_gear_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p05_brk_sys_tr_gear_req_gear_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p05_absahsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p05_absahsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p05_absahsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p05_absfhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p05_absfhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p05_absfhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p05_tcsahsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p05_tcsahsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p05_tcsahsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p05_tcs_enbd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p05_tcs_enbd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p05_tcs_enbd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p05_vse_sys_ahsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p05_vse_sys_ahsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p05_vse_sys_ahsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p05_veh_dyn_yaw_rate_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p05_veh_dyn_yaw_rate_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p05_veh_dyn_yaw_rate_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canvehicle_gw_hsc1_scs_fr_p05_veh_dyn_yaw_rate_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p05_veh_dyn_yaw_rate_hsc1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p05_veh_dyn_yaw_rate_hsc1_is_in_range(int16_t value);

/**
 * Pack message GW_HSC1_SCS_FrP08.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p08_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_scs_fr_p08_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_SCS_FrP08.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p08_unpack(
    struct canvehicle_gw_hsc1_scs_fr_p08_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canvehicle_gw_hsc1_scs_fr_p08_longd_acc_snsr_val_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p08_longd_acc_snsr_val_hsc1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p08_longd_acc_snsr_val_hsc1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canvehicle_gw_hsc1_scs_fr_p08_latd_acc_snsr_val_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p08_latd_acc_snsr_val_hsc1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p08_latd_acc_snsr_val_hsc1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p08_longd_latd_acc_snsr_val_archsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p08_longd_latd_acc_snsr_val_archsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p08_longd_latd_acc_snsr_val_archsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_SCS_FrP09.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p09_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_scs_fr_p09_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_SCS_FrP09.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p09_unpack(
    struct canvehicle_gw_hsc1_scs_fr_p09_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p09_brk_flud_lvl_low_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p09_brk_flud_lvl_low_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p09_brk_flud_lvl_low_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p09_brk_flud_lvl_low_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p09_brk_flud_lvl_low_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p09_brk_flud_lvl_low_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p09_brk_pdl_drvr_appd_prs_alv_rchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p09_brk_pdl_drvr_appd_prs_alv_rchsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p09_brk_pdl_drvr_appd_prs_alv_rchsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p09_brk_pdl_drvr_appd_prs_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p09_brk_pdl_drvr_appd_prs_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p09_brk_pdl_drvr_appd_prs_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p09_brk_pdl_drvr_appd_prs_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p09_brk_pdl_drvr_appd_prs_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p09_brk_pdl_drvr_appd_prs_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_SCS_FrP11.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p11_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_scs_fr_p11_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_SCS_FrP11.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p11_unpack(
    struct canvehicle_gw_hsc1_scs_fr_p11_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p11_whl_gnd_vel_l_drvn_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p11_whl_gnd_vel_l_drvn_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p11_whl_gnd_vel_l_drvn_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_scs_fr_p11_whl_gnd_vel_l_drvn_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p11_whl_gnd_vel_l_drvn_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p11_whl_gnd_vel_l_drvn_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p11_whl_gnd_vel_r_drvn_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p11_whl_gnd_vel_r_drvn_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p11_whl_gnd_vel_r_drvn_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_scs_fr_p11_whl_gnd_vel_r_drvn_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p11_whl_gnd_vel_r_drvn_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p11_whl_gnd_vel_r_drvn_hsc1_is_in_range(uint16_t value);

/**
 * Pack message GW_HSC1_SCS_FrP12.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p12_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_scs_fr_p12_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_SCS_FrP12.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p12_unpack(
    struct canvehicle_gw_hsc1_scs_fr_p12_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p12_whl_gnd_vel_l_non_drvn_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p12_whl_gnd_vel_l_non_drvn_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p12_whl_gnd_vel_l_non_drvn_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_scs_fr_p12_whl_gnd_vel_l_non_drvn_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p12_whl_gnd_vel_l_non_drvn_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p12_whl_gnd_vel_l_non_drvn_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p12_whl_gnd_vel_r_non_drvn_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p12_whl_gnd_vel_r_non_drvn_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p12_whl_gnd_vel_r_non_drvn_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_scs_fr_p12_whl_gnd_vel_r_non_drvn_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p12_whl_gnd_vel_r_non_drvn_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p12_whl_gnd_vel_r_non_drvn_hsc1_is_in_range(uint16_t value);

/**
 * Pack message GW_HSC1_SCS_FrP13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p13_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_scs_fr_p13_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_SCS_FrP13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p13_unpack(
    struct canvehicle_gw_hsc1_scs_fr_p13_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p13_vse_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p13_vse_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p13_vse_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p13_vse_md_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p13_vse_md_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p13_vse_md_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p13_absiohsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p13_absiohsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p13_absiohsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p13_tcs_opng_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p13_tcs_opng_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p13_tcs_opng_sts_hsc1_is_in_range(uint8_t value);

/**
 * Pack message GW_HSC1_SCS_FrP15.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p15_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_scs_fr_p15_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_SCS_FrP15.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p15_unpack(
    struct canvehicle_gw_hsc1_scs_fr_p15_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p15_veh_spd_avg_drvn_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p15_veh_spd_avg_drvn_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p15_veh_spd_avg_drvn_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_scs_fr_p15_veh_spd_avg_drvn_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p15_veh_spd_avg_drvn_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p15_veh_spd_avg_drvn_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p15_dist_rc_avg_drvn_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p15_dist_rc_avg_drvn_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p15_dist_rc_avg_drvn_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p15_dist_rc_avg_drvn_rst_ocd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p15_dist_rc_avg_drvn_rst_ocd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p15_dist_rc_avg_drvn_rst_ocd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_scs_fr_p15_dist_rc_avg_drvn_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p15_dist_rc_avg_drvn_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p15_dist_rc_avg_drvn_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p15_veh_spd_avg_non_drvn_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p15_veh_spd_avg_non_drvn_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p15_veh_spd_avg_non_drvn_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_scs_fr_p15_veh_spd_avg_non_drvn_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p15_veh_spd_avg_non_drvn_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p15_veh_spd_avg_non_drvn_hsc1_is_in_range(uint16_t value);

/**
 * Pack message GW_HSC1_SCS_FrP16.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p16_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_scs_fr_p16_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_SCS_FrP16.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_scs_fr_p16_unpack(
    struct canvehicle_gw_hsc1_scs_fr_p16_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_gw_hsc1_scs_fr_p16_brk_sys_rgtv_toq_trgt_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p16_brk_sys_rgtv_toq_trgt_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p16_brk_sys_rgtv_toq_trgt_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p16_brk_sys_rgtv_toq_trgt_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p16_brk_sys_rgtv_toq_trgt_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p16_brk_sys_rgtv_toq_trgt_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_scs_fr_p16_brk_sys_rgtv_toq_trgt_alv_rchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p16_brk_sys_rgtv_toq_trgt_alv_rchsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p16_brk_sys_rgtv_toq_trgt_alv_rchsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t canvehicle_gw_hsc1_scs_fr_p16_brk_sys_rgtv_toq_trgt_pvhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_scs_fr_p16_brk_sys_rgtv_toq_trgt_pvhsc1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_scs_fr_p16_brk_sys_rgtv_toq_trgt_pvhsc1_is_in_range(uint32_t value);

/**
 * Pack message GW_HSC1_VehConfign.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_gw_hsc1_veh_confign_pack(
    uint8_t *dst_p,
    const struct canvehicle_gw_hsc1_veh_confign_t *src_p,
    size_t size);

/**
 * Unpack message GW_HSC1_VehConfign.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_gw_hsc1_veh_confign_unpack(
    struct canvehicle_gw_hsc1_veh_confign_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_info_mkt_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_info_mkt_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_info_mkt_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_cofign_body_ctrlr_typ_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_cofign_body_ctrlr_typ_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_cofign_body_ctrlr_typ_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_info_drv_hadl_typ_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_info_drv_hadl_typ_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_info_drv_hadl_typ_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_cofign_tpms_typ_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_cofign_tpms_typ_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_cofign_tpms_typ_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_cofign_en_typ_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_cofign_en_typ_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_cofign_en_typ_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_info_emsn_regn_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_info_emsn_regn_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_info_emsn_regn_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_cofign_tr_typ_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_cofign_tr_typ_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_cofign_tr_typ_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_info_body_typ_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_info_body_typ_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_info_body_typ_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_info_pf_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_info_pf_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_info_pf_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_cofign_ac_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_cofign_ac_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_cofign_ac_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_cofign_hyb_lvl_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_cofign_hyb_lvl_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_cofign_hyb_lvl_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_info_brand_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_info_brand_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_info_brand_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_cofign_strg_typ_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_cofign_strg_typ_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_cofign_strg_typ_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_cofign_trnsf_case_typ_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_cofign_trnsf_case_typ_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_cofign_trnsf_case_typ_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_cofign_cc_typ_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_cofign_cc_typ_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_cofign_cc_typ_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_cofign_parkng_brk_typ_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_cofign_parkng_brk_typ_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_cofign_parkng_brk_typ_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_cofign_slip_ctrl_typ_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_cofign_slip_ctrl_typ_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_cofign_slip_ctrl_typ_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_cofign_sp_st_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_cofign_sp_st_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_cofign_sp_st_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_cofign_sta_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_cofign_sta_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_cofign_sta_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_info_mdl_year_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_info_mdl_year_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_info_mdl_year_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_gw_hsc1_veh_confign_veh_cofign_inftn_typ_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_gw_hsc1_veh_confign_veh_cofign_inftn_typ_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_gw_hsc1_veh_confign_veh_cofign_inftn_typ_h1_hsc1_is_in_range(uint8_t value);

/**
 * Pack message HCU_HSC1_FrP00.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_hcu_hsc1_fr_p00_pack(
    uint8_t *dst_p,
    const struct canvehicle_hcu_hsc1_fr_p00_t *src_p,
    size_t size);

/**
 * Unpack message HCU_HSC1_FrP00.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_hcu_hsc1_fr_p00_unpack(
    struct canvehicle_hcu_hsc1_fr_p00_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p00_ept_accel_actu_pos_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p00_ept_accel_actu_pos_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p00_ept_accel_actu_pos_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p00_ept_crk_abotd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p00_ept_crk_abotd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p00_ept_crk_abotd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p00_rvsept_rdy_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p00_rvsept_rdy_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p00_rvsept_rdy_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p00_ept_st_cmd_on_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p00_ept_st_cmd_on_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p00_ept_st_cmd_on_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p00_ept_brk_pdl_dscrt_inpt_sts_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p00_ept_brk_pdl_dscrt_inpt_sts_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p00_ept_brk_pdl_dscrt_inpt_sts_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p00_ept_brk_pdl_dscrt_inpt_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p00_ept_brk_pdl_dscrt_inpt_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p00_ept_brk_pdl_dscrt_inpt_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p00_hcu_fr_p00_rolling_counter_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p00_hcu_fr_p00_rolling_counter_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p00_hcu_fr_p00_rolling_counter_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p00_ept_accel_actu_pos_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p00_ept_accel_actu_pos_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p00_ept_accel_actu_pos_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p00_hcu_fr_p00_checksum_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p00_hcu_fr_p00_checksum_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p00_hcu_fr_p00_checksum_hsc1_is_in_range(uint8_t value);

/**
 * Pack message HCU_HSC1_FrP01.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_hcu_hsc1_fr_p01_pack(
    uint8_t *dst_p,
    const struct canvehicle_hcu_hsc1_fr_p01_t *src_p,
    size_t size);

/**
 * Unpack message HCU_HSC1_FrP01.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_hcu_hsc1_fr_p01_unpack(
    struct canvehicle_hcu_hsc1_fr_p01_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_hcu_hsc1_fr_p01_ept_rgtv_brk_actu_toq_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p01_ept_rgtv_brk_actu_toq_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p01_ept_rgtv_brk_actu_toq_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_hcu_hsc1_fr_p01_ept_rgtv_brk_toq_lmt_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p01_ept_rgtv_brk_toq_lmt_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p01_ept_rgtv_brk_toq_lmt_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p01_ept_rgtv_brk_sys_flt_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p01_ept_rgtv_brk_sys_flt_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p01_ept_rgtv_brk_sys_flt_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p01_ept_rdy_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p01_ept_rdy_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p01_ept_rdy_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p01_ept_rgtn_lvl_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p01_ept_rgtn_lvl_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p01_ept_rgtn_lvl_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p01_ept_toq_rducn_flr_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p01_ept_toq_rducn_flr_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p01_ept_toq_rducn_flr_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p01_ept_rgtv_cstdn_toq_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p01_ept_rgtv_cstdn_toq_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p01_ept_rgtv_cstdn_toq_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p01_ept_accel_efctv_pos_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p01_ept_accel_efctv_pos_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p01_ept_accel_efctv_pos_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_hcu_hsc1_fr_p01_ept_rgtv_cstdn_toq_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p01_ept_rgtv_cstdn_toq_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p01_ept_rgtv_cstdn_toq_hsc1_is_in_range(uint16_t value);

/**
 * Pack message HCU_HSC1_FrP07.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_hcu_hsc1_fr_p07_pack(
    uint8_t *dst_p,
    const struct canvehicle_hcu_hsc1_fr_p07_t *src_p,
    size_t size);

/**
 * Unpack message HCU_HSC1_FrP07.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_hcu_hsc1_fr_p07_unpack(
    struct canvehicle_hcu_hsc1_fr_p07_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p07_ept_drv_efncy_ind_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p07_ept_drv_efncy_ind_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p07_ept_drv_efncy_ind_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p07_ept_drv_efncy_ind_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p07_ept_drv_efncy_ind_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p07_ept_drv_efncy_ind_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p07_eptedu_clnt_tem_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p07_eptedu_clnt_tem_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p07_eptedu_clnt_tem_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p07_eptcc_flt_prst_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p07_eptcc_flt_prst_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p07_eptcc_flt_prst_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p07_ept_mot_clnt_flt_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p07_ept_mot_clnt_flt_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p07_ept_mot_clnt_flt_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p07_ept_mot_ovhtd_iohsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p07_ept_mot_ovhtd_iohsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p07_ept_mot_ovhtd_iohsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p07_elec_mot_flt_iohsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p07_elec_mot_flt_iohsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p07_elec_mot_flt_iohsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p07_ept_flt_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p07_ept_flt_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p07_ept_flt_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p07_ept_drvng_md_sw_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p07_ept_drvng_md_sw_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p07_ept_drvng_md_sw_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_hcu_hsc1_fr_p07_eptcc_trgt_spd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p07_eptcc_trgt_spd_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p07_eptcc_trgt_spd_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p07_eptccahsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p07_eptccahsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p07_eptccahsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p07_ept_sys_pwr_lmt_ahsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p07_ept_sys_pwr_lmt_ahsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p07_ept_sys_pwr_lmt_ahsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p07_eptcc_enbd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p07_eptcc_enbd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p07_eptcc_enbd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p07_ept_hzrd_sta_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p07_ept_hzrd_sta_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p07_ept_hzrd_sta_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p07_eptedu_clnt_tem_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p07_eptedu_clnt_tem_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p07_eptedu_clnt_tem_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p07_elec_veh_sys_md_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p07_elec_veh_sys_md_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p07_elec_veh_sys_md_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_hcu_hsc1_fr_p07_ept_sys_pwr_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p07_ept_sys_pwr_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p07_ept_sys_pwr_hsc1_is_in_range(uint16_t value);

/**
 * Pack message HCU_HSC1_FrP08.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_hcu_hsc1_fr_p08_pack(
    uint8_t *dst_p,
    const struct canvehicle_hcu_hsc1_fr_p08_t *src_p,
    size_t size);

/**
 * Unpack message HCU_HSC1_FrP08.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_hcu_hsc1_fr_p08_unpack(
    struct canvehicle_hcu_hsc1_fr_p08_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p08_ept_tr_inpt_shaft_min_avlbl_toq_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p08_ept_tr_inpt_shaft_min_avlbl_toq_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p08_ept_tr_inpt_shaft_min_avlbl_toq_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p08_ept_tr_inpt_shaft_max_avlbl_toq_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p08_ept_tr_inpt_shaft_max_avlbl_toq_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p08_ept_tr_inpt_shaft_max_avlbl_toq_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_hcu_hsc1_fr_p08_ept_tr_inpt_shaft_min_avlbl_toq_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p08_ept_tr_inpt_shaft_min_avlbl_toq_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p08_ept_tr_inpt_shaft_min_avlbl_toq_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_hcu_hsc1_fr_p08_ept_tr_inpt_shaft_max_avlbl_toq_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p08_ept_tr_inpt_shaft_max_avlbl_toq_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p08_ept_tr_inpt_shaft_max_avlbl_toq_hsc1_is_in_range(uint16_t value);

/**
 * Pack message HCU_HSC1_FrP10.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_hcu_hsc1_fr_p10_pack(
    uint8_t *dst_p,
    const struct canvehicle_hcu_hsc1_fr_p10_t *src_p,
    size_t size);

/**
 * Unpack message HCU_HSC1_FrP10.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_hcu_hsc1_fr_p10_unpack(
    struct canvehicle_hcu_hsc1_fr_p10_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p10_eptac_ld_ald_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p10_eptac_ld_ald_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p10_eptac_ld_ald_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p10_eptac_ld_ald_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p10_eptac_ld_ald_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p10_eptac_ld_ald_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p10_eptac_ld_grd_ald_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p10_eptac_ld_grd_ald_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p10_eptac_ld_grd_ald_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p10_eptac_ld_grd_ald_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p10_eptac_ld_grd_ald_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p10_eptac_ld_grd_ald_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p10_eptedu_clnt_pump_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p10_eptedu_clnt_pump_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p10_eptedu_clnt_pump_sts_hsc1_is_in_range(uint8_t value);

/**
 * Pack message HCU_HSC1_FrP11.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_hcu_hsc1_fr_p11_pack(
    uint8_t *dst_p,
    const struct canvehicle_hcu_hsc1_fr_p11_t *src_p,
    size_t size);

/**
 * Unpack message HCU_HSC1_FrP11.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_hcu_hsc1_fr_p11_unpack(
    struct canvehicle_hcu_hsc1_fr_p11_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p11_rvsept_crk_abotd_rsn_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p11_rvsept_crk_abotd_rsn_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p11_rvsept_crk_abotd_rsn_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p11_rvsept_run_abotd_rsn_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p11_rvsept_run_abotd_rsn_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p11_rvsept_run_abotd_rsn_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p11_rvsept_crk_abotd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p11_rvsept_crk_abotd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p11_rvsept_crk_abotd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p11_rvsept_run_abotd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p11_rvsept_run_abotd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p11_rvsept_run_abotd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p11_eptasl_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p11_eptasl_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p11_eptasl_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p11_ept_info_dsp_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p11_ept_info_dsp_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p11_ept_info_dsp_hsc1_is_in_range(uint8_t value);

/**
 * Pack message HCU_HSC1_FrP13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_hcu_hsc1_fr_p13_pack(
    uint8_t *dst_p,
    const struct canvehicle_hcu_hsc1_fr_p13_t *src_p,
    size_t size);

/**
 * Unpack message HCU_HSC1_FrP13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_hcu_hsc1_fr_p13_unpack(
    struct canvehicle_hcu_hsc1_fr_p13_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p13_ept_drvr_req_inpt_shaft_tvhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p13_ept_drvr_req_inpt_shaft_tvhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p13_ept_drvr_req_inpt_shaft_tvhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p13_ept_tr_inpt_shaft_toq_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p13_ept_tr_inpt_shaft_toq_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p13_ept_tr_inpt_shaft_toq_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p13_ept_tr_inpt_shaft_spd_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p13_ept_tr_inpt_shaft_spd_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p13_ept_tr_inpt_shaft_spd_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_hcu_hsc1_fr_p13_ept_drvr_req_inpt_shaft_toq_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p13_ept_drvr_req_inpt_shaft_toq_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p13_ept_drvr_req_inpt_shaft_toq_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p13_epthvdcdc_md_req_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p13_epthvdcdc_md_req_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p13_epthvdcdc_md_req_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_hcu_hsc1_fr_p13_ept_tr_inpt_shaft_toq_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p13_ept_tr_inpt_shaft_toq_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p13_ept_tr_inpt_shaft_toq_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_hcu_hsc1_fr_p13_ept_tr_inpt_shaft_spd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p13_ept_tr_inpt_shaft_spd_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p13_ept_tr_inpt_shaft_spd_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p13_vcu_acc_req_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p13_vcu_acc_req_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p13_vcu_acc_req_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_fr_p13_vcu_acc_req_val_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_fr_p13_vcu_acc_req_val_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_fr_p13_vcu_acc_req_val_hsc1_is_in_range(uint8_t value);

/**
 * Pack message HCU_HSC1_TCM_FrP03.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_hcu_hsc1_tcm_fr_p03_pack(
    uint8_t *dst_p,
    const struct canvehicle_hcu_hsc1_tcm_fr_p03_t *src_p,
    size_t size);

/**
 * Unpack message HCU_HSC1_TCM_FrP03.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_hcu_hsc1_tcm_fr_p03_unpack(
    struct canvehicle_hcu_hsc1_tcm_fr_p03_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_tcm_fr_p03_autoc_tr_gear_shft_dircn_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_tcm_fr_p03_autoc_tr_gear_shft_dircn_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_tcm_fr_p03_autoc_tr_gear_shft_dircn_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hcu_hsc1_tcm_fr_p03_autoc_tr_gear_shft_dircn_fhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hcu_hsc1_tcm_fr_p03_autoc_tr_gear_shft_dircn_fhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hcu_hsc1_tcm_fr_p03_autoc_tr_gear_shft_dircn_fhsc1_is_in_range(uint8_t value);

/**
 * Pack message HVDCDC_HSC1_FrP01.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_hvdcdc_hsc1_fr_p01_pack(
    uint8_t *dst_p,
    const struct canvehicle_hvdcdc_hsc1_fr_p01_t *src_p,
    size_t size);

/**
 * Unpack message HVDCDC_HSC1_FrP01.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_hvdcdc_hsc1_fr_p01_unpack(
    struct canvehicle_hvdcdc_hsc1_fr_p01_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p01_hvdcdc_drtng_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p01_hvdcdc_drtng_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p01_hvdcdc_drtng_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p01_hvdcdc_actv_dis_over_time_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p01_hvdcdc_actv_dis_over_time_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p01_hvdcdc_actv_dis_over_time_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p01_hvdcdc_over_curr_prot_lvhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p01_hvdcdc_over_curr_prot_lvhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p01_hvdcdc_over_curr_prot_lvhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_hvdcdc_hsc1_fr_p01_hvdcdchv_side_vol_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p01_hvdcdchv_side_vol_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p01_hvdcdchv_side_vol_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p01_hvdcdchv_side_crnt_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p01_hvdcdchv_side_crnt_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p01_hvdcdchv_side_crnt_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p01_hvdcdc_sta_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p01_hvdcdc_sta_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p01_hvdcdc_sta_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p01_hvdcdchv_side_vol_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p01_hvdcdchv_side_vol_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p01_hvdcdchv_side_vol_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_hvdcdc_hsc1_fr_p01_hvdcdchv_side_crnt_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p01_hvdcdchv_side_crnt_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p01_hvdcdchv_side_crnt_hsc1_is_in_range(uint16_t value);

/**
 * Pack message HVDCDC_HSC1_FrP02.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_hvdcdc_hsc1_fr_p02_pack(
    uint8_t *dst_p,
    const struct canvehicle_hvdcdc_hsc1_fr_p02_t *src_p,
    size_t size);

/**
 * Unpack message HVDCDC_HSC1_FrP02.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_hvdcdc_hsc1_fr_p02_unpack(
    struct canvehicle_hvdcdc_hsc1_fr_p02_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p02_dc_over_current_hvhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p02_dc_over_current_hvhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p02_dc_over_current_hvhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p02_dc_volt_fail_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p02_dc_volt_fail_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p02_dc_volt_fail_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p02_hvdcdc_ld_ratio_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p02_hvdcdc_ld_ratio_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p02_hvdcdc_ld_ratio_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p02_hvdcdc_ld_ratio_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p02_hvdcdc_ld_ratio_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p02_hvdcdc_ld_ratio_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p02_dc_current_max_hvhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p02_dc_current_max_hvhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p02_dc_current_max_hvhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p02_dc_under_volt_lvhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p02_dc_under_volt_lvhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p02_dc_under_volt_lvhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p02_dc_under_volt_hvhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p02_dc_under_volt_hvhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p02_dc_under_volt_hvhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p02_dc_over_volt_lvhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p02_dc_over_volt_lvhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p02_dc_over_volt_lvhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p02_dc_over_volt_hvhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p02_dc_over_volt_hvhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p02_dc_over_volt_hvhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p02_dc_over_current_lvhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p02_dc_over_current_lvhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p02_dc_over_current_lvhsc1_is_in_range(uint8_t value);

/**
 * Pack message HVDCDC_HSC1_FrP03.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_hvdcdc_hsc1_fr_p03_pack(
    uint8_t *dst_p,
    const struct canvehicle_hvdcdc_hsc1_fr_p03_t *src_p,
    size_t size);

/**
 * Unpack message HVDCDC_HSC1_FrP03.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_hvdcdc_hsc1_fr_p03_unpack(
    struct canvehicle_hvdcdc_hsc1_fr_p03_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_tem_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_tem_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_tem_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p03_hvdcdclv_side_vol_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p03_hvdcdclv_side_vol_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p03_hvdcdclv_side_vol_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p03_hvdcdclv_side_vol_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p03_hvdcdclv_side_vol_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p03_hvdcdclv_side_vol_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p03_hvdcdclv_side_stpt_fdbk_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p03_hvdcdclv_side_stpt_fdbk_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p03_hvdcdclv_side_stpt_fdbk_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p03_hvdcdclv_side_stpt_fdbk_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p03_hvdcdclv_side_stpt_fdbk_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p03_hvdcdclv_side_stpt_fdbk_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p03_hvdcdclv_side_crnt_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p03_hvdcdclv_side_crnt_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p03_hvdcdclv_side_crnt_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_clnt_pump_pwm_req_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_clnt_pump_pwm_req_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_clnt_pump_pwm_req_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p03_hvdcdclv_side_crnt_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p03_hvdcdclv_side_crnt_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p03_hvdcdclv_side_crnt_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_hdwr_flr_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_hdwr_flr_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_hdwr_flr_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_intnl_flr_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_intnl_flr_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_intnl_flr_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_over_htd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_over_htd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_over_htd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_counter01_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_counter01_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_counter01_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_checksum01_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_checksum01_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_hvdcdc_hsc1_fr_p03_hvdcdc_checksum01_hsc1_is_in_range(uint8_t value);

/**
 * Pack message ISC_HSC1_FrP03.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_isc_hsc1_fr_p03_pack(
    uint8_t *dst_p,
    const struct canvehicle_isc_hsc1_fr_p03_t *src_p,
    size_t size);

/**
 * Unpack message ISC_HSC1_FrP03.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_isc_hsc1_fr_p03_unpack(
    struct canvehicle_isc_hsc1_fr_p03_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_isc_hsc1_fr_p03_isg_actu_toq_v_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_isc_hsc1_fr_p03_isg_actu_toq_v_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_isc_hsc1_fr_p03_isg_actu_toq_v_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_isc_hsc1_fr_p03_isg_sta_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_isc_hsc1_fr_p03_isg_sta_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_isc_hsc1_fr_p03_isg_sta_h1_hsc1_is_in_range(uint8_t value);

/**
 * Pack message ISC_HSC1_FrS01.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_isc_hsc1_fr_s01_pack(
    uint8_t *dst_p,
    const struct canvehicle_isc_hsc1_fr_s01_t *src_p,
    size_t size);

/**
 * Unpack message ISC_HSC1_FrS01.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_isc_hsc1_fr_s01_unpack(
    struct canvehicle_isc_hsc1_fr_s01_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_isc_hsc1_fr_s01_isc_immo_data1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_isc_hsc1_fr_s01_isc_immo_data1_hsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_isc_hsc1_fr_s01_isc_immo_data1_hsc1_is_in_range(uint64_t value);

/**
 * Pack message ISC_HSC1_FrS02.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_isc_hsc1_fr_s02_pack(
    uint8_t *dst_p,
    const struct canvehicle_isc_hsc1_fr_s02_t *src_p,
    size_t size);

/**
 * Unpack message ISC_HSC1_FrS02.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_isc_hsc1_fr_s02_unpack(
    struct canvehicle_isc_hsc1_fr_s02_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_isc_hsc1_fr_s02_isc_immo_data2_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_isc_hsc1_fr_s02_isc_immo_data2_hsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_isc_hsc1_fr_s02_isc_immo_data2_hsc1_is_in_range(uint64_t value);

/**
 * Pack message ISC_HSC1_FrS03.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_isc_hsc1_fr_s03_pack(
    uint8_t *dst_p,
    const struct canvehicle_isc_hsc1_fr_s03_t *src_p,
    size_t size);

/**
 * Unpack message ISC_HSC1_FrS03.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_isc_hsc1_fr_s03_unpack(
    struct canvehicle_isc_hsc1_fr_s03_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_isc_hsc1_fr_s03_isc_to_pf_immo_chlg_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_isc_hsc1_fr_s03_isc_to_pf_immo_chlg_hsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_isc_hsc1_fr_s03_isc_to_pf_immo_chlg_hsc1_is_in_range(uint64_t value);

/**
 * Pack message SCU_HSC1_FrP00.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_scu_hsc1_fr_p00_pack(
    uint8_t *dst_p,
    const struct canvehicle_scu_hsc1_fr_p00_t *src_p,
    size_t size);

/**
 * Unpack message SCU_HSC1_FrP00.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_scu_hsc1_fr_p00_unpack(
    struct canvehicle_scu_hsc1_fr_p00_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_scu_hsc1_fr_p00_scunrcd_alv_rchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_scu_hsc1_fr_p00_scunrcd_alv_rchsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_scu_hsc1_fr_p00_scunrcd_alv_rchsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_scu_hsc1_fr_p00_scunrcd_avlbl_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_scu_hsc1_fr_p00_scunrcd_avlbl_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_scu_hsc1_fr_p00_scunrcd_avlbl_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_scu_hsc1_fr_p00_scu_drvr_intrvn_ahsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_scu_hsc1_fr_p00_scu_drvr_intrvn_ahsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_scu_hsc1_fr_p00_scu_drvr_intrvn_ahsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_scu_hsc1_fr_p00_scusoc_md_sw_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_scu_hsc1_fr_p00_scusoc_md_sw_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_scu_hsc1_fr_p00_scusoc_md_sw_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_scu_hsc1_fr_p00_scu_park_actr_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_scu_hsc1_fr_p00_scu_park_actr_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_scu_hsc1_fr_p00_scu_park_actr_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_scu_hsc1_fr_p00_scu_shifter_pos_rchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_scu_hsc1_fr_p00_scu_shifter_pos_rchsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_scu_hsc1_fr_p00_scu_shifter_pos_rchsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_scu_hsc1_fr_p00_scu_shifter_lvr_pos_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_scu_hsc1_fr_p00_scu_shifter_lvr_pos_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_scu_hsc1_fr_p00_scu_shifter_lvr_pos_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_scu_hsc1_fr_p00_scu_shifter_pos_invsn_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_scu_hsc1_fr_p00_scu_shifter_pos_invsn_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_scu_hsc1_fr_p00_scu_shifter_pos_invsn_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_scu_hsc1_fr_p00_scu_rgtn_lvl_sw_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_scu_hsc1_fr_p00_scu_rgtn_lvl_sw_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_scu_hsc1_fr_p00_scu_rgtn_lvl_sw_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_scu_hsc1_fr_p00_scu_drvng_md_sw_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_scu_hsc1_fr_p00_scu_drvng_md_sw_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_scu_hsc1_fr_p00_scu_drvng_md_sw_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_scu_hsc1_fr_p00_scu_park_lck_req_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_scu_hsc1_fr_p00_scu_park_lck_req_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_scu_hsc1_fr_p00_scu_park_lck_req_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_scu_hsc1_fr_p00_scu_park_lck_req_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_scu_hsc1_fr_p00_scu_park_lck_req_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_scu_hsc1_fr_p00_scu_park_lck_req_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_scu_hsc1_fr_p00_scu_park_lck_req_pvhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_scu_hsc1_fr_p00_scu_park_lck_req_pvhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_scu_hsc1_fr_p00_scu_park_lck_req_pvhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_scu_hsc1_fr_p00_scu_shifter_spvs_uit_flr_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_scu_hsc1_fr_p00_scu_shifter_spvs_uit_flr_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_scu_hsc1_fr_p00_scu_shifter_spvs_uit_flr_hsc1_is_in_range(uint8_t value);

/**
 * Pack message SDM_HSC1_FrP00.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_sdm_hsc1_fr_p00_pack(
    uint8_t *dst_p,
    const struct canvehicle_sdm_hsc1_fr_p00_t *src_p,
    size_t size);

/**
 * Unpack message SDM_HSC1_FrP00.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_sdm_hsc1_fr_p00_unpack(
    struct canvehicle_sdm_hsc1_fr_p00_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_sdm_hsc1_fr_p00_fasn_drvr_sblt_ind_cmd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_p00_fasn_drvr_sblt_ind_cmd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_p00_fasn_drvr_sblt_ind_cmd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_sdm_hsc1_fr_p00_fasn_frt_psng_sblt_ind_cmd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_p00_fasn_frt_psng_sblt_ind_cmd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_p00_fasn_frt_psng_sblt_ind_cmd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_sdm_hsc1_fr_p00_sdmrchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_p00_sdmrchsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_p00_sdmrchsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_sdm_hsc1_fr_p00_airbag_sys_flt_ind_cmd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_p00_airbag_sys_flt_ind_cmd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_p00_airbag_sys_flt_ind_cmd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_sdm_hsc1_fr_p00_drvr_sblt_atc_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_p00_drvr_sblt_atc_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_p00_drvr_sblt_atc_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_sdm_hsc1_fr_p00_drvr_sblt_atc_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_p00_drvr_sblt_atc_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_p00_drvr_sblt_atc_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_sdm_hsc1_fr_p00_airbag_dpl_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_p00_airbag_dpl_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_p00_airbag_dpl_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_sdm_hsc1_fr_p00_airbag_dpl_invsn_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_p00_airbag_dpl_invsn_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_p00_airbag_dpl_invsn_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_sdm_hsc1_fr_p00_frt_psng_sblt_atc_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_p00_frt_psng_sblt_atc_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_p00_frt_psng_sblt_atc_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_sdm_hsc1_fr_p00_frt_psng_sblt_atc_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_p00_frt_psng_sblt_atc_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_p00_frt_psng_sblt_atc_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_sdm_hsc1_fr_p00_airbag_sys_flt_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_p00_airbag_sys_flt_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_p00_airbag_sys_flt_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_sdm_hsc1_fr_p00_fasn_sec_row_l_sblt_ind_cmd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_p00_fasn_sec_row_l_sblt_ind_cmd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_p00_fasn_sec_row_l_sblt_ind_cmd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_sdm_hsc1_fr_p00_fasn_sec_row_mid_sblt_ind_chsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_p00_fasn_sec_row_mid_sblt_ind_chsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_p00_fasn_sec_row_mid_sblt_ind_chsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_sdm_hsc1_fr_p00_fasn_sec_row_r_sblt_ind_cmd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_p00_fasn_sec_row_r_sblt_ind_cmd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_p00_fasn_sec_row_r_sblt_ind_cmd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_sdm_hsc1_fr_p00_frt_psng_airbag_ind_req_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_p00_frt_psng_airbag_ind_req_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_p00_frt_psng_airbag_ind_req_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_sdm_hsc1_fr_p00_fasn_sblt_aud_rmndr_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_p00_fasn_sblt_aud_rmndr_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_p00_fasn_sblt_aud_rmndr_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_sdm_hsc1_fr_p00_frt_psng_airbag_enb_ind_fhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_p00_frt_psng_airbag_enb_ind_fhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_p00_frt_psng_airbag_enb_ind_fhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_sdm_hsc1_fr_p00_frt_psng_airbag_dsbl_ind_fhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_p00_frt_psng_airbag_dsbl_ind_fhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_p00_frt_psng_airbag_dsbl_ind_fhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_sdm_hsc1_fr_p00_veh_crsh_typ_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_p00_veh_crsh_typ_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_p00_veh_crsh_typ_hsc1_is_in_range(uint8_t value);

/**
 * Pack message SDM_HSC1_FrS00.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_sdm_hsc1_fr_s00_pack(
    uint8_t *dst_p,
    const struct canvehicle_sdm_hsc1_fr_s00_t *src_p,
    size_t size);

/**
 * Unpack message SDM_HSC1_FrS00.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_sdm_hsc1_fr_s00_unpack(
    struct canvehicle_sdm_hsc1_fr_s00_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_sdm_hsc1_fr_s00_node_authn_resp1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_s00_node_authn_resp1_hsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_s00_node_authn_resp1_hsc1_is_in_range(uint64_t value);

/**
 * Pack message SDM_HSC1_FrS01.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_sdm_hsc1_fr_s01_pack(
    uint8_t *dst_p,
    const struct canvehicle_sdm_hsc1_fr_s01_t *src_p,
    size_t size);

/**
 * Unpack message SDM_HSC1_FrS01.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_sdm_hsc1_fr_s01_unpack(
    struct canvehicle_sdm_hsc1_fr_s01_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_sdm_hsc1_fr_s01_sdm_cphr3_lrn_result_fdbk_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_s01_sdm_cphr3_lrn_result_fdbk_hsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_s01_sdm_cphr3_lrn_result_fdbk_hsc1_is_in_range(uint64_t value);

/**
 * Pack message SDM_HSC1_FrS02.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_sdm_hsc1_fr_s02_pack(
    uint8_t *dst_p,
    const struct canvehicle_sdm_hsc1_fr_s02_t *src_p,
    size_t size);

/**
 * Unpack message SDM_HSC1_FrS02.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_sdm_hsc1_fr_s02_unpack(
    struct canvehicle_sdm_hsc1_fr_s02_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_sdm_hsc1_fr_s02_sdm_immo_data1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_s02_sdm_immo_data1_hsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_s02_sdm_immo_data1_hsc1_is_in_range(uint64_t value);

/**
 * Pack message SDM_HSC1_FrS03.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_sdm_hsc1_fr_s03_pack(
    uint8_t *dst_p,
    const struct canvehicle_sdm_hsc1_fr_s03_t *src_p,
    size_t size);

/**
 * Unpack message SDM_HSC1_FrS03.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_sdm_hsc1_fr_s03_unpack(
    struct canvehicle_sdm_hsc1_fr_s03_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_sdm_hsc1_fr_s03_sdm_immo_data2_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_sdm_hsc1_fr_s03_sdm_immo_data2_hsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_sdm_hsc1_fr_s03_sdm_immo_data2_hsc1_is_in_range(uint64_t value);

/**
 * Pack message TCM_HSC1_FrP07.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_tcm_hsc1_fr_p07_pack(
    uint8_t *dst_p,
    const struct canvehicle_tcm_hsc1_fr_p07_t *src_p,
    size_t size);

/**
 * Unpack message TCM_HSC1_FrP07.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_tcm_hsc1_fr_p07_unpack(
    struct canvehicle_tcm_hsc1_fr_p07_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_tcm_hsc1_fr_p07_tr_cc_cancl_req_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_tcm_hsc1_fr_p07_tr_cc_cancl_req_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_tcm_hsc1_fr_p07_tr_cc_cancl_req_hsc1_is_in_range(uint8_t value);

/**
 * Pack message TCM_HSC1_FrP09.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_tcm_hsc1_fr_p09_pack(
    uint8_t *dst_p,
    const struct canvehicle_tcm_hsc1_fr_p09_t *src_p,
    size_t size);

/**
 * Unpack message TCM_HSC1_FrP09.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_tcm_hsc1_fr_p09_unpack(
    struct canvehicle_tcm_hsc1_fr_p09_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_tcm_hsc1_fr_p09_tr_emsn_rltd_malf_ahsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_tcm_hsc1_fr_p09_tr_emsn_rltd_malf_ahsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_tcm_hsc1_fr_p09_tr_emsn_rltd_malf_ahsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_tcm_hsc1_fr_p09_tr_non_emsn_rltd_malf_ahsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_tcm_hsc1_fr_p09_tr_non_emsn_rltd_malf_ahsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_tcm_hsc1_fr_p09_tr_non_emsn_rltd_malf_ahsc1_is_in_range(uint8_t value);

/**
 * Pack message TC_HSC1_FrP01.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_tc_hsc1_fr_p01_pack(
    uint8_t *dst_p,
    const struct canvehicle_tc_hsc1_fr_p01_t *src_p,
    size_t size);

/**
 * Unpack message TC_HSC1_FrP01.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_tc_hsc1_fr_p01_unpack(
    struct canvehicle_tc_hsc1_fr_p01_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_tc_hsc1_fr_p01_tm_spd_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_tc_hsc1_fr_p01_tm_spd_h1_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_tc_hsc1_fr_p01_tm_spd_h1_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_tc_hsc1_fr_p01_tm_spd_v_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_tc_hsc1_fr_p01_tm_spd_v_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_tc_hsc1_fr_p01_tm_spd_v_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_tc_hsc1_fr_p01_tm_sta_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_tc_hsc1_fr_p01_tm_sta_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_tc_hsc1_fr_p01_tm_sta_h1_hsc1_is_in_range(uint8_t value);

/**
 * Pack message TC_HSC1_FrS01.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_tc_hsc1_fr_s01_pack(
    uint8_t *dst_p,
    const struct canvehicle_tc_hsc1_fr_s01_t *src_p,
    size_t size);

/**
 * Unpack message TC_HSC1_FrS01.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_tc_hsc1_fr_s01_unpack(
    struct canvehicle_tc_hsc1_fr_s01_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_tc_hsc1_fr_s01_tc_immo_data1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_tc_hsc1_fr_s01_tc_immo_data1_hsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_tc_hsc1_fr_s01_tc_immo_data1_hsc1_is_in_range(uint64_t value);

/**
 * Pack message TC_HSC1_FrS02.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_tc_hsc1_fr_s02_pack(
    uint8_t *dst_p,
    const struct canvehicle_tc_hsc1_fr_s02_t *src_p,
    size_t size);

/**
 * Unpack message TC_HSC1_FrS02.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_tc_hsc1_fr_s02_unpack(
    struct canvehicle_tc_hsc1_fr_s02_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_tc_hsc1_fr_s02_tc_immo_data2_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_tc_hsc1_fr_s02_tc_immo_data2_hsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_tc_hsc1_fr_s02_tc_immo_data2_hsc1_is_in_range(uint64_t value);

/**
 * Pack message TC_HSC1_FrS03.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_tc_hsc1_fr_s03_pack(
    uint8_t *dst_p,
    const struct canvehicle_tc_hsc1_fr_s03_t *src_p,
    size_t size);

/**
 * Unpack message TC_HSC1_FrS03.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_tc_hsc1_fr_s03_unpack(
    struct canvehicle_tc_hsc1_fr_s03_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t canvehicle_tc_hsc1_fr_s03_tc_to_pf_immo_chlg_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_tc_hsc1_fr_s03_tc_to_pf_immo_chlg_hsc1_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_tc_hsc1_fr_s03_tc_to_pf_immo_chlg_hsc1_is_in_range(uint64_t value);

/**
 * Pack message VCU_HSC1_ECM_FrP04.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_vcu_hsc1_ecm_fr_p04_pack(
    uint8_t *dst_p,
    const struct canvehicle_vcu_hsc1_ecm_fr_p04_t *src_p,
    size_t size);

/**
 * Unpack message VCU_HSC1_ECM_FrP04.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_vcu_hsc1_ecm_fr_p04_unpack(
    struct canvehicle_vcu_hsc1_ecm_fr_p04_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_vcu_hsc1_ecm_fr_p04_tr_estd_gear_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_ecm_fr_p04_tr_estd_gear_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_ecm_fr_p04_tr_estd_gear_vhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_vcu_hsc1_ecm_fr_p04_tr_estd_gear_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_ecm_fr_p04_tr_estd_gear_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_ecm_fr_p04_tr_estd_gear_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_vcu_hsc1_ecm_fr_p04_autoc_tr_cmdd_gear_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_ecm_fr_p04_autoc_tr_cmdd_gear_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_ecm_fr_p04_autoc_tr_cmdd_gear_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_vcu_hsc1_ecm_fr_p04_tr_shft_lvr_pos_v_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_ecm_fr_p04_tr_shft_lvr_pos_v_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_ecm_fr_p04_tr_shft_lvr_pos_v_h1_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_vcu_hsc1_ecm_fr_p04_tr_shft_lvr_pos_h1_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_ecm_fr_p04_tr_shft_lvr_pos_h1_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_ecm_fr_p04_tr_shft_lvr_pos_h1_hsc1_is_in_range(uint8_t value);

/**
 * Pack message VCU_HSC1_ECM_FrP11.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_vcu_hsc1_ecm_fr_p11_pack(
    uint8_t *dst_p,
    const struct canvehicle_vcu_hsc1_ecm_fr_p11_t *src_p,
    size_t size);

/**
 * Unpack message VCU_HSC1_ECM_FrP11.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_vcu_hsc1_ecm_fr_p11_unpack(
    struct canvehicle_vcu_hsc1_ecm_fr_p11_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_vcu_hsc1_ecm_fr_p11_coolng_fan_lvl_fdbk_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_ecm_fr_p11_coolng_fan_lvl_fdbk_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_ecm_fr_p11_coolng_fan_lvl_fdbk_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_vcu_hsc1_ecm_fr_p11_coolng_fan_pwm_fdbk_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_ecm_fr_p11_coolng_fan_pwm_fdbk_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_ecm_fr_p11_coolng_fan_pwm_fdbk_hsc1_is_in_range(uint8_t value);

/**
 * Pack message VCU_HSC1_ECM_FrP27.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_vcu_hsc1_ecm_fr_p27_pack(
    uint8_t *dst_p,
    const struct canvehicle_vcu_hsc1_ecm_fr_p27_t *src_p,
    size_t size);

/**
 * Unpack message VCU_HSC1_ECM_FrP27.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_vcu_hsc1_ecm_fr_p27_unpack(
    struct canvehicle_vcu_hsc1_ecm_fr_p27_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_vcu_hsc1_ecm_fr_p27_pt_acc_toq_req_resp_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_ecm_fr_p27_pt_acc_toq_req_resp_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_ecm_fr_p27_pt_acc_toq_req_resp_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_vcu_hsc1_ecm_fr_p27_brk_ast_req_val_spd_ast_sys_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_ecm_fr_p27_brk_ast_req_val_spd_ast_sys_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_ecm_fr_p27_brk_ast_req_val_spd_ast_sys_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_vcu_hsc1_ecm_fr_p27_trgt_spd_src_sts_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_ecm_fr_p27_trgt_spd_src_sts_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_ecm_fr_p27_trgt_spd_src_sts_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_vcu_hsc1_ecm_fr_p27_brk_ast_req_a_spd_ast_sys_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_ecm_fr_p27_brk_ast_req_a_spd_ast_sys_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_ecm_fr_p27_brk_ast_req_a_spd_ast_sys_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_vcu_hsc1_ecm_fr_p27_accel_ovrd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_ecm_fr_p27_accel_ovrd_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_ecm_fr_p27_accel_ovrd_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_vcu_hsc1_ecm_fr_p27_spd_ast_sys_sts_ecmhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_ecm_fr_p27_spd_ast_sys_sts_ecmhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_ecm_fr_p27_spd_ast_sys_sts_ecmhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_vcu_hsc1_ecm_fr_p27_spd_ast_sys_trgt_spd_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_ecm_fr_p27_spd_ast_sys_trgt_spd_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_ecm_fr_p27_spd_ast_sys_trgt_spd_hsc1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_vcu_hsc1_ecm_fr_p27_pt_adas_alv_rchsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_ecm_fr_p27_pt_adas_alv_rchsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_ecm_fr_p27_pt_adas_alv_rchsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_vcu_hsc1_ecm_fr_p27_pt_acc_toq_req_resp_pvhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_ecm_fr_p27_pt_acc_toq_req_resp_pvhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_ecm_fr_p27_pt_acc_toq_req_resp_pvhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_vcu_hsc1_ecm_fr_p27_spd_ast_md_ecmhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_ecm_fr_p27_spd_ast_md_ecmhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_ecm_fr_p27_spd_ast_md_ecmhsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t canvehicle_vcu_hsc1_ecm_fr_p27_brk_ass_req_pv_spd_ast_sys_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_ecm_fr_p27_brk_ass_req_pv_spd_ast_sys_hsc1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_ecm_fr_p27_brk_ass_req_pv_spd_ast_sys_hsc1_is_in_range(uint16_t value);

/**
 * Pack message VCU_HSC1_TCM_FrP01.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canvehicle_vcu_hsc1_tcm_fr_p01_pack(
    uint8_t *dst_p,
    const struct canvehicle_vcu_hsc1_tcm_fr_p01_t *src_p,
    size_t size);

/**
 * Unpack message VCU_HSC1_TCM_FrP01.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canvehicle_vcu_hsc1_tcm_fr_p01_unpack(
    struct canvehicle_vcu_hsc1_tcm_fr_p01_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_vcu_hsc1_tcm_fr_p01_tr_otpt_rotl_sts_rot_dircn_hsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_tcm_fr_p01_tr_otpt_rotl_sts_rot_dircn_hsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_tcm_fr_p01_tr_otpt_rotl_sts_rot_dircn_hsc1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t canvehicle_vcu_hsc1_tcm_fr_p01_tr_otpt_rotl_sts_vhsc1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canvehicle_vcu_hsc1_tcm_fr_p01_tr_otpt_rotl_sts_vhsc1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canvehicle_vcu_hsc1_tcm_fr_p01_tr_otpt_rotl_sts_vhsc1_is_in_range(uint8_t value);

int min(int a, int b);

int DBC_Decode(ZCAN_CAN_OBJ* R_message,int R_length,int batch_index, double *matrix, DBC_INFO* dbc_info);

#ifdef __cplusplus
}
#endif

#endif
