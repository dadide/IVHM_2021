/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 35.3.0 Tue Jan  5 22:10:29 2021.
 */

#ifndef CANXIAN_H
#define CANXIAN_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define CANXIAN_IMU1_FRAME_ID (0x18au)
#define CANXIAN_IMU2_FRAME_ID (0x18bu)
#define CANXIAN_ACC_1_FRAME_ID (0x181u)
#define CANXIAN_ACC_2_FRAME_ID (0x182u)
#define CANXIAN_ACC_3_FRAME_ID (0x183u)
#define CANXIAN_ACC_4_FRAME_ID (0x184u)
#define CANXIAN_ACC_5_FRAME_ID (0x185u)

/* Frame lengths in bytes. */
#define CANXIAN_IMU1_LENGTH (8u)
#define CANXIAN_IMU2_LENGTH (8u)
#define CANXIAN_ACC_1_LENGTH (8u)
#define CANXIAN_ACC_2_LENGTH (8u)
#define CANXIAN_ACC_3_LENGTH (8u)
#define CANXIAN_ACC_4_LENGTH (8u)
#define CANXIAN_ACC_5_LENGTH (8u)

/* Extended or standard frame types. */
#define CANXIAN_IMU1_IS_EXTENDED (0)
#define CANXIAN_IMU2_IS_EXTENDED (0)
#define CANXIAN_ACC_1_IS_EXTENDED (0)
#define CANXIAN_ACC_2_IS_EXTENDED (0)
#define CANXIAN_ACC_3_IS_EXTENDED (0)
#define CANXIAN_ACC_4_IS_EXTENDED (0)
#define CANXIAN_ACC_5_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/**
 * Signals in message IMU1.
 *
 * All signal values are as on the CAN bus.
 */
struct canxian_imu1_t {
    /**
     * Range: -500000..500000 (-500..500 deg/s)
     * Scale: 0.001
     * Offset: 0
     */
    int32_t gyro_x;

    /**
     * Range: -500000..500000 (-500..500 deg/s)
     * Scale: 0.001
     * Offset: 0
     */
    int32_t gyro_y;

    /**
     * Range: -10000..10000 (-10..10 g)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t acc_x;
};

/**
 * Signals in message IMU2.
 *
 * All signal values are as on the CAN bus.
 */
struct canxian_imu2_t {
    /**
     * Range: -500000..500000 (-500..500 deg/s)
     * Scale: 0.001
     * Offset: 0
     */
    int32_t gyro_z;

    /**
     * Range: -10000..10000 (-10..10 g)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t acc_y;

    /**
     * Range: -10000..10000 (-10..10 g)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t acc_z;
};

/**
 * Signals in message Acc_1.
 *
 * All signal values are as on the CAN bus.
 */
struct canxian_acc_1_t {
    /**
     * Range: -30000.00750000187500046875012..30000.00750000187500046875012 (-40..40 g)
     * Scale: 0.001333333
     * Offset: 0
     */
    int16_t acc_x_1;

    /**
     * Range: -30000.00750000187500046875012..30000.00750000187500046875012 (-40..40 g)
     * Scale: 0.001333333
     * Offset: 0
     */
    int16_t acc_y_1;

    /**
     * Range: -30000.00750000187500046875012..30000.00750000187500046875012 (-40..40 g)
     * Scale: 0.001333333
     * Offset: 0
     */
    int16_t acc_z_1;
};

/**
 * Signals in message Acc_2.
 *
 * All signal values are as on the CAN bus.
 */
struct canxian_acc_2_t {
    /**
     * Range: -30000.00750000187500046875012..30000.00750000187500046875012 (-40..40 g)
     * Scale: 0.001333333
     * Offset: 0
     */
    int16_t acc_x_2;

    /**
     * Range: -30000.00750000187500046875012..30000.00750000187500046875012 (-40..40 g)
     * Scale: 0.001333333
     * Offset: 0
     */
    int16_t acc_y_2;

    /**
     * Range: -30000.00750000187500046875012..30000.00750000187500046875012 (-40..40 g)
     * Scale: 0.001333333
     * Offset: 0
     */
    int16_t acc_z_2;
};

/**
 * Signals in message Acc_3.
 *
 * All signal values are as on the CAN bus.
 */
struct canxian_acc_3_t {
    /**
     * Range: -30000.00750000187500046875012..30000.00750000187500046875012 (-40..40 g)
     * Scale: 0.001333333
     * Offset: 0
     */
    int16_t acc_x_3;

    /**
     * Range: -30000.00750000187500046875012..30000.00750000187500046875012 (-40..40 g)
     * Scale: 0.001333333
     * Offset: 0
     */
    int16_t acc_y_3;

    /**
     * Range: -30000.00750000187500046875012..30000.00750000187500046875012 (-40..40 g)
     * Scale: 0.001333333
     * Offset: 0
     */
    int16_t acc_z_3;
};

/**
 * Signals in message Acc_4.
 *
 * All signal values are as on the CAN bus.
 */
struct canxian_acc_4_t {
    /**
     * Range: -30000.00750000187500046875012..30000.00750000187500046875012 (-40..40 g)
     * Scale: 0.001333333
     * Offset: 0
     */
    int16_t acc_x_4;

    /**
     * Range: -30000.00750000187500046875012..30000.00750000187500046875012 (-40..40 g)
     * Scale: 0.001333333
     * Offset: 0
     */
    int16_t acc_y_4;

    /**
     * Range: -30000.00750000187500046875012..30000.00750000187500046875012 (-40..40 g)
     * Scale: 0.001333333
     * Offset: 0
     */
    int16_t acc_z_4;
};

/**
 * Signals in message Acc_5.
 *
 * All signal values are as on the CAN bus.
 */
struct canxian_acc_5_t {
    /**
     * Range: -30000.00750000187500046875012..30000.00750000187500046875012 (-40..40 g)
     * Scale: 0.001333333
     * Offset: 0
     */
    int16_t acc_x_5;

    /**
     * Range: -30000.00750000187500046875012..30000.00750000187500046875012 (-40..40 g)
     * Scale: 0.001333333
     * Offset: 0
     */
    int16_t acc_y_5;

    /**
     * Range: -30000.00750000187500046875012..30000.00750000187500046875012 (-40..40 g)
     * Scale: 0.001333333
     * Offset: 0
     */
    int16_t acc_z_5;
};

/**
 * Pack message IMU1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canxian_imu1_pack(
    uint8_t *dst_p,
    const struct canxian_imu1_t *src_p,
    size_t size);

/**
 * Unpack message IMU1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canxian_imu1_unpack(
    struct canxian_imu1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t canxian_imu1_gyro_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_imu1_gyro_x_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_imu1_gyro_x_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t canxian_imu1_gyro_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_imu1_gyro_y_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_imu1_gyro_y_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canxian_imu1_acc_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_imu1_acc_x_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_imu1_acc_x_is_in_range(int16_t value);

/**
 * Pack message IMU2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canxian_imu2_pack(
    uint8_t *dst_p,
    const struct canxian_imu2_t *src_p,
    size_t size);

/**
 * Unpack message IMU2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canxian_imu2_unpack(
    struct canxian_imu2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t canxian_imu2_gyro_z_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_imu2_gyro_z_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_imu2_gyro_z_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canxian_imu2_acc_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_imu2_acc_y_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_imu2_acc_y_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canxian_imu2_acc_z_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_imu2_acc_z_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_imu2_acc_z_is_in_range(int16_t value);

/**
 * Pack message Acc_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canxian_acc_1_pack(
    uint8_t *dst_p,
    const struct canxian_acc_1_t *src_p,
    size_t size);

/**
 * Unpack message Acc_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canxian_acc_1_unpack(
    struct canxian_acc_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canxian_acc_1_acc_x_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_acc_1_acc_x_1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_acc_1_acc_x_1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canxian_acc_1_acc_y_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_acc_1_acc_y_1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_acc_1_acc_y_1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canxian_acc_1_acc_z_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_acc_1_acc_z_1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_acc_1_acc_z_1_is_in_range(int16_t value);

/**
 * Pack message Acc_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canxian_acc_2_pack(
    uint8_t *dst_p,
    const struct canxian_acc_2_t *src_p,
    size_t size);

/**
 * Unpack message Acc_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canxian_acc_2_unpack(
    struct canxian_acc_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canxian_acc_2_acc_x_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_acc_2_acc_x_2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_acc_2_acc_x_2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canxian_acc_2_acc_y_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_acc_2_acc_y_2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_acc_2_acc_y_2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canxian_acc_2_acc_z_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_acc_2_acc_z_2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_acc_2_acc_z_2_is_in_range(int16_t value);

/**
 * Pack message Acc_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canxian_acc_3_pack(
    uint8_t *dst_p,
    const struct canxian_acc_3_t *src_p,
    size_t size);

/**
 * Unpack message Acc_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canxian_acc_3_unpack(
    struct canxian_acc_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canxian_acc_3_acc_x_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_acc_3_acc_x_3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_acc_3_acc_x_3_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canxian_acc_3_acc_y_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_acc_3_acc_y_3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_acc_3_acc_y_3_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canxian_acc_3_acc_z_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_acc_3_acc_z_3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_acc_3_acc_z_3_is_in_range(int16_t value);

/**
 * Pack message Acc_4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canxian_acc_4_pack(
    uint8_t *dst_p,
    const struct canxian_acc_4_t *src_p,
    size_t size);

/**
 * Unpack message Acc_4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canxian_acc_4_unpack(
    struct canxian_acc_4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canxian_acc_4_acc_x_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_acc_4_acc_x_4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_acc_4_acc_x_4_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canxian_acc_4_acc_y_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_acc_4_acc_y_4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_acc_4_acc_y_4_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canxian_acc_4_acc_z_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_acc_4_acc_z_4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_acc_4_acc_z_4_is_in_range(int16_t value);

/**
 * Pack message Acc_5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int canxian_acc_5_pack(
    uint8_t *dst_p,
    const struct canxian_acc_5_t *src_p,
    size_t size);

/**
 * Unpack message Acc_5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int canxian_acc_5_unpack(
    struct canxian_acc_5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canxian_acc_5_acc_x_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_acc_5_acc_x_5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_acc_5_acc_x_5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canxian_acc_5_acc_y_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_acc_5_acc_y_5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_acc_5_acc_y_5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t canxian_acc_5_acc_z_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double canxian_acc_5_acc_z_5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool canxian_acc_5_acc_z_5_is_in_range(int16_t value);


#ifdef __cplusplus
}
#endif

#endif
